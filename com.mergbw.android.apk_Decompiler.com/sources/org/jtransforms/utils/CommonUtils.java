package org.jtransforms.utils;

import android.support.v4.media.session.PlaybackStateCompat;
import androidx.constraintlayout.core.motion.utils.TypedValues;
import com.alibaba.fastjson.asm.Opcodes;
import com.google.android.exoplayer2.RendererCapabilities;
import com.google.android.exoplayer2.extractor.ts.PsExtractor;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.math3.util.FastMath;
import pl.edu.icm.jlargearrays.ConcurrencyUtils;
import pl.edu.icm.jlargearrays.DoubleLargeArray;
import pl.edu.icm.jlargearrays.FloatLargeArray;
import pl.edu.icm.jlargearrays.LongLargeArray;

public class CommonUtils {
    private static long THREADS_BEGIN_N_1D_FFT_2THREADS = 8192;
    private static long THREADS_BEGIN_N_1D_FFT_4THREADS = 65536;
    private static long THREADS_BEGIN_N_2D = 65536;
    private static long THREADS_BEGIN_N_3D = 65536;
    private static boolean useLargeArrays = false;

    public static boolean isPowerOf2(int i) {
        return i > 0 && (i & (i + -1)) == 0;
    }

    public static boolean isPowerOf2(long j) {
        return j > 0 && (j & (j - 1)) == 0;
    }

    public static void sleep(long j) {
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static long getThreadsBeginN_1D_FFT_2Threads() {
        return THREADS_BEGIN_N_1D_FFT_2THREADS;
    }

    public static long getThreadsBeginN_1D_FFT_4Threads() {
        return THREADS_BEGIN_N_1D_FFT_4THREADS;
    }

    public static long getThreadsBeginN_2D() {
        return THREADS_BEGIN_N_2D;
    }

    public static long getThreadsBeginN_3D() {
        return THREADS_BEGIN_N_3D;
    }

    public static void setThreadsBeginN_1D_FFT_2Threads(long j) {
        if (j < 1024) {
            THREADS_BEGIN_N_1D_FFT_2THREADS = 1024;
        } else {
            THREADS_BEGIN_N_1D_FFT_2THREADS = j;
        }
    }

    public static void setThreadsBeginN_1D_FFT_4Threads(long j) {
        if (j < 1024) {
            THREADS_BEGIN_N_1D_FFT_4THREADS = 1024;
        } else {
            THREADS_BEGIN_N_1D_FFT_4THREADS = j;
        }
    }

    public static void setThreadsBeginN_2D(long j) {
        if (j < PlaybackStateCompat.ACTION_SKIP_TO_QUEUE_ITEM) {
            THREADS_BEGIN_N_2D = PlaybackStateCompat.ACTION_SKIP_TO_QUEUE_ITEM;
        } else {
            THREADS_BEGIN_N_2D = j;
        }
    }

    public static void setThreadsBeginN_3D(long j) {
        THREADS_BEGIN_N_3D = j;
    }

    public static void resetThreadsBeginN_FFT() {
        THREADS_BEGIN_N_1D_FFT_2THREADS = PlaybackStateCompat.ACTION_PLAY_FROM_URI;
        THREADS_BEGIN_N_1D_FFT_4THREADS = PlaybackStateCompat.ACTION_PREPARE_FROM_SEARCH;
    }

    public static void resetThreadsBeginN() {
        THREADS_BEGIN_N_2D = PlaybackStateCompat.ACTION_PREPARE_FROM_SEARCH;
        THREADS_BEGIN_N_3D = PlaybackStateCompat.ACTION_PREPARE_FROM_SEARCH;
    }

    public static boolean isUseLargeArrays() {
        return useLargeArrays;
    }

    public static void setUseLargeArrays(boolean z) {
        useLargeArrays = z;
    }

    public static int nextPow2(int i) {
        if (i < 1) {
            throw new IllegalArgumentException("x must be greater or equal 1");
        } else if (((i - 1) & i) == 0) {
            return i;
        } else {
            int i2 = i | (i >>> 1);
            int i3 = i2 | (i2 >>> 2);
            int i4 = i3 | (i3 >>> 4);
            int i5 = i4 | (i4 >>> 8);
            return (i5 | (i5 >>> 16)) + 1;
        }
    }

    public static long nextPow2(long j) {
        if (j < 1) {
            throw new IllegalArgumentException("x must be greater or equal 1");
        } else if (((j - 1) & j) == 0) {
            return j;
        } else {
            long j2 = j | (j >>> 1);
            long j3 = j2 | (j2 >>> 2);
            long j4 = j3 | (j3 >>> 4);
            long j5 = j4 | (j4 >>> 8);
            long j6 = j5 | (j5 >>> 16);
            return (j6 | (j6 >>> 32)) + 1;
        }
    }

    public static int prevPow2(int i) {
        if (i >= 1) {
            return (int) FastMath.pow(2.0d, FastMath.floor(FastMath.log((double) i) / FastMath.log(2.0d)));
        }
        throw new IllegalArgumentException("x must be greater or equal 1");
    }

    public static long prevPow2(long j) {
        if (j >= 1) {
            return (long) FastMath.pow(2.0d, FastMath.floor(FastMath.log((double) j) / FastMath.log(2.0d)));
        }
        throw new IllegalArgumentException("x must be greater or equal 1");
    }

    public static long getReminder(long j, int[] iArr) {
        if (j > 0) {
            for (int i = 0; i < iArr.length && j != 1; i++) {
                long j2 = (long) iArr[i];
                while (j % j2 == 0) {
                    j /= j2;
                }
            }
            return j;
        }
        throw new IllegalArgumentException("n must be positive integer");
    }

    public static void makeipt(int i, int[] iArr) {
        iArr[2] = 0;
        iArr[3] = 16;
        int i2 = 2;
        while (i > 32) {
            int i3 = i2 << 1;
            int i4 = i2 << 4;
            for (int i5 = i2; i5 < i3; i5++) {
                int i6 = iArr[i5] << 2;
                iArr[i2 + i5] = i6;
                iArr[i3 + i5] = i6 + i4;
            }
            i >>= 2;
            i2 = i3;
        }
    }

    public static void makeipt(long j, LongLargeArray longLargeArray) {
        long j2 = 2;
        longLargeArray.setLong(2, 0);
        longLargeArray.setLong(3, 16);
        while (j > 32) {
            long j3 = j2 << 1;
            long j4 = j2 << 4;
            for (long j5 = j2; j5 < j3; j5++) {
                long j6 = longLargeArray.getLong(j5) << 2;
                longLargeArray.setLong(j2 + j5, j6);
                longLargeArray.setLong(j3 + j5, j6 + j4);
            }
            j >>= 2;
            j2 = j3;
        }
    }

    public static void makewt(int i, int[] iArr, double[] dArr) {
        int i2 = i;
        iArr[0] = i2;
        iArr[1] = 1;
        if (i2 > 2) {
            int i3 = i2 >> 1;
            double d = (double) i3;
            double d2 = 0.7853981633974483d / d;
            double d3 = 2.0d * d2;
            double cos = FastMath.cos(d * d2);
            dArr[0] = 1.0d;
            dArr[1] = cos;
            if (i3 == 4) {
                dArr[2] = FastMath.cos(d3);
                dArr[3] = FastMath.sin(d3);
            } else if (i3 > 4) {
                makeipt(i, iArr);
                dArr[2] = 0.5d / FastMath.cos(d3);
                dArr[3] = 0.5d / FastMath.cos(6.0d * d2);
                for (int i4 = 4; i4 < i3; i4 += 4) {
                    double d4 = ((double) i4) * d2;
                    double d5 = 3.0d * d4;
                    dArr[i4] = FastMath.cos(d4);
                    dArr[i4 + 1] = FastMath.sin(d4);
                    dArr[i4 + 2] = FastMath.cos(d5);
                    dArr[i4 + 3] = -FastMath.sin(d5);
                }
            }
            int i5 = 0;
            while (i3 > 2) {
                int i6 = i5 + i3;
                i3 >>= 1;
                dArr[i6] = 1.0d;
                dArr[i6 + 1] = cos;
                if (i3 == 4) {
                    double d6 = dArr[i5 + 4];
                    double d7 = dArr[i5 + 5];
                    dArr[i6 + 2] = d6;
                    dArr[i6 + 3] = d7;
                } else if (i3 > 4) {
                    double d8 = dArr[i5 + 4];
                    double d9 = dArr[i5 + 6];
                    dArr[i6 + 2] = 0.5d / d8;
                    dArr[i6 + 3] = 0.5d / d9;
                    for (int i7 = 4; i7 < i3; i7 += 4) {
                        int i8 = (i7 * 2) + i5;
                        int i9 = i6 + i7;
                        double d10 = dArr[i8];
                        double d11 = dArr[i8 + 1];
                        double d12 = dArr[i8 + 2];
                        double d13 = dArr[i8 + 3];
                        dArr[i9] = d10;
                        dArr[i9 + 1] = d11;
                        dArr[i9 + 2] = d12;
                        dArr[i9 + 3] = d13;
                    }
                }
                i5 = i6;
            }
        }
    }

    public static void makewt(long j, LongLargeArray longLargeArray, DoubleLargeArray doubleLargeArray) {
        long j2;
        double d;
        long j3;
        long j4 = j;
        LongLargeArray longLargeArray2 = longLargeArray;
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        longLargeArray2.setLong(0, j4);
        long j5 = 1;
        longLargeArray2.setLong(1, 1);
        if (j4 > 2) {
            long j6 = j4 >> 1;
            double d2 = (double) j6;
            double d3 = 0.7853981633974483d / d2;
            double d4 = 2.0d * d3;
            double cos = FastMath.cos(d2 * d3);
            doubleLargeArray2.setDouble(0, 1.0d);
            doubleLargeArray2.setDouble(1, cos);
            int i = (j6 > 4 ? 1 : (j6 == 4 ? 0 : -1));
            long j7 = 3;
            if (i == 0) {
                doubleLargeArray2.setDouble(2, FastMath.cos(d4));
                doubleLargeArray2.setDouble(3, FastMath.sin(d4));
            } else if (i > 0) {
                makeipt(j, longLargeArray);
                doubleLargeArray2.setDouble(2, 0.5d / FastMath.cos(d4));
                doubleLargeArray2.setDouble(3, 0.5d / FastMath.cos(6.0d * d3));
                long j8 = 4;
                while (j8 < j6) {
                    double d5 = ((double) j8) * d3;
                    double d6 = 3.0d * d5;
                    doubleLargeArray2.setDouble(j8, FastMath.cos(d5));
                    doubleLargeArray2.setDouble(j8 + 1, FastMath.sin(d5));
                    doubleLargeArray2.setDouble(j8 + 2, FastMath.cos(d6));
                    doubleLargeArray2.setDouble(j8 + 3, -FastMath.sin(d6));
                    j8 += 4;
                    j6 = j6;
                }
            }
            long j9 = 2;
            long j10 = 0;
            for (long j11 = j6; j11 > j9; j11 = j2) {
                long j12 = j10 + j11;
                j2 = j11 >> 1;
                doubleLargeArray2.setDouble(j12, 1.0d);
                doubleLargeArray2.setDouble(j12 + j5, cos);
                int i2 = (j2 > 4 ? 1 : (j2 == 4 ? 0 : -1));
                if (i2 == 0) {
                    double d7 = doubleLargeArray2.getDouble(j10 + 4);
                    double d8 = doubleLargeArray2.getDouble(j10 + 5);
                    d = cos;
                    j3 = 2;
                    doubleLargeArray2.setDouble(j12 + 2, d7);
                    doubleLargeArray2.setDouble(j12 + j7, d8);
                } else {
                    d = cos;
                    j3 = 2;
                    if (i2 > 0) {
                        double d9 = doubleLargeArray2.getDouble(j10 + 4);
                        double d10 = doubleLargeArray2.getDouble(j10 + 6);
                        doubleLargeArray2.setDouble(j12 + 2, 0.5d / d9);
                        doubleLargeArray2.setDouble(j12 + j7, 0.5d / d10);
                        long j13 = 4;
                        while (j13 < j2) {
                            long j14 = j10 + (j13 * 2);
                            long j15 = j12 + j13;
                            double d11 = doubleLargeArray2.getDouble(j14);
                            long j16 = j12;
                            double d12 = doubleLargeArray2.getDouble(j14 + 1);
                            double d13 = doubleLargeArray2.getDouble(j14 + 2);
                            double d14 = doubleLargeArray2.getDouble(j14 + 3);
                            doubleLargeArray2.setDouble(j15, d11);
                            doubleLargeArray2.setDouble(j15 + 1, d12);
                            doubleLargeArray2.setDouble(j15 + 2, d13);
                            doubleLargeArray2.setDouble(j15 + 3, d14);
                            j13 += 4;
                            j12 = j16;
                            j7 = 3;
                            j2 = j2;
                        }
                    }
                }
                j10 = j12;
                j9 = j3;
                j5 = 1;
                cos = d;
                j7 = j7;
            }
        }
    }

    public static void makect(int i, double[] dArr, int i2, int[] iArr) {
        iArr[1] = i;
        if (i > 1) {
            int i3 = i >> 1;
            double d = (double) i3;
            double d2 = 0.7853981633974483d / d;
            double cos = FastMath.cos(d * d2);
            dArr[i2] = cos;
            dArr[i2 + i3] = cos * 0.5d;
            for (int i4 = 1; i4 < i3; i4++) {
                double d3 = ((double) i4) * d2;
                dArr[i2 + i4] = FastMath.cos(d3) * 0.5d;
                dArr[(i2 + i) - i4] = FastMath.sin(d3) * 0.5d;
            }
        }
    }

    public static void makect(long j, DoubleLargeArray doubleLargeArray, long j2, LongLargeArray longLargeArray) {
        long j3 = j;
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j4 = j2;
        longLargeArray.setLong(1, j3);
        if (j3 > 1) {
            long j5 = j3 >> 1;
            double d = (double) j5;
            double d2 = 0.7853981633974483d / d;
            doubleLargeArray2.setDouble(j4, FastMath.cos(d * d2));
            doubleLargeArray2.setDouble(j4 + j5, doubleLargeArray.getDouble(j2) * 0.5d);
            long j6 = 1;
            while (j6 < j5) {
                double d3 = ((double) j6) * d2;
                doubleLargeArray2.setDouble(j4 + j6, FastMath.cos(d3) * 0.5d);
                doubleLargeArray2.setDouble((j4 + j3) - j6, FastMath.sin(d3) * 0.5d);
                j6++;
                j5 = j5;
            }
        }
    }

    public static void makect(int i, float[] fArr, int i2, int[] iArr) {
        iArr[1] = i;
        if (i > 1) {
            int i3 = i >> 1;
            float f = (float) i3;
            float f2 = 0.7853982f / f;
            float cos = (float) FastMath.cos((double) (f * f2));
            fArr[i2] = cos;
            fArr[i2 + i3] = cos * 0.5f;
            for (int i4 = 1; i4 < i3; i4++) {
                double d = (double) (((float) i4) * f2);
                fArr[i2 + i4] = ((float) FastMath.cos(d)) * 0.5f;
                fArr[(i2 + i) - i4] = ((float) FastMath.sin(d)) * 0.5f;
            }
        }
    }

    public static void makect(long j, FloatLargeArray floatLargeArray, long j2, LongLargeArray longLargeArray) {
        long j3 = j;
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j4 = j2;
        longLargeArray.setLong(1, j3);
        if (j3 > 1) {
            long j5 = j3 >> 1;
            float f = (float) j5;
            float f2 = 0.7853982f / f;
            floatLargeArray2.setFloat(j4, (float) FastMath.cos((double) (f * f2)));
            floatLargeArray2.setFloat(j4 + j5, floatLargeArray.getFloat(j2) * 0.5f);
            long j6 = 1;
            while (j6 < j5) {
                double d = (double) (((float) j6) * f2);
                floatLargeArray2.setFloat(j4 + j6, ((float) FastMath.cos(d)) * 0.5f);
                floatLargeArray2.setFloat((j4 + j3) - j6, ((float) FastMath.sin(d)) * 0.5f);
                j6++;
                j5 = j5;
            }
        }
    }

    public static void makewt(int i, int[] iArr, float[] fArr) {
        int i2 = i;
        int i3 = 0;
        iArr[0] = i2;
        iArr[1] = 1;
        if (i2 > 2) {
            int i4 = i2 >> 1;
            float f = (float) i4;
            float f2 = 0.7853982f / f;
            float f3 = 2.0f * f2;
            float cos = (float) FastMath.cos((double) (f * f2));
            fArr[0] = 1.0f;
            fArr[1] = cos;
            if (i4 == 4) {
                double d = (double) f3;
                fArr[2] = (float) FastMath.cos(d);
                fArr[3] = (float) FastMath.sin(d);
            } else if (i4 > 4) {
                makeipt(i, iArr);
                fArr[2] = 0.5f / ((float) FastMath.cos((double) f3));
                fArr[3] = 0.5f / ((float) FastMath.cos((double) (6.0f * f2)));
                for (int i5 = 4; i5 < i4; i5 += 4) {
                    float f4 = ((float) i5) * f2;
                    double d2 = (double) f4;
                    fArr[i5] = (float) FastMath.cos(d2);
                    fArr[i5 + 1] = (float) FastMath.sin(d2);
                    double d3 = (double) (3.0f * f4);
                    fArr[i5 + 2] = (float) FastMath.cos(d3);
                    fArr[i5 + 3] = -((float) FastMath.sin(d3));
                }
            }
            while (i4 > 2) {
                int i6 = i3 + i4;
                i4 >>= 1;
                fArr[i6] = 1.0f;
                fArr[i6 + 1] = cos;
                if (i4 == 4) {
                    float f5 = fArr[i3 + 4];
                    float f6 = fArr[i3 + 5];
                    fArr[i6 + 2] = f5;
                    fArr[i6 + 3] = f6;
                } else if (i4 > 4) {
                    float f7 = fArr[i3 + 4];
                    float f8 = fArr[i3 + 6];
                    fArr[i6 + 2] = 0.5f / f7;
                    fArr[i6 + 3] = 0.5f / f8;
                    for (int i7 = 4; i7 < i4; i7 += 4) {
                        int i8 = (i7 * 2) + i3;
                        int i9 = i6 + i7;
                        float f9 = fArr[i8];
                        float f10 = fArr[i8 + 1];
                        float f11 = fArr[i8 + 2];
                        float f12 = fArr[i8 + 3];
                        fArr[i9] = f9;
                        fArr[i9 + 1] = f10;
                        fArr[i9 + 2] = f11;
                        fArr[i9 + 3] = f12;
                    }
                }
                i3 = i6;
            }
        }
    }

    public static void makewt(long j, LongLargeArray longLargeArray, FloatLargeArray floatLargeArray) {
        long j2;
        long j3;
        long j4;
        long j5 = j;
        LongLargeArray longLargeArray2 = longLargeArray;
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        longLargeArray2.setLong(0, j5);
        longLargeArray2.setLong(1, 1);
        if (j5 > 2) {
            long j6 = j5 >> 1;
            float f = (float) j6;
            float f2 = 0.7853982f / f;
            float f3 = 2.0f * f2;
            float cos = (float) FastMath.cos((double) (f * f2));
            floatLargeArray2.setFloat(0, 1.0f);
            floatLargeArray2.setFloat(1, cos);
            int i = (j6 > 4 ? 1 : (j6 == 4 ? 0 : -1));
            if (i == 0) {
                double d = (double) f3;
                floatLargeArray2.setFloat(2, (float) FastMath.cos(d));
                floatLargeArray2.setFloat(3, (float) FastMath.sin(d));
            } else if (i > 0) {
                makeipt(j, longLargeArray);
                floatLargeArray2.setFloat(2, 0.5f / ((float) FastMath.cos((double) f3)));
                floatLargeArray2.setFloat(3, 0.5f / ((float) FastMath.cos((double) (6.0f * f2))));
                long j7 = 4;
                while (j7 < j6) {
                    float f4 = ((float) j7) * f2;
                    double d2 = (double) f4;
                    floatLargeArray2.setFloat(j7, (float) FastMath.cos(d2));
                    floatLargeArray2.setFloat(j7 + 1, (float) FastMath.sin(d2));
                    double d3 = (double) (3.0f * f4);
                    floatLargeArray2.setFloat(j7 + 2, (float) FastMath.cos(d3));
                    floatLargeArray2.setFloat(j7 + 3, -((float) FastMath.sin(d3)));
                    j7 += 4;
                    j6 = j6;
                }
            }
            long j8 = j6;
            long j9 = 2;
            long j10 = 0;
            while (j8 > j9) {
                long j11 = j10 + j8;
                j8 >>= 1;
                floatLargeArray2.setFloat(j11, 1.0f);
                floatLargeArray2.setFloat(j11 + 1, cos);
                int i2 = (j8 > 4 ? 1 : (j8 == 4 ? 0 : -1));
                if (i2 == 0) {
                    float f5 = floatLargeArray2.getFloat(j10 + 4);
                    float f6 = floatLargeArray2.getFloat(j10 + 5);
                    j4 = 2;
                    floatLargeArray2.setFloat(j11 + 2, f5);
                    floatLargeArray2.setFloat(j11 + 3, f6);
                } else {
                    j4 = 2;
                    if (i2 > 0) {
                        float f7 = floatLargeArray2.getFloat(j10 + 4);
                        float f8 = floatLargeArray2.getFloat(6 + j10);
                        floatLargeArray2.setFloat(j11 + 2, 0.5f / f7);
                        floatLargeArray2.setFloat(j11 + 3, 0.5f / f8);
                        long j12 = 4;
                        while (j12 < j8) {
                            long j13 = (j12 * 2) + j10;
                            long j14 = j11 + j12;
                            float f9 = floatLargeArray2.getFloat(j13);
                            long j15 = j11;
                            float f10 = floatLargeArray2.getFloat(j13 + 1);
                            float f11 = floatLargeArray2.getFloat(j13 + 2);
                            float f12 = floatLargeArray2.getFloat(j13 + 3);
                            floatLargeArray2.setFloat(j14, f9);
                            floatLargeArray2.setFloat(j14 + 1, f10);
                            floatLargeArray2.setFloat(j14 + 2, f11);
                            floatLargeArray2.setFloat(j14 + 3, f12);
                            j12 += 4;
                            j11 = j15;
                        }
                        j2 = j11;
                        j3 = 2;
                        j10 = j2;
                        j9 = j3;
                    }
                }
                j2 = j11;
                j3 = j4;
                j10 = j2;
                j9 = j3;
            }
        }
    }

    public static void cftfsub(int i, double[] dArr, int i2, int[] iArr, int i3, double[] dArr2) {
        if (i > 8) {
            if (i > 32) {
                cftf1st(i, dArr, i2, dArr2, i3 - (i >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && ((long) i) >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(i, dArr, i2, i3, dArr2);
                } else if (i > 512) {
                    cftrec4(i, dArr, i2, i3, dArr2);
                } else if (i > 128) {
                    cftleaf(i, 1, dArr, i2, i3, dArr2);
                } else {
                    cftfx41(i, dArr, i2, i3, dArr2);
                }
                bitrv2(i, iArr, dArr, i2);
            } else if (i == 32) {
                cftf161(dArr, i2, dArr2, i3 - 8);
                bitrv216(dArr, i2);
            } else {
                cftf081(dArr, i2, dArr2, 0);
                bitrv208(dArr, i2);
            }
        } else if (i == 8) {
            cftf040(dArr, i2);
        } else if (i == 4) {
            cftxb020(dArr, i2);
        }
    }

    public static void cftfsub(long j, DoubleLargeArray doubleLargeArray, long j2, LongLargeArray longLargeArray, long j3, DoubleLargeArray doubleLargeArray2) {
        int i = (j > 8 ? 1 : (j == 8 ? 0 : -1));
        if (i > 0) {
            int i2 = (j > 32 ? 1 : (j == 32 ? 0 : -1));
            if (i2 > 0) {
                cftf1st(j, doubleLargeArray, j2, doubleLargeArray2, j3 - (j >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && j >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(j, doubleLargeArray, j2, j3, doubleLargeArray2);
                } else if (j > 512) {
                    cftrec4(j, doubleLargeArray, j2, j3, doubleLargeArray2);
                } else if (j > 128) {
                    cftleaf(j, 1, doubleLargeArray, j2, j3, doubleLargeArray2);
                } else {
                    cftfx41(j, doubleLargeArray, j2, j3, doubleLargeArray2);
                }
                bitrv2l(j, longLargeArray, doubleLargeArray, j2);
            } else if (i2 == 0) {
                cftf161(doubleLargeArray, j2, doubleLargeArray2, j3 - 8);
                bitrv216(doubleLargeArray, j2);
            } else {
                cftf081(doubleLargeArray, j2, doubleLargeArray2, 0);
                bitrv208(doubleLargeArray, j2);
            }
        } else if (i == 0) {
            cftf040(doubleLargeArray, j2);
        } else if (j == 4) {
            cftxb020(doubleLargeArray, j2);
        }
    }

    public static void cftbsub(int i, double[] dArr, int i2, int[] iArr, int i3, double[] dArr2) {
        if (i > 8) {
            if (i > 32) {
                cftb1st(i, dArr, i2, dArr2, i3 - (i >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && ((long) i) >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(i, dArr, i2, i3, dArr2);
                } else if (i > 512) {
                    cftrec4(i, dArr, i2, i3, dArr2);
                } else if (i > 128) {
                    cftleaf(i, 1, dArr, i2, i3, dArr2);
                } else {
                    cftfx41(i, dArr, i2, i3, dArr2);
                }
                bitrv2conj(i, iArr, dArr, i2);
            } else if (i == 32) {
                cftf161(dArr, i2, dArr2, i3 - 8);
                bitrv216neg(dArr, i2);
            } else {
                cftf081(dArr, i2, dArr2, 0);
                bitrv208neg(dArr, i2);
            }
        } else if (i == 8) {
            cftb040(dArr, i2);
        } else if (i == 4) {
            cftxb020(dArr, i2);
        }
    }

    public static void cftbsub(long j, DoubleLargeArray doubleLargeArray, long j2, LongLargeArray longLargeArray, long j3, DoubleLargeArray doubleLargeArray2) {
        int i = (j > 8 ? 1 : (j == 8 ? 0 : -1));
        if (i > 0) {
            int i2 = (j > 32 ? 1 : (j == 32 ? 0 : -1));
            if (i2 > 0) {
                cftb1st(j, doubleLargeArray, j2, doubleLargeArray2, j3 - (j >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && j >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(j, doubleLargeArray, j2, j3, doubleLargeArray2);
                } else if (j > 512) {
                    cftrec4(j, doubleLargeArray, j2, j3, doubleLargeArray2);
                } else if (j > 128) {
                    cftleaf(j, 1, doubleLargeArray, j2, j3, doubleLargeArray2);
                } else {
                    cftfx41(j, doubleLargeArray, j2, j3, doubleLargeArray2);
                }
                bitrv2conj(j, longLargeArray, doubleLargeArray, j2);
            } else if (i2 == 0) {
                cftf161(doubleLargeArray, j2, doubleLargeArray2, j3 - 8);
                bitrv216neg(doubleLargeArray, j2);
            } else {
                cftf081(doubleLargeArray, j2, doubleLargeArray2, 0);
                bitrv208neg(doubleLargeArray, j2);
            }
        } else if (i == 0) {
            cftb040(doubleLargeArray, j2);
        } else if (j == 4) {
            cftxb020(doubleLargeArray, j2);
        }
    }

    public static void bitrv2(int i, int[] iArr, double[] dArr, int i2) {
        int i3 = i >> 2;
        int i4 = 1;
        while (i3 > 8) {
            i4 <<= 1;
            i3 >>= 2;
        }
        int i5 = i >> 1;
        int i6 = i4 * 4;
        if (i3 == 8) {
            for (int i7 = 0; i7 < i4; i7++) {
                int i8 = i7 * 4;
                for (int i9 = 0; i9 < i7; i9++) {
                    int i10 = (i9 * 4) + (iArr[i4 + i7] * 2);
                    int i11 = (iArr[i4 + i9] * 2) + i8;
                    int i12 = i2 + i10;
                    int i13 = i2 + i11;
                    long j = dArr[i12];
                    int i14 = i12 + 1;
                    long j2 = dArr[i14];
                    long j3 = dArr[i13];
                    int i15 = i13 + 1;
                    long j4 = dArr[i15];
                    dArr[i12] = j3;
                    dArr[i14] = j4;
                    dArr[i13] = j;
                    dArr[i15] = j2;
                    int i16 = i10 + i6;
                    int i17 = i4 * 8;
                    int i18 = i11 + i17;
                    int i19 = i2 + i16;
                    int i20 = i2 + i18;
                    long j5 = dArr[i19];
                    int i21 = i19 + 1;
                    long j6 = dArr[i21];
                    long j7 = dArr[i20];
                    int i22 = i20 + 1;
                    long j8 = dArr[i22];
                    dArr[i19] = j7;
                    dArr[i21] = j8;
                    dArr[i20] = j5;
                    dArr[i22] = j6;
                    int i23 = i16 + i6;
                    int i24 = i18 - i6;
                    int i25 = i2 + i23;
                    int i26 = i2 + i24;
                    long j9 = dArr[i25];
                    int i27 = i25 + 1;
                    long j10 = dArr[i27];
                    long j11 = dArr[i26];
                    int i28 = i26 + 1;
                    long j12 = dArr[i28];
                    dArr[i25] = j11;
                    dArr[i27] = j12;
                    dArr[i26] = j9;
                    dArr[i28] = j10;
                    int i29 = i23 + i6;
                    int i30 = i24 + i17;
                    int i31 = i2 + i29;
                    int i32 = i2 + i30;
                    long j13 = dArr[i31];
                    int i33 = i31 + 1;
                    long j14 = dArr[i33];
                    long j15 = dArr[i32];
                    int i34 = i32 + 1;
                    long j16 = dArr[i34];
                    dArr[i31] = j15;
                    dArr[i33] = j16;
                    dArr[i32] = j13;
                    dArr[i34] = j14;
                    int i35 = i29 + i5;
                    int i36 = i30 + 2;
                    int i37 = i2 + i35;
                    int i38 = i2 + i36;
                    long j17 = dArr[i37];
                    int i39 = i37 + 1;
                    long j18 = dArr[i39];
                    long j19 = dArr[i38];
                    int i40 = i38 + 1;
                    long j20 = dArr[i40];
                    dArr[i37] = j19;
                    dArr[i39] = j20;
                    dArr[i38] = j17;
                    dArr[i40] = j18;
                    int i41 = i35 - i6;
                    int i42 = i36 - i17;
                    int i43 = i2 + i41;
                    int i44 = i2 + i42;
                    long j21 = dArr[i43];
                    int i45 = i43 + 1;
                    long j22 = dArr[i45];
                    long j23 = dArr[i44];
                    int i46 = i44 + 1;
                    long j24 = dArr[i46];
                    dArr[i43] = j23;
                    dArr[i45] = j24;
                    dArr[i44] = j21;
                    dArr[i46] = j22;
                    int i47 = i41 - i6;
                    int i48 = i42 + i6;
                    int i49 = i2 + i47;
                    int i50 = i2 + i48;
                    long j25 = dArr[i49];
                    int i51 = i49 + 1;
                    long j26 = dArr[i51];
                    long j27 = dArr[i50];
                    int i52 = i50 + 1;
                    long j28 = dArr[i52];
                    dArr[i49] = j27;
                    dArr[i51] = j28;
                    dArr[i50] = j25;
                    dArr[i52] = j26;
                    int i53 = i47 - i6;
                    int i54 = i48 - i17;
                    int i55 = i2 + i53;
                    int i56 = i2 + i54;
                    long j29 = dArr[i55];
                    int i57 = i55 + 1;
                    long j30 = dArr[i57];
                    long j31 = dArr[i56];
                    int i58 = i56 + 1;
                    long j32 = dArr[i58];
                    dArr[i55] = j31;
                    dArr[i57] = j32;
                    dArr[i56] = j29;
                    dArr[i58] = j30;
                    int i59 = i53 + 2;
                    int i60 = i54 + i5;
                    int i61 = i2 + i59;
                    int i62 = i2 + i60;
                    long j33 = dArr[i61];
                    int i63 = i61 + 1;
                    long j34 = dArr[i63];
                    long j35 = dArr[i62];
                    int i64 = i62 + 1;
                    long j36 = dArr[i64];
                    dArr[i61] = j35;
                    dArr[i63] = j36;
                    dArr[i62] = j33;
                    dArr[i64] = j34;
                    int i65 = i59 + i6;
                    int i66 = i60 + i17;
                    int i67 = i2 + i65;
                    int i68 = i2 + i66;
                    long j37 = dArr[i67];
                    int i69 = i67 + 1;
                    long j38 = dArr[i69];
                    long j39 = dArr[i68];
                    int i70 = i68 + 1;
                    long j40 = dArr[i70];
                    dArr[i67] = j39;
                    dArr[i69] = j40;
                    dArr[i68] = j37;
                    dArr[i70] = j38;
                    int i71 = i65 + i6;
                    int i72 = i66 - i6;
                    int i73 = i2 + i71;
                    int i74 = i2 + i72;
                    long j41 = dArr[i73];
                    int i75 = i73 + 1;
                    long j42 = dArr[i75];
                    long j43 = dArr[i74];
                    int i76 = i74 + 1;
                    long j44 = dArr[i76];
                    dArr[i73] = j43;
                    dArr[i75] = j44;
                    dArr[i74] = j41;
                    dArr[i76] = j42;
                    int i77 = i71 + i6;
                    int i78 = i72 + i17;
                    int i79 = i2 + i77;
                    int i80 = i2 + i78;
                    long j45 = dArr[i79];
                    int i81 = i79 + 1;
                    long j46 = dArr[i81];
                    long j47 = dArr[i80];
                    int i82 = i80 + 1;
                    long j48 = dArr[i82];
                    dArr[i79] = j47;
                    dArr[i81] = j48;
                    dArr[i80] = j45;
                    dArr[i82] = j46;
                    int i83 = i77 - i5;
                    int i84 = i78 - 2;
                    int i85 = i2 + i83;
                    int i86 = i2 + i84;
                    long j49 = dArr[i85];
                    int i87 = i85 + 1;
                    long j50 = dArr[i87];
                    long j51 = dArr[i86];
                    int i88 = i86 + 1;
                    long j52 = dArr[i88];
                    dArr[i85] = j51;
                    dArr[i87] = j52;
                    dArr[i86] = j49;
                    dArr[i88] = j50;
                    int i89 = i83 - i6;
                    int i90 = i84 - i17;
                    int i91 = i2 + i89;
                    int i92 = i2 + i90;
                    long j53 = dArr[i91];
                    int i93 = i91 + 1;
                    long j54 = dArr[i93];
                    long j55 = dArr[i92];
                    int i94 = i92 + 1;
                    long j56 = dArr[i94];
                    dArr[i91] = j55;
                    dArr[i93] = j56;
                    dArr[i92] = j53;
                    dArr[i94] = j54;
                    int i95 = i89 - i6;
                    int i96 = i90 + i6;
                    int i97 = i2 + i95;
                    int i98 = i2 + i96;
                    long j57 = dArr[i97];
                    int i99 = i97 + 1;
                    long j58 = dArr[i99];
                    long j59 = dArr[i98];
                    int i100 = i98 + 1;
                    long j60 = dArr[i100];
                    dArr[i97] = j59;
                    dArr[i99] = j60;
                    dArr[i98] = j57;
                    dArr[i100] = j58;
                    int i101 = i2 + (i95 - i6);
                    int i102 = i2 + (i96 - i17);
                    long j61 = dArr[i101];
                    int i103 = i101 + 1;
                    long j62 = dArr[i103];
                    long j63 = dArr[i102];
                    int i104 = i102 + 1;
                    long j64 = dArr[i104];
                    dArr[i101] = j63;
                    dArr[i103] = j64;
                    dArr[i102] = j61;
                    dArr[i104] = j62;
                }
                int i105 = i8 + (iArr[i4 + i7] * 2);
                int i106 = i105 + 2;
                int i107 = i105 + i5;
                int i108 = i2 + i106;
                int i109 = i2 + i107;
                long j65 = dArr[i108];
                int i110 = i108 + 1;
                long j66 = dArr[i110];
                long j67 = dArr[i109];
                int i111 = i109 + 1;
                long j68 = dArr[i111];
                dArr[i108] = j67;
                dArr[i110] = j68;
                dArr[i109] = j65;
                dArr[i111] = j66;
                int i112 = i106 + i6;
                int i113 = i4 * 8;
                int i114 = i107 + i113;
                int i115 = i2 + i112;
                int i116 = i2 + i114;
                long j69 = dArr[i115];
                int i117 = i115 + 1;
                long j70 = dArr[i117];
                long j71 = dArr[i116];
                int i118 = i116 + 1;
                long j72 = dArr[i118];
                dArr[i115] = j71;
                dArr[i117] = j72;
                dArr[i116] = j69;
                dArr[i118] = j70;
                int i119 = i112 + i6;
                int i120 = i114 - i6;
                int i121 = i2 + i119;
                int i122 = i2 + i120;
                long j73 = dArr[i121];
                int i123 = i121 + 1;
                long j74 = dArr[i123];
                long j75 = dArr[i122];
                int i124 = i122 + 1;
                long j76 = dArr[i124];
                dArr[i121] = j75;
                dArr[i123] = j76;
                dArr[i122] = j73;
                dArr[i124] = j74;
                int i125 = i119 - 2;
                int i126 = i120 - i5;
                int i127 = i2 + i125;
                int i128 = i2 + i126;
                long j77 = dArr[i127];
                int i129 = i127 + 1;
                long j78 = dArr[i129];
                long j79 = dArr[i128];
                int i130 = i128 + 1;
                long j80 = dArr[i130];
                dArr[i127] = j79;
                dArr[i129] = j80;
                dArr[i128] = j77;
                dArr[i130] = j78;
                int i131 = i5 + 2;
                int i132 = i125 + i131;
                int i133 = i126 + i131;
                int i134 = i2 + i132;
                int i135 = i2 + i133;
                long j81 = dArr[i134];
                int i136 = i134 + 1;
                long j82 = dArr[i136];
                long j83 = dArr[i135];
                int i137 = i135 + 1;
                long j84 = dArr[i137];
                dArr[i134] = j83;
                dArr[i136] = j84;
                dArr[i135] = j81;
                dArr[i137] = j82;
                int i138 = i2 + (i132 - (i5 - i6));
                int i139 = i2 + i133 + (i113 - 2);
                long j85 = dArr[i138];
                int i140 = i138 + 1;
                long j86 = dArr[i140];
                long j87 = dArr[i139];
                int i141 = i139 + 1;
                long j88 = dArr[i141];
                dArr[i138] = j87;
                dArr[i140] = j88;
                dArr[i139] = j85;
                dArr[i141] = j86;
            }
            return;
        }
        for (int i142 = 0; i142 < i4; i142++) {
            int i143 = i142 * 4;
            for (int i144 = 0; i144 < i142; i144++) {
                int i145 = (i144 * 4) + iArr[i4 + i142];
                int i146 = iArr[i4 + i144] + i143;
                int i147 = i2 + i145;
                int i148 = i2 + i146;
                long j89 = dArr[i147];
                int i149 = i147 + 1;
                long j90 = dArr[i149];
                long j91 = dArr[i148];
                int i150 = i148 + 1;
                long j92 = dArr[i150];
                dArr[i147] = j91;
                dArr[i149] = j92;
                dArr[i148] = j89;
                dArr[i150] = j90;
                int i151 = i145 + i6;
                int i152 = i146 + i6;
                int i153 = i2 + i151;
                int i154 = i2 + i152;
                long j93 = dArr[i153];
                int i155 = i153 + 1;
                long j94 = dArr[i155];
                long j95 = dArr[i154];
                int i156 = i154 + 1;
                long j96 = dArr[i156];
                dArr[i153] = j95;
                dArr[i155] = j96;
                dArr[i154] = j93;
                dArr[i156] = j94;
                int i157 = i151 + i5;
                int i158 = i152 + 2;
                int i159 = i2 + i157;
                int i160 = i2 + i158;
                long j97 = dArr[i159];
                int i161 = i159 + 1;
                long j98 = dArr[i161];
                long j99 = dArr[i160];
                int i162 = i160 + 1;
                long j100 = dArr[i162];
                dArr[i159] = j99;
                dArr[i161] = j100;
                dArr[i160] = j97;
                dArr[i162] = j98;
                int i163 = i157 - i6;
                int i164 = i158 - i6;
                int i165 = i2 + i163;
                int i166 = i2 + i164;
                long j101 = dArr[i165];
                int i167 = i165 + 1;
                long j102 = dArr[i167];
                long j103 = dArr[i166];
                int i168 = i166 + 1;
                long j104 = dArr[i168];
                dArr[i165] = j103;
                dArr[i167] = j104;
                dArr[i166] = j101;
                dArr[i168] = j102;
                int i169 = i163 + 2;
                int i170 = i164 + i5;
                int i171 = i2 + i169;
                int i172 = i2 + i170;
                long j105 = dArr[i171];
                int i173 = i171 + 1;
                long j106 = dArr[i173];
                long j107 = dArr[i172];
                int i174 = i172 + 1;
                long j108 = dArr[i174];
                dArr[i171] = j107;
                dArr[i173] = j108;
                dArr[i172] = j105;
                dArr[i174] = j106;
                int i175 = i169 + i6;
                int i176 = i170 + i6;
                int i177 = i2 + i175;
                int i178 = i2 + i176;
                long j109 = dArr[i177];
                int i179 = i177 + 1;
                long j110 = dArr[i179];
                long j111 = dArr[i178];
                int i180 = i178 + 1;
                long j112 = dArr[i180];
                dArr[i177] = j111;
                dArr[i179] = j112;
                dArr[i178] = j109;
                dArr[i180] = j110;
                int i181 = i175 - i5;
                int i182 = i176 - 2;
                int i183 = i2 + i181;
                int i184 = i2 + i182;
                long j113 = dArr[i183];
                int i185 = i183 + 1;
                long j114 = dArr[i185];
                long j115 = dArr[i184];
                int i186 = i184 + 1;
                long j116 = dArr[i186];
                dArr[i183] = j115;
                dArr[i185] = j116;
                dArr[i184] = j113;
                dArr[i186] = j114;
                int i187 = i2 + (i181 - i6);
                int i188 = i2 + (i182 - i6);
                long j117 = dArr[i187];
                int i189 = i187 + 1;
                long j118 = dArr[i189];
                long j119 = dArr[i188];
                int i190 = i188 + 1;
                long j120 = dArr[i190];
                dArr[i187] = j119;
                dArr[i189] = j120;
                dArr[i188] = j117;
                dArr[i190] = j118;
            }
            int i191 = i143 + iArr[i4 + i142];
            int i192 = i191 + 2;
            int i193 = i191 + i5;
            int i194 = i2 + i192;
            int i195 = i2 + i193;
            long j121 = dArr[i194];
            int i196 = i194 + 1;
            long j122 = dArr[i196];
            long j123 = dArr[i195];
            int i197 = i195 + 1;
            long j124 = dArr[i197];
            dArr[i194] = j123;
            dArr[i196] = j124;
            dArr[i195] = j121;
            dArr[i197] = j122;
            int i198 = i2 + i192 + i6;
            int i199 = i2 + i193 + i6;
            long j125 = dArr[i198];
            int i200 = i198 + 1;
            long j126 = dArr[i200];
            long j127 = dArr[i199];
            int i201 = i199 + 1;
            long j128 = dArr[i201];
            dArr[i198] = j127;
            dArr[i200] = j128;
            dArr[i199] = j125;
            dArr[i201] = j126;
        }
    }

    public static void bitrv2l(long j, LongLargeArray longLargeArray, DoubleLargeArray doubleLargeArray, long j2) {
        int i;
        LongLargeArray longLargeArray2 = longLargeArray;
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j3 = j >> 2;
        long j4 = 1;
        long j5 = 1;
        while (true) {
            i = (j3 > 8 ? 1 : (j3 == 8 ? 0 : -1));
            if (i <= 0) {
                break;
            }
            j5 <<= 1;
            j3 >>= 2;
        }
        long j6 = j >> 1;
        long j7 = 4;
        long j8 = j5 * 4;
        if (i == 0) {
            long j9 = 0;
            while (j9 < j5) {
                long j10 = j9 * j7;
                long j11 = 0;
                while (j11 < j9) {
                    long j12 = (j11 * j7) + (longLargeArray2.getLong(j5 + j9) * 2);
                    long j13 = j10 + (longLargeArray2.getLong(j5 + j11) * 2);
                    long j14 = j2 + j12;
                    long j15 = j6;
                    long j16 = j2 + j13;
                    long j17 = j13;
                    double d = doubleLargeArray2.getDouble(j14);
                    long j18 = j5;
                    long j19 = j14 + j4;
                    long j20 = j8;
                    double d2 = doubleLargeArray2.getDouble(j19);
                    double d3 = doubleLargeArray2.getDouble(j16);
                    double d4 = d;
                    long j21 = j16 + j4;
                    double d5 = doubleLargeArray2.getDouble(j21);
                    doubleLargeArray2.setDouble(j14, d3);
                    doubleLargeArray2.setDouble(j19, d5);
                    doubleLargeArray2.setDouble(j16, d4);
                    doubleLargeArray2.setDouble(j21, d2);
                    long j22 = j12 + j20;
                    long j23 = j18 * 8;
                    long j24 = j17 + j23;
                    long j25 = j2 + j22;
                    long j26 = j2 + j24;
                    double d6 = doubleLargeArray2.getDouble(j25);
                    long j27 = j23;
                    long j28 = j25 + 1;
                    long j29 = j24;
                    double d7 = doubleLargeArray2.getDouble(j28);
                    double d8 = doubleLargeArray2.getDouble(j26);
                    long j30 = j26 + 1;
                    double d9 = doubleLargeArray2.getDouble(j30);
                    doubleLargeArray2.setDouble(j25, d8);
                    doubleLargeArray2.setDouble(j28, d9);
                    doubleLargeArray2.setDouble(j26, d6);
                    doubleLargeArray2.setDouble(j30, d7);
                    long j31 = j22 + j20;
                    long j32 = j29 - j20;
                    long j33 = j2 + j31;
                    long j34 = j2 + j32;
                    double d10 = doubleLargeArray2.getDouble(j33);
                    long j35 = j33 + 1;
                    double d11 = doubleLargeArray2.getDouble(j35);
                    double d12 = doubleLargeArray2.getDouble(j34);
                    double d13 = d10;
                    long j36 = j34 + 1;
                    double d14 = doubleLargeArray2.getDouble(j36);
                    doubleLargeArray2.setDouble(j33, d12);
                    doubleLargeArray2.setDouble(j35, d14);
                    doubleLargeArray2.setDouble(j34, d13);
                    doubleLargeArray2.setDouble(j36, d11);
                    long j37 = j31 + j20;
                    long j38 = j32 + j27;
                    long j39 = j2 + j37;
                    long j40 = j2 + j38;
                    double d15 = doubleLargeArray2.getDouble(j39);
                    long j41 = j39 + 1;
                    double d16 = doubleLargeArray2.getDouble(j41);
                    double d17 = doubleLargeArray2.getDouble(j40);
                    double d18 = d15;
                    long j42 = j40 + 1;
                    double d19 = doubleLargeArray2.getDouble(j42);
                    doubleLargeArray2.setDouble(j39, d17);
                    doubleLargeArray2.setDouble(j41, d19);
                    doubleLargeArray2.setDouble(j40, d18);
                    doubleLargeArray2.setDouble(j42, d16);
                    long j43 = j37 + j15;
                    long j44 = j38 + 2;
                    long j45 = j2 + j43;
                    long j46 = j2 + j44;
                    double d20 = doubleLargeArray2.getDouble(j45);
                    long j47 = j45 + 1;
                    double d21 = doubleLargeArray2.getDouble(j47);
                    double d22 = doubleLargeArray2.getDouble(j46);
                    double d23 = d20;
                    long j48 = j46 + 1;
                    double d24 = doubleLargeArray2.getDouble(j48);
                    doubleLargeArray2.setDouble(j45, d22);
                    doubleLargeArray2.setDouble(j47, d24);
                    doubleLargeArray2.setDouble(j46, d23);
                    doubleLargeArray2.setDouble(j48, d21);
                    long j49 = j43 - j20;
                    long j50 = j44 - j27;
                    long j51 = j2 + j49;
                    long j52 = j2 + j50;
                    double d25 = doubleLargeArray2.getDouble(j51);
                    long j53 = j51 + 1;
                    double d26 = doubleLargeArray2.getDouble(j53);
                    double d27 = doubleLargeArray2.getDouble(j52);
                    double d28 = d25;
                    long j54 = j52 + 1;
                    double d29 = doubleLargeArray2.getDouble(j54);
                    doubleLargeArray2.setDouble(j51, d27);
                    doubleLargeArray2.setDouble(j53, d29);
                    doubleLargeArray2.setDouble(j52, d28);
                    doubleLargeArray2.setDouble(j54, d26);
                    long j55 = j49 - j20;
                    long j56 = j50 + j20;
                    long j57 = j2 + j55;
                    long j58 = j2 + j56;
                    double d30 = doubleLargeArray2.getDouble(j57);
                    long j59 = j57 + 1;
                    double d31 = doubleLargeArray2.getDouble(j59);
                    double d32 = doubleLargeArray2.getDouble(j58);
                    double d33 = d30;
                    long j60 = j58 + 1;
                    double d34 = doubleLargeArray2.getDouble(j60);
                    doubleLargeArray2.setDouble(j57, d32);
                    doubleLargeArray2.setDouble(j59, d34);
                    doubleLargeArray2.setDouble(j58, d33);
                    doubleLargeArray2.setDouble(j60, d31);
                    long j61 = j55 - j20;
                    long j62 = j56 - j27;
                    long j63 = j2 + j61;
                    long j64 = j2 + j62;
                    double d35 = doubleLargeArray2.getDouble(j63);
                    long j65 = j63 + 1;
                    double d36 = doubleLargeArray2.getDouble(j65);
                    double d37 = doubleLargeArray2.getDouble(j64);
                    double d38 = d35;
                    long j66 = j64 + 1;
                    double d39 = doubleLargeArray2.getDouble(j66);
                    doubleLargeArray2.setDouble(j63, d37);
                    doubleLargeArray2.setDouble(j65, d39);
                    doubleLargeArray2.setDouble(j64, d38);
                    doubleLargeArray2.setDouble(j66, d36);
                    long j67 = j61 + 2;
                    long j68 = j62 + j15;
                    long j69 = j2 + j67;
                    long j70 = j2 + j68;
                    double d40 = doubleLargeArray2.getDouble(j69);
                    long j71 = j69 + 1;
                    double d41 = doubleLargeArray2.getDouble(j71);
                    double d42 = doubleLargeArray2.getDouble(j70);
                    double d43 = d40;
                    long j72 = j70 + 1;
                    double d44 = doubleLargeArray2.getDouble(j72);
                    doubleLargeArray2.setDouble(j69, d42);
                    doubleLargeArray2.setDouble(j71, d44);
                    doubleLargeArray2.setDouble(j70, d43);
                    doubleLargeArray2.setDouble(j72, d41);
                    long j73 = j67 + j20;
                    long j74 = j68 + j27;
                    long j75 = j2 + j73;
                    long j76 = j2 + j74;
                    double d45 = doubleLargeArray2.getDouble(j75);
                    long j77 = j75 + 1;
                    double d46 = doubleLargeArray2.getDouble(j77);
                    double d47 = doubleLargeArray2.getDouble(j76);
                    double d48 = d45;
                    long j78 = j76 + 1;
                    double d49 = doubleLargeArray2.getDouble(j78);
                    doubleLargeArray2.setDouble(j75, d47);
                    doubleLargeArray2.setDouble(j77, d49);
                    doubleLargeArray2.setDouble(j76, d48);
                    doubleLargeArray2.setDouble(j78, d46);
                    long j79 = j73 + j20;
                    long j80 = j74 - j20;
                    long j81 = j2 + j79;
                    long j82 = j2 + j80;
                    double d50 = doubleLargeArray2.getDouble(j81);
                    long j83 = j81 + 1;
                    double d51 = doubleLargeArray2.getDouble(j83);
                    double d52 = doubleLargeArray2.getDouble(j82);
                    double d53 = d50;
                    long j84 = j82 + 1;
                    double d54 = doubleLargeArray2.getDouble(j84);
                    doubleLargeArray2.setDouble(j81, d52);
                    doubleLargeArray2.setDouble(j83, d54);
                    doubleLargeArray2.setDouble(j82, d53);
                    doubleLargeArray2.setDouble(j84, d51);
                    long j85 = j79 + j20;
                    long j86 = j80 + j27;
                    long j87 = j2 + j85;
                    long j88 = j2 + j86;
                    double d55 = doubleLargeArray2.getDouble(j87);
                    long j89 = j87 + 1;
                    double d56 = doubleLargeArray2.getDouble(j89);
                    double d57 = doubleLargeArray2.getDouble(j88);
                    double d58 = d55;
                    long j90 = j88 + 1;
                    double d59 = doubleLargeArray2.getDouble(j90);
                    doubleLargeArray2.setDouble(j87, d57);
                    doubleLargeArray2.setDouble(j89, d59);
                    doubleLargeArray2.setDouble(j88, d58);
                    doubleLargeArray2.setDouble(j90, d56);
                    long j91 = j85 - j15;
                    long j92 = j86 - 2;
                    long j93 = j2 + j91;
                    long j94 = j2 + j92;
                    double d60 = doubleLargeArray2.getDouble(j93);
                    long j95 = j93 + 1;
                    double d61 = doubleLargeArray2.getDouble(j95);
                    double d62 = doubleLargeArray2.getDouble(j94);
                    double d63 = d60;
                    long j96 = j94 + 1;
                    double d64 = doubleLargeArray2.getDouble(j96);
                    doubleLargeArray2.setDouble(j93, d62);
                    doubleLargeArray2.setDouble(j95, d64);
                    doubleLargeArray2.setDouble(j94, d63);
                    doubleLargeArray2.setDouble(j96, d61);
                    long j97 = j91 - j20;
                    long j98 = j92 - j27;
                    long j99 = j2 + j97;
                    long j100 = j2 + j98;
                    double d65 = doubleLargeArray2.getDouble(j99);
                    long j101 = j99 + 1;
                    double d66 = doubleLargeArray2.getDouble(j101);
                    double d67 = doubleLargeArray2.getDouble(j100);
                    double d68 = d65;
                    long j102 = j100 + 1;
                    double d69 = doubleLargeArray2.getDouble(j102);
                    doubleLargeArray2.setDouble(j99, d67);
                    doubleLargeArray2.setDouble(j101, d69);
                    doubleLargeArray2.setDouble(j100, d68);
                    doubleLargeArray2.setDouble(j102, d66);
                    long j103 = j97 - j20;
                    long j104 = j98 + j20;
                    long j105 = j2 + j103;
                    long j106 = j2 + j104;
                    double d70 = doubleLargeArray2.getDouble(j105);
                    long j107 = j105 + 1;
                    double d71 = doubleLargeArray2.getDouble(j107);
                    double d72 = doubleLargeArray2.getDouble(j106);
                    double d73 = d70;
                    long j108 = j106 + 1;
                    double d74 = doubleLargeArray2.getDouble(j108);
                    doubleLargeArray2.setDouble(j105, d72);
                    doubleLargeArray2.setDouble(j107, d74);
                    doubleLargeArray2.setDouble(j106, d73);
                    doubleLargeArray2.setDouble(j108, d71);
                    long j109 = j2 + (j103 - j20);
                    long j110 = j2 + (j104 - j27);
                    double d75 = doubleLargeArray2.getDouble(j109);
                    long j111 = j109 + 1;
                    double d76 = doubleLargeArray2.getDouble(j111);
                    double d77 = doubleLargeArray2.getDouble(j110);
                    double d78 = d76;
                    long j112 = j110 + 1;
                    double d79 = doubleLargeArray2.getDouble(j112);
                    doubleLargeArray2.setDouble(j109, d77);
                    doubleLargeArray2.setDouble(j111, d79);
                    doubleLargeArray2.setDouble(j110, d75);
                    doubleLargeArray2.setDouble(j112, d78);
                    j11++;
                    j4 = 1;
                    j6 = j15;
                    j5 = j18;
                    j8 = j20;
                    j7 = 4;
                }
                long j113 = j6;
                long j114 = j4;
                long j115 = j5;
                long j116 = j8;
                long j117 = j10 + (longLargeArray2.getLong(j115 + j9) * 2);
                long j118 = j117 + 2;
                long j119 = j117 + j113;
                long j120 = j2 + j118;
                long j121 = j2 + j119;
                double d80 = doubleLargeArray2.getDouble(j120);
                long j122 = j120 + j114;
                double d81 = doubleLargeArray2.getDouble(j122);
                long j123 = j118;
                double d82 = doubleLargeArray2.getDouble(j121);
                double d83 = d81;
                long j124 = j121 + j114;
                double d84 = doubleLargeArray2.getDouble(j124);
                doubleLargeArray2.setDouble(j120, d82);
                doubleLargeArray2.setDouble(j122, d84);
                doubleLargeArray2.setDouble(j121, d80);
                doubleLargeArray2.setDouble(j124, d83);
                long j125 = j123 + j116;
                long j126 = j115 * 8;
                long j127 = j119 + j126;
                long j128 = j2 + j125;
                long j129 = j2 + j127;
                double d85 = doubleLargeArray2.getDouble(j128);
                long j130 = j128 + 1;
                double d86 = doubleLargeArray2.getDouble(j130);
                long j131 = j125;
                double d87 = doubleLargeArray2.getDouble(j129);
                double d88 = d86;
                long j132 = j129 + 1;
                long j133 = j129;
                double d89 = doubleLargeArray2.getDouble(j132);
                doubleLargeArray2.setDouble(j128, d87);
                doubleLargeArray2.setDouble(j130, d89);
                doubleLargeArray2.setDouble(j133, d85);
                doubleLargeArray2.setDouble(j132, d88);
                long j134 = j131 + j116;
                long j135 = j127 - j116;
                long j136 = j2 + j134;
                long j137 = j2 + j135;
                double d90 = doubleLargeArray2.getDouble(j136);
                long j138 = j136 + 1;
                double d91 = doubleLargeArray2.getDouble(j138);
                double d92 = doubleLargeArray2.getDouble(j137);
                long j139 = j134;
                long j140 = j137 + 1;
                double d93 = d91;
                double d94 = doubleLargeArray2.getDouble(j140);
                doubleLargeArray2.setDouble(j136, d92);
                doubleLargeArray2.setDouble(j138, d94);
                doubleLargeArray2.setDouble(j137, d90);
                doubleLargeArray2.setDouble(j140, d93);
                long j141 = j139 - 2;
                long j142 = j135 - j113;
                long j143 = j2 + j141;
                long j144 = j2 + j142;
                double d95 = doubleLargeArray2.getDouble(j143);
                long j145 = j143 + 1;
                double d96 = doubleLargeArray2.getDouble(j145);
                double d97 = doubleLargeArray2.getDouble(j144);
                long j146 = j141;
                long j147 = j144 + 1;
                double d98 = d96;
                double d99 = doubleLargeArray2.getDouble(j147);
                doubleLargeArray2.setDouble(j143, d97);
                doubleLargeArray2.setDouble(j145, d99);
                doubleLargeArray2.setDouble(j144, d95);
                doubleLargeArray2.setDouble(j147, d98);
                long j148 = j113 + 2;
                long j149 = j146 + j148;
                long j150 = j142 + j148;
                long j151 = j2 + j149;
                long j152 = j2 + j150;
                double d100 = doubleLargeArray2.getDouble(j151);
                long j153 = j151 + 1;
                double d101 = doubleLargeArray2.getDouble(j153);
                long j154 = j149;
                double d102 = doubleLargeArray2.getDouble(j152);
                double d103 = d101;
                long j155 = j152 + 1;
                double d104 = doubleLargeArray2.getDouble(j155);
                doubleLargeArray2.setDouble(j151, d102);
                doubleLargeArray2.setDouble(j153, d104);
                doubleLargeArray2.setDouble(j152, d100);
                doubleLargeArray2.setDouble(j155, d103);
                long j156 = j2 + (j154 - (j113 - j116));
                long j157 = j2 + j150 + (j126 - 2);
                double d105 = doubleLargeArray2.getDouble(j156);
                long j158 = j156 + 1;
                double d106 = doubleLargeArray2.getDouble(j158);
                double d107 = doubleLargeArray2.getDouble(j157);
                double d108 = d106;
                long j159 = j157 + 1;
                double d109 = doubleLargeArray2.getDouble(j159);
                doubleLargeArray2.setDouble(j156, d107);
                doubleLargeArray2.setDouble(j158, d109);
                doubleLargeArray2.setDouble(j157, d105);
                doubleLargeArray2.setDouble(j159, d108);
                j9++;
                j4 = 1;
                j6 = j113;
                j5 = j115;
                j8 = j116;
                j7 = 4;
            }
            return;
        }
        long j160 = j6;
        long j161 = j5;
        long j162 = j8;
        long j163 = 0;
        while (j163 < j161) {
            long j164 = 4;
            long j165 = j163 * 4;
            long j166 = 0;
            while (j166 < j163) {
                long j167 = (j166 * j164) + longLargeArray2.getLong(j161 + j163);
                long j168 = longLargeArray2.getLong(j161 + j166) + j165;
                long j169 = j2 + j167;
                long j170 = j2 + j168;
                long j171 = j165;
                double d110 = doubleLargeArray2.getDouble(j169);
                long j172 = j163;
                long j173 = j169 + 1;
                long j174 = j166;
                double d111 = doubleLargeArray2.getDouble(j173);
                long j175 = j168;
                double d112 = doubleLargeArray2.getDouble(j170);
                long j176 = j167;
                long j177 = j170 + 1;
                double d113 = d111;
                double d114 = doubleLargeArray2.getDouble(j177);
                doubleLargeArray2.setDouble(j169, d112);
                doubleLargeArray2.setDouble(j173, d114);
                doubleLargeArray2.setDouble(j170, d110);
                doubleLargeArray2.setDouble(j177, d113);
                long j178 = j176 + j162;
                long j179 = j175 + j162;
                long j180 = j2 + j178;
                long j181 = j2 + j179;
                double d115 = doubleLargeArray2.getDouble(j180);
                long j182 = j180 + 1;
                double d116 = doubleLargeArray2.getDouble(j182);
                long j183 = j179;
                double d117 = doubleLargeArray2.getDouble(j181);
                long j184 = j178;
                long j185 = j181 + 1;
                double d118 = d116;
                double d119 = doubleLargeArray2.getDouble(j185);
                doubleLargeArray2.setDouble(j180, d117);
                doubleLargeArray2.setDouble(j182, d119);
                doubleLargeArray2.setDouble(j181, d115);
                doubleLargeArray2.setDouble(j185, d118);
                long j186 = j184 + j160;
                long j187 = j183 + 2;
                long j188 = j2 + j186;
                long j189 = j2 + j187;
                double d120 = doubleLargeArray2.getDouble(j188);
                long j190 = j188 + 1;
                double d121 = doubleLargeArray2.getDouble(j190);
                long j191 = j187;
                double d122 = doubleLargeArray2.getDouble(j189);
                long j192 = j186;
                long j193 = j189 + 1;
                double d123 = d121;
                double d124 = doubleLargeArray2.getDouble(j193);
                doubleLargeArray2.setDouble(j188, d122);
                doubleLargeArray2.setDouble(j190, d124);
                doubleLargeArray2.setDouble(j189, d120);
                doubleLargeArray2.setDouble(j193, d123);
                long j194 = j192 - j162;
                long j195 = j191 - j162;
                long j196 = j2 + j194;
                long j197 = j2 + j195;
                double d125 = doubleLargeArray2.getDouble(j196);
                long j198 = j196 + 1;
                double d126 = doubleLargeArray2.getDouble(j198);
                long j199 = j195;
                double d127 = doubleLargeArray2.getDouble(j197);
                long j200 = j194;
                long j201 = j197 + 1;
                double d128 = d126;
                double d129 = doubleLargeArray2.getDouble(j201);
                doubleLargeArray2.setDouble(j196, d127);
                doubleLargeArray2.setDouble(j198, d129);
                doubleLargeArray2.setDouble(j197, d125);
                doubleLargeArray2.setDouble(j201, d128);
                long j202 = j200 + 2;
                long j203 = j199 + j160;
                long j204 = j2 + j202;
                long j205 = j2 + j203;
                double d130 = doubleLargeArray2.getDouble(j204);
                long j206 = j204 + 1;
                double d131 = doubleLargeArray2.getDouble(j206);
                long j207 = j203;
                double d132 = doubleLargeArray2.getDouble(j205);
                long j208 = j202;
                long j209 = j205 + 1;
                double d133 = d131;
                double d134 = doubleLargeArray2.getDouble(j209);
                doubleLargeArray2.setDouble(j204, d132);
                doubleLargeArray2.setDouble(j206, d134);
                doubleLargeArray2.setDouble(j205, d130);
                doubleLargeArray2.setDouble(j209, d133);
                long j210 = j208 + j162;
                long j211 = j207 + j162;
                long j212 = j2 + j210;
                long j213 = j2 + j211;
                double d135 = doubleLargeArray2.getDouble(j212);
                long j214 = j212 + 1;
                double d136 = doubleLargeArray2.getDouble(j214);
                long j215 = j211;
                double d137 = doubleLargeArray2.getDouble(j213);
                long j216 = j210;
                long j217 = j213 + 1;
                double d138 = d136;
                double d139 = doubleLargeArray2.getDouble(j217);
                doubleLargeArray2.setDouble(j212, d137);
                doubleLargeArray2.setDouble(j214, d139);
                doubleLargeArray2.setDouble(j213, d135);
                doubleLargeArray2.setDouble(j217, d138);
                long j218 = j216 - j160;
                long j219 = j215 - 2;
                long j220 = j2 + j218;
                long j221 = j2 + j219;
                double d140 = doubleLargeArray2.getDouble(j220);
                long j222 = j220 + 1;
                double d141 = doubleLargeArray2.getDouble(j222);
                long j223 = j219;
                double d142 = doubleLargeArray2.getDouble(j221);
                long j224 = j218;
                long j225 = j221 + 1;
                double d143 = d141;
                double d144 = doubleLargeArray2.getDouble(j225);
                doubleLargeArray2.setDouble(j220, d142);
                doubleLargeArray2.setDouble(j222, d144);
                doubleLargeArray2.setDouble(j221, d140);
                doubleLargeArray2.setDouble(j225, d143);
                long j226 = j2 + (j224 - j162);
                long j227 = j2 + (j223 - j162);
                double d145 = doubleLargeArray2.getDouble(j226);
                long j228 = j226 + 1;
                double d146 = doubleLargeArray2.getDouble(j228);
                double d147 = doubleLargeArray2.getDouble(j227);
                long j229 = j227 + 1;
                double d148 = d146;
                double d149 = doubleLargeArray2.getDouble(j229);
                doubleLargeArray2.setDouble(j226, d147);
                doubleLargeArray2.setDouble(j228, d149);
                doubleLargeArray2.setDouble(j227, d145);
                doubleLargeArray2.setDouble(j229, d148);
                j166 = j174 + 1;
                j165 = j171;
                j163 = j172;
                j164 = 4;
            }
            long j230 = j163;
            long j231 = j165 + longLargeArray2.getLong(j161 + j230);
            long j232 = j231 + 2;
            long j233 = j231 + j160;
            long j234 = j2 + j232;
            long j235 = j2 + j233;
            double d150 = doubleLargeArray2.getDouble(j234);
            long j236 = j234 + 1;
            double d151 = doubleLargeArray2.getDouble(j236);
            long j237 = j233;
            double d152 = doubleLargeArray2.getDouble(j235);
            long j238 = j232;
            long j239 = j235 + 1;
            double d153 = d151;
            double d154 = doubleLargeArray2.getDouble(j239);
            doubleLargeArray2.setDouble(j234, d152);
            doubleLargeArray2.setDouble(j236, d154);
            doubleLargeArray2.setDouble(j235, d150);
            doubleLargeArray2.setDouble(j239, d153);
            long j240 = j2 + j238 + j162;
            long j241 = j2 + j237 + j162;
            double d155 = doubleLargeArray2.getDouble(j240);
            long j242 = j240 + 1;
            double d156 = doubleLargeArray2.getDouble(j242);
            double d157 = doubleLargeArray2.getDouble(j241);
            long j243 = j241 + 1;
            double d158 = d156;
            double d159 = doubleLargeArray2.getDouble(j243);
            doubleLargeArray2.setDouble(j240, d157);
            doubleLargeArray2.setDouble(j242, d159);
            doubleLargeArray2.setDouble(j241, d155);
            doubleLargeArray2.setDouble(j243, d158);
            j163 = j230 + 1;
        }
    }

    public static void bitrv2conj(int i, int[] iArr, double[] dArr, int i2) {
        int i3 = i >> 2;
        int i4 = 1;
        while (i3 > 8) {
            i4 <<= 1;
            i3 >>= 2;
        }
        int i5 = i >> 1;
        int i6 = i4 * 4;
        if (i3 == 8) {
            int i7 = 0;
            while (i7 < i4) {
                int i8 = i7 * 4;
                int i9 = 0;
                while (i9 < i7) {
                    int i10 = (i9 * 4) + (iArr[i4 + i7] * 2);
                    int i11 = (iArr[i4 + i9] * 2) + i8;
                    int i12 = i2 + i10;
                    int i13 = i2 + i11;
                    double d = dArr[i12];
                    int i14 = i12 + 1;
                    int i15 = i13 + 1;
                    int i16 = i9;
                    dArr[i12] = dArr[i13];
                    dArr[i14] = -dArr[i15];
                    dArr[i13] = d;
                    dArr[i15] = -dArr[i14];
                    int i17 = i10 + i6;
                    int i18 = i4 * 8;
                    int i19 = i11 + i18;
                    int i20 = i2 + i17;
                    int i21 = i2 + i19;
                    double d2 = dArr[i20];
                    int i22 = i20 + 1;
                    int i23 = i21 + 1;
                    int i24 = i4;
                    int i25 = i8;
                    dArr[i20] = dArr[i21];
                    dArr[i22] = -dArr[i23];
                    dArr[i21] = d2;
                    dArr[i23] = -dArr[i22];
                    int i26 = i17 + i6;
                    int i27 = i19 - i6;
                    int i28 = i2 + i26;
                    int i29 = i2 + i27;
                    double d3 = dArr[i28];
                    int i30 = i28 + 1;
                    int i31 = i29 + 1;
                    int i32 = i7;
                    int i33 = i5;
                    dArr[i28] = dArr[i29];
                    dArr[i30] = -dArr[i31];
                    dArr[i29] = d3;
                    dArr[i31] = -dArr[i30];
                    int i34 = i26 + i6;
                    int i35 = i27 + i18;
                    int i36 = i2 + i34;
                    int i37 = i2 + i35;
                    double d4 = dArr[i36];
                    int i38 = i36 + 1;
                    int i39 = i37 + 1;
                    dArr[i36] = dArr[i37];
                    dArr[i38] = -dArr[i39];
                    dArr[i37] = d4;
                    dArr[i39] = -dArr[i38];
                    int i40 = i34 + i33;
                    int i41 = i35 + 2;
                    int i42 = i2 + i40;
                    int i43 = i2 + i41;
                    double d5 = dArr[i42];
                    int i44 = i42 + 1;
                    int i45 = i43 + 1;
                    dArr[i42] = dArr[i43];
                    dArr[i44] = -dArr[i45];
                    dArr[i43] = d5;
                    dArr[i45] = -dArr[i44];
                    int i46 = i40 - i6;
                    int i47 = i41 - i18;
                    int i48 = i2 + i46;
                    int i49 = i2 + i47;
                    double d6 = dArr[i48];
                    int i50 = i48 + 1;
                    int i51 = i49 + 1;
                    dArr[i48] = dArr[i49];
                    dArr[i50] = -dArr[i51];
                    dArr[i49] = d6;
                    dArr[i51] = -dArr[i50];
                    int i52 = i46 - i6;
                    int i53 = i47 + i6;
                    int i54 = i2 + i52;
                    int i55 = i2 + i53;
                    long j = dArr[i54];
                    int i56 = i54 + 1;
                    int i57 = i55 + 1;
                    dArr[i54] = dArr[i55];
                    dArr[i56] = -dArr[i57];
                    dArr[i55] = j;
                    dArr[i57] = -dArr[i56];
                    int i58 = i52 - i6;
                    int i59 = i53 - i18;
                    int i60 = i2 + i58;
                    int i61 = i2 + i59;
                    long j2 = dArr[i60];
                    int i62 = i60 + 1;
                    int i63 = i61 + 1;
                    dArr[i60] = dArr[i61];
                    dArr[i62] = -dArr[i63];
                    dArr[i61] = j2;
                    dArr[i63] = -dArr[i62];
                    int i64 = i58 + 2;
                    int i65 = i59 + i33;
                    int i66 = i2 + i64;
                    int i67 = i2 + i65;
                    long j3 = dArr[i66];
                    int i68 = i66 + 1;
                    int i69 = i67 + 1;
                    dArr[i66] = dArr[i67];
                    dArr[i68] = -dArr[i69];
                    dArr[i67] = j3;
                    dArr[i69] = -dArr[i68];
                    int i70 = i64 + i6;
                    int i71 = i65 + i18;
                    int i72 = i2 + i70;
                    int i73 = i2 + i71;
                    long j4 = dArr[i72];
                    int i74 = i72 + 1;
                    int i75 = i73 + 1;
                    dArr[i72] = dArr[i73];
                    dArr[i74] = -dArr[i75];
                    dArr[i73] = j4;
                    dArr[i75] = -dArr[i74];
                    int i76 = i70 + i6;
                    int i77 = i71 - i6;
                    int i78 = i2 + i76;
                    int i79 = i2 + i77;
                    long j5 = dArr[i78];
                    int i80 = i78 + 1;
                    int i81 = i79 + 1;
                    dArr[i78] = dArr[i79];
                    dArr[i80] = -dArr[i81];
                    dArr[i79] = j5;
                    dArr[i81] = -dArr[i80];
                    int i82 = i76 + i6;
                    int i83 = i77 + i18;
                    int i84 = i2 + i82;
                    int i85 = i2 + i83;
                    long j6 = dArr[i84];
                    int i86 = i84 + 1;
                    int i87 = i85 + 1;
                    dArr[i84] = dArr[i85];
                    dArr[i86] = -dArr[i87];
                    dArr[i85] = j6;
                    dArr[i87] = -dArr[i86];
                    int i88 = i82 - i33;
                    int i89 = i83 - 2;
                    int i90 = i2 + i88;
                    int i91 = i2 + i89;
                    long j7 = dArr[i90];
                    int i92 = i90 + 1;
                    int i93 = i91 + 1;
                    dArr[i90] = dArr[i91];
                    dArr[i92] = -dArr[i93];
                    dArr[i91] = j7;
                    dArr[i93] = -dArr[i92];
                    int i94 = i88 - i6;
                    int i95 = i89 - i18;
                    int i96 = i2 + i94;
                    int i97 = i2 + i95;
                    long j8 = dArr[i96];
                    int i98 = i96 + 1;
                    int i99 = i97 + 1;
                    dArr[i96] = dArr[i97];
                    dArr[i98] = -dArr[i99];
                    dArr[i97] = j8;
                    dArr[i99] = -dArr[i98];
                    int i100 = i94 - i6;
                    int i101 = i95 + i6;
                    int i102 = i2 + i100;
                    int i103 = i2 + i101;
                    long j9 = dArr[i102];
                    int i104 = i102 + 1;
                    int i105 = i103 + 1;
                    dArr[i102] = dArr[i103];
                    dArr[i104] = -dArr[i105];
                    dArr[i103] = j9;
                    dArr[i105] = -dArr[i104];
                    int i106 = i2 + (i100 - i6);
                    int i107 = i2 + (i101 - i18);
                    long j10 = dArr[i106];
                    int i108 = i106 + 1;
                    int i109 = i107 + 1;
                    dArr[i106] = dArr[i107];
                    dArr[i108] = -dArr[i109];
                    dArr[i107] = j10;
                    dArr[i109] = -dArr[i108];
                    i9 = i16 + 1;
                    i5 = i33;
                    i7 = i32;
                    i4 = i24;
                    i8 = i25;
                }
                int i110 = i7;
                int i111 = i5;
                int i112 = i4;
                int i113 = i8 + (iArr[i112 + i110] * 2);
                int i114 = i113 + 2;
                int i115 = i113 + i111;
                int i116 = i2 + i114;
                int i117 = i2 + i115;
                int i118 = i116 - 1;
                dArr[i118] = -dArr[i118];
                double d7 = dArr[i116];
                int i119 = i116 + 1;
                int i120 = i117 + 1;
                dArr[i116] = dArr[i117];
                dArr[i119] = -dArr[i120];
                dArr[i117] = d7;
                dArr[i120] = -dArr[i119];
                int i121 = i117 + 3;
                dArr[i121] = -dArr[i121];
                int i122 = i114 + i6;
                int i123 = i112 * 8;
                int i124 = i115 + i123;
                int i125 = i2 + i122;
                int i126 = i2 + i124;
                double d8 = dArr[i125];
                int i127 = i125 + 1;
                int i128 = i126 + 1;
                dArr[i125] = dArr[i126];
                dArr[i127] = -dArr[i128];
                dArr[i126] = d8;
                dArr[i128] = -dArr[i127];
                int i129 = i122 + i6;
                int i130 = i124 - i6;
                int i131 = i2 + i129;
                int i132 = i2 + i130;
                double d9 = dArr[i131];
                int i133 = i131 + 1;
                int i134 = i132 + 1;
                dArr[i131] = dArr[i132];
                dArr[i133] = -dArr[i134];
                dArr[i132] = d9;
                dArr[i134] = -dArr[i133];
                int i135 = i129 - 2;
                int i136 = i130 - i111;
                int i137 = i2 + i135;
                int i138 = i2 + i136;
                double d10 = dArr[i137];
                int i139 = i137 + 1;
                int i140 = i138 + 1;
                dArr[i137] = dArr[i138];
                dArr[i139] = -dArr[i140];
                dArr[i138] = d10;
                dArr[i140] = -dArr[i139];
                int i141 = i111 + 2;
                int i142 = i135 + i141;
                int i143 = i136 + i141;
                int i144 = i2 + i142;
                int i145 = i2 + i143;
                double d11 = dArr[i144];
                int i146 = i144 + 1;
                int i147 = i145 + 1;
                dArr[i144] = dArr[i145];
                dArr[i146] = -dArr[i147];
                dArr[i145] = d11;
                dArr[i147] = -dArr[i146];
                int i148 = i2 + (i142 - (i111 - i6));
                int i149 = i2 + i143 + (i123 - 2);
                int i150 = i148 - 1;
                dArr[i150] = -dArr[i150];
                double d12 = dArr[i148];
                int i151 = i148 + 1;
                int i152 = i149 + 1;
                dArr[i148] = dArr[i149];
                dArr[i151] = -dArr[i152];
                dArr[i149] = d12;
                dArr[i152] = -dArr[i151];
                int i153 = i149 + 3;
                dArr[i153] = -dArr[i153];
                i7 = i110 + 1;
                i5 = i111;
                i4 = i112;
            }
            return;
        }
        int i154 = i5;
        int i155 = i4;
        int i156 = 0;
        while (i156 < i155) {
            int i157 = i156 * 4;
            int i158 = 0;
            while (i158 < i156) {
                int i159 = (i158 * 4) + iArr[i155 + i156];
                int i160 = iArr[i155 + i158] + i157;
                int i161 = i2 + i159;
                int i162 = i2 + i160;
                double d13 = dArr[i161];
                int i163 = i161 + 1;
                int i164 = i162 + 1;
                int i165 = i156;
                int i166 = i155;
                dArr[i161] = dArr[i162];
                dArr[i163] = -dArr[i164];
                dArr[i162] = d13;
                dArr[i164] = -dArr[i163];
                int i167 = i159 + i6;
                int i168 = i160 + i6;
                int i169 = i2 + i167;
                int i170 = i2 + i168;
                double d14 = dArr[i169];
                int i171 = i169 + 1;
                int i172 = i170 + 1;
                int i173 = i157;
                dArr[i169] = dArr[i170];
                dArr[i171] = -dArr[i172];
                dArr[i170] = d14;
                dArr[i172] = -dArr[i171];
                int i174 = i167 + i154;
                int i175 = i168 + 2;
                int i176 = i2 + i174;
                int i177 = i2 + i175;
                double d15 = dArr[i176];
                int i178 = i176 + 1;
                int i179 = i177 + 1;
                dArr[i176] = dArr[i177];
                dArr[i178] = -dArr[i179];
                dArr[i177] = d15;
                dArr[i179] = -dArr[i178];
                int i180 = i174 - i6;
                int i181 = i175 - i6;
                int i182 = i2 + i180;
                int i183 = i2 + i181;
                double d16 = dArr[i182];
                int i184 = i182 + 1;
                int i185 = i183 + 1;
                dArr[i182] = dArr[i183];
                dArr[i184] = -dArr[i185];
                dArr[i183] = d16;
                dArr[i185] = -dArr[i184];
                int i186 = i180 + 2;
                int i187 = i181 + i154;
                int i188 = i2 + i186;
                int i189 = i2 + i187;
                double d17 = dArr[i188];
                int i190 = i188 + 1;
                int i191 = i189 + 1;
                dArr[i188] = dArr[i189];
                dArr[i190] = -dArr[i191];
                dArr[i189] = d17;
                dArr[i191] = -dArr[i190];
                int i192 = i186 + i6;
                int i193 = i187 + i6;
                int i194 = i2 + i192;
                int i195 = i2 + i193;
                double d18 = dArr[i194];
                int i196 = i194 + 1;
                int i197 = i195 + 1;
                dArr[i194] = dArr[i195];
                dArr[i196] = -dArr[i197];
                dArr[i195] = d18;
                dArr[i197] = -dArr[i196];
                int i198 = i192 - i154;
                int i199 = i193 - 2;
                int i200 = i2 + i198;
                int i201 = i2 + i199;
                double d19 = dArr[i200];
                int i202 = i200 + 1;
                int i203 = i201 + 1;
                dArr[i200] = dArr[i201];
                dArr[i202] = -dArr[i203];
                dArr[i201] = d19;
                dArr[i203] = -dArr[i202];
                int i204 = i2 + (i198 - i6);
                int i205 = i2 + (i199 - i6);
                double d20 = dArr[i204];
                int i206 = i204 + 1;
                int i207 = i205 + 1;
                dArr[i204] = dArr[i205];
                dArr[i206] = -dArr[i207];
                dArr[i205] = d20;
                dArr[i207] = -dArr[i206];
                i158++;
                i157 = i173;
                i155 = i166;
                i156 = i165;
            }
            int i208 = i156;
            int i209 = i155;
            int i210 = i157 + iArr[i209 + i208];
            int i211 = i210 + 2;
            int i212 = i210 + i154;
            int i213 = i2 + i211;
            int i214 = i2 + i212;
            int i215 = i213 - 1;
            dArr[i215] = -dArr[i215];
            double d21 = dArr[i213];
            int i216 = i213 + 1;
            int i217 = i214 + 1;
            dArr[i213] = dArr[i214];
            dArr[i216] = -dArr[i217];
            dArr[i214] = d21;
            dArr[i217] = -dArr[i216];
            int i218 = i214 + 3;
            dArr[i218] = -dArr[i218];
            int i219 = i2 + i211 + i6;
            int i220 = i2 + i212 + i6;
            int i221 = i219 - 1;
            dArr[i221] = -dArr[i221];
            double d22 = dArr[i219];
            int i222 = i219 + 1;
            int i223 = i220 + 1;
            dArr[i219] = dArr[i220];
            dArr[i222] = -dArr[i223];
            dArr[i220] = d22;
            dArr[i223] = -dArr[i222];
            int i224 = i220 + 3;
            dArr[i224] = -dArr[i224];
            i156 = i208 + 1;
            i155 = i209;
        }
    }

    public static void bitrv2conj(long j, LongLargeArray longLargeArray, DoubleLargeArray doubleLargeArray, long j2) {
        int i;
        LongLargeArray longLargeArray2 = longLargeArray;
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j3 = j >> 2;
        long j4 = 1;
        long j5 = 1;
        while (true) {
            i = (j3 > 8 ? 1 : (j3 == 8 ? 0 : -1));
            if (i <= 0) {
                break;
            }
            j5 <<= 1;
            j3 >>= 2;
        }
        long j6 = j >> 1;
        long j7 = 4;
        long j8 = j5 * 4;
        if (i == 0) {
            long j9 = 0;
            while (j9 < j5) {
                long j10 = j9 * j7;
                long j11 = 0;
                while (j11 < j9) {
                    long j12 = (j11 * j7) + (longLargeArray2.getLong(j5 + j9) * 2);
                    long j13 = j10 + (longLargeArray2.getLong(j5 + j11) * 2);
                    long j14 = j2 + j12;
                    long j15 = j6;
                    long j16 = j2 + j13;
                    long j17 = j13;
                    double d = doubleLargeArray2.getDouble(j14);
                    long j18 = j5;
                    long j19 = j14 + j4;
                    long j20 = j8;
                    double d2 = doubleLargeArray2.getDouble(j16);
                    double d3 = -doubleLargeArray2.getDouble(j19);
                    long j21 = j16 + 1;
                    doubleLargeArray2.setDouble(j14, d2);
                    doubleLargeArray2.setDouble(j19, -doubleLargeArray2.getDouble(j21));
                    doubleLargeArray2.setDouble(j16, d);
                    doubleLargeArray2.setDouble(j21, d3);
                    long j22 = j12 + j20;
                    long j23 = j18 * 8;
                    long j24 = j17 + j23;
                    long j25 = j2 + j22;
                    long j26 = j2 + j24;
                    double d4 = doubleLargeArray2.getDouble(j25);
                    long j27 = j23;
                    long j28 = j25 + 1;
                    long j29 = j24;
                    double d5 = doubleLargeArray2.getDouble(j26);
                    double d6 = -doubleLargeArray2.getDouble(j28);
                    long j30 = j26 + 1;
                    doubleLargeArray2.setDouble(j25, d5);
                    doubleLargeArray2.setDouble(j28, -doubleLargeArray2.getDouble(j30));
                    doubleLargeArray2.setDouble(j26, d4);
                    doubleLargeArray2.setDouble(j30, d6);
                    long j31 = j22 + j20;
                    long j32 = j29 - j20;
                    long j33 = j2 + j31;
                    long j34 = j2 + j32;
                    double d7 = doubleLargeArray2.getDouble(j33);
                    long j35 = j33 + 1;
                    double d8 = doubleLargeArray2.getDouble(j34);
                    double d9 = -doubleLargeArray2.getDouble(j35);
                    long j36 = j34 + 1;
                    doubleLargeArray2.setDouble(j33, d8);
                    doubleLargeArray2.setDouble(j35, -doubleLargeArray2.getDouble(j36));
                    doubleLargeArray2.setDouble(j34, d7);
                    doubleLargeArray2.setDouble(j36, d9);
                    long j37 = j31 + j20;
                    long j38 = j32 + j27;
                    long j39 = j2 + j37;
                    long j40 = j2 + j38;
                    double d10 = doubleLargeArray2.getDouble(j39);
                    long j41 = j39 + 1;
                    double d11 = doubleLargeArray2.getDouble(j40);
                    double d12 = -doubleLargeArray2.getDouble(j41);
                    long j42 = j40 + 1;
                    doubleLargeArray2.setDouble(j39, d11);
                    doubleLargeArray2.setDouble(j41, -doubleLargeArray2.getDouble(j42));
                    doubleLargeArray2.setDouble(j40, d10);
                    doubleLargeArray2.setDouble(j42, d12);
                    long j43 = j37 + j15;
                    long j44 = j38 + 2;
                    long j45 = j2 + j43;
                    long j46 = j2 + j44;
                    double d13 = doubleLargeArray2.getDouble(j45);
                    long j47 = j45 + 1;
                    double d14 = doubleLargeArray2.getDouble(j46);
                    double d15 = -doubleLargeArray2.getDouble(j47);
                    long j48 = j46 + 1;
                    doubleLargeArray2.setDouble(j45, d14);
                    doubleLargeArray2.setDouble(j47, -doubleLargeArray2.getDouble(j48));
                    doubleLargeArray2.setDouble(j46, d13);
                    doubleLargeArray2.setDouble(j48, d15);
                    long j49 = j43 - j20;
                    long j50 = j44 - j27;
                    long j51 = j2 + j49;
                    long j52 = j2 + j50;
                    double d16 = doubleLargeArray2.getDouble(j51);
                    long j53 = j51 + 1;
                    double d17 = doubleLargeArray2.getDouble(j52);
                    double d18 = -doubleLargeArray2.getDouble(j53);
                    long j54 = j52 + 1;
                    doubleLargeArray2.setDouble(j51, d17);
                    doubleLargeArray2.setDouble(j53, -doubleLargeArray2.getDouble(j54));
                    doubleLargeArray2.setDouble(j52, d16);
                    doubleLargeArray2.setDouble(j54, d18);
                    long j55 = j49 - j20;
                    long j56 = j50 + j20;
                    long j57 = j2 + j55;
                    long j58 = j2 + j56;
                    double d19 = doubleLargeArray2.getDouble(j57);
                    long j59 = j57 + 1;
                    double d20 = doubleLargeArray2.getDouble(j58);
                    double d21 = -doubleLargeArray2.getDouble(j59);
                    long j60 = j58 + 1;
                    doubleLargeArray2.setDouble(j57, d20);
                    doubleLargeArray2.setDouble(j59, -doubleLargeArray2.getDouble(j60));
                    doubleLargeArray2.setDouble(j58, d19);
                    doubleLargeArray2.setDouble(j60, d21);
                    long j61 = j55 - j20;
                    long j62 = j56 - j27;
                    long j63 = j2 + j61;
                    long j64 = j2 + j62;
                    double d22 = doubleLargeArray2.getDouble(j63);
                    long j65 = j63 + 1;
                    double d23 = doubleLargeArray2.getDouble(j64);
                    double d24 = -doubleLargeArray2.getDouble(j65);
                    long j66 = j64 + 1;
                    doubleLargeArray2.setDouble(j63, d23);
                    doubleLargeArray2.setDouble(j65, -doubleLargeArray2.getDouble(j66));
                    doubleLargeArray2.setDouble(j64, d22);
                    doubleLargeArray2.setDouble(j66, d24);
                    long j67 = j61 + 2;
                    long j68 = j62 + j15;
                    long j69 = j2 + j67;
                    long j70 = j2 + j68;
                    double d25 = doubleLargeArray2.getDouble(j69);
                    long j71 = j69 + 1;
                    double d26 = doubleLargeArray2.getDouble(j70);
                    double d27 = -doubleLargeArray2.getDouble(j71);
                    long j72 = j70 + 1;
                    doubleLargeArray2.setDouble(j69, d26);
                    doubleLargeArray2.setDouble(j71, -doubleLargeArray2.getDouble(j72));
                    doubleLargeArray2.setDouble(j70, d25);
                    doubleLargeArray2.setDouble(j72, d27);
                    long j73 = j67 + j20;
                    long j74 = j68 + j27;
                    long j75 = j2 + j73;
                    long j76 = j2 + j74;
                    double d28 = doubleLargeArray2.getDouble(j75);
                    long j77 = j75 + 1;
                    double d29 = doubleLargeArray2.getDouble(j76);
                    double d30 = -doubleLargeArray2.getDouble(j77);
                    long j78 = j76 + 1;
                    doubleLargeArray2.setDouble(j75, d29);
                    doubleLargeArray2.setDouble(j77, -doubleLargeArray2.getDouble(j78));
                    doubleLargeArray2.setDouble(j76, d28);
                    doubleLargeArray2.setDouble(j78, d30);
                    long j79 = j73 + j20;
                    long j80 = j74 - j20;
                    long j81 = j2 + j79;
                    long j82 = j2 + j80;
                    double d31 = doubleLargeArray2.getDouble(j81);
                    long j83 = j81 + 1;
                    double d32 = doubleLargeArray2.getDouble(j82);
                    double d33 = -doubleLargeArray2.getDouble(j83);
                    long j84 = j82 + 1;
                    doubleLargeArray2.setDouble(j81, d32);
                    doubleLargeArray2.setDouble(j83, -doubleLargeArray2.getDouble(j84));
                    doubleLargeArray2.setDouble(j82, d31);
                    doubleLargeArray2.setDouble(j84, d33);
                    long j85 = j79 + j20;
                    long j86 = j80 + j27;
                    long j87 = j2 + j85;
                    long j88 = j2 + j86;
                    double d34 = doubleLargeArray2.getDouble(j87);
                    long j89 = j87 + 1;
                    double d35 = doubleLargeArray2.getDouble(j88);
                    double d36 = -doubleLargeArray2.getDouble(j89);
                    long j90 = j88 + 1;
                    doubleLargeArray2.setDouble(j87, d35);
                    doubleLargeArray2.setDouble(j89, -doubleLargeArray2.getDouble(j90));
                    doubleLargeArray2.setDouble(j88, d34);
                    doubleLargeArray2.setDouble(j90, d36);
                    long j91 = j85 - j15;
                    long j92 = j86 - 2;
                    long j93 = j2 + j91;
                    long j94 = j2 + j92;
                    double d37 = doubleLargeArray2.getDouble(j93);
                    long j95 = j93 + 1;
                    double d38 = doubleLargeArray2.getDouble(j94);
                    double d39 = -doubleLargeArray2.getDouble(j95);
                    long j96 = j94 + 1;
                    doubleLargeArray2.setDouble(j93, d38);
                    doubleLargeArray2.setDouble(j95, -doubleLargeArray2.getDouble(j96));
                    doubleLargeArray2.setDouble(j94, d37);
                    doubleLargeArray2.setDouble(j96, d39);
                    long j97 = j91 - j20;
                    long j98 = j92 - j27;
                    long j99 = j2 + j97;
                    long j100 = j2 + j98;
                    double d40 = doubleLargeArray2.getDouble(j99);
                    long j101 = j99 + 1;
                    double d41 = doubleLargeArray2.getDouble(j100);
                    double d42 = -doubleLargeArray2.getDouble(j101);
                    long j102 = j100 + 1;
                    doubleLargeArray2.setDouble(j99, d41);
                    doubleLargeArray2.setDouble(j101, -doubleLargeArray2.getDouble(j102));
                    doubleLargeArray2.setDouble(j100, d40);
                    doubleLargeArray2.setDouble(j102, d42);
                    long j103 = j97 - j20;
                    long j104 = j98 + j20;
                    long j105 = j2 + j103;
                    long j106 = j2 + j104;
                    double d43 = doubleLargeArray2.getDouble(j105);
                    long j107 = j105 + 1;
                    double d44 = doubleLargeArray2.getDouble(j106);
                    double d45 = -doubleLargeArray2.getDouble(j107);
                    long j108 = j106 + 1;
                    doubleLargeArray2.setDouble(j105, d44);
                    doubleLargeArray2.setDouble(j107, -doubleLargeArray2.getDouble(j108));
                    doubleLargeArray2.setDouble(j106, d43);
                    doubleLargeArray2.setDouble(j108, d45);
                    long j109 = j2 + (j103 - j20);
                    long j110 = j2 + (j104 - j27);
                    double d46 = doubleLargeArray2.getDouble(j109);
                    long j111 = j109 + 1;
                    double d47 = doubleLargeArray2.getDouble(j110);
                    double d48 = -doubleLargeArray2.getDouble(j111);
                    long j112 = j110 + 1;
                    doubleLargeArray2.setDouble(j109, d47);
                    doubleLargeArray2.setDouble(j111, -doubleLargeArray2.getDouble(j112));
                    doubleLargeArray2.setDouble(j110, d46);
                    doubleLargeArray2.setDouble(j112, d48);
                    j11++;
                    j4 = 1;
                    j6 = j15;
                    j5 = j18;
                    j8 = j20;
                    j7 = 4;
                }
                long j113 = j6;
                long j114 = j4;
                long j115 = j5;
                long j116 = j8;
                long j117 = j10 + (longLargeArray2.getLong(j115 + j9) * 2);
                long j118 = j117 + 2;
                long j119 = j117 + j113;
                long j120 = j2 + j118;
                long j121 = j2 + j119;
                long j122 = j120 - j114;
                doubleLargeArray2.setDouble(j122, -doubleLargeArray2.getDouble(j122));
                double d49 = doubleLargeArray2.getDouble(j120);
                long j123 = j120 + j114;
                long j124 = j118;
                double d50 = doubleLargeArray2.getDouble(j121);
                double d51 = -doubleLargeArray2.getDouble(j123);
                long j125 = j121 + j114;
                doubleLargeArray2.setDouble(j120, d50);
                doubleLargeArray2.setDouble(j123, -doubleLargeArray2.getDouble(j125));
                doubleLargeArray2.setDouble(j121, d49);
                doubleLargeArray2.setDouble(j125, d51);
                long j126 = j121 + 3;
                doubleLargeArray2.setDouble(j126, -doubleLargeArray2.getDouble(j126));
                long j127 = j124 + j116;
                long j128 = j115 * 8;
                long j129 = j119 + j128;
                long j130 = j2 + j127;
                long j131 = j2 + j129;
                double d52 = doubleLargeArray2.getDouble(j130);
                long j132 = j130 + 1;
                long j133 = j127;
                double d53 = doubleLargeArray2.getDouble(j131);
                double d54 = -doubleLargeArray2.getDouble(j132);
                long j134 = j131 + 1;
                doubleLargeArray2.setDouble(j130, d53);
                doubleLargeArray2.setDouble(j132, -doubleLargeArray2.getDouble(j134));
                doubleLargeArray2.setDouble(j131, d52);
                doubleLargeArray2.setDouble(j134, d54);
                long j135 = j133 + j116;
                long j136 = j129 - j116;
                long j137 = j2 + j135;
                long j138 = j2 + j136;
                double d55 = doubleLargeArray2.getDouble(j137);
                long j139 = j137 + 1;
                long j140 = j135;
                double d56 = doubleLargeArray2.getDouble(j138);
                double d57 = -doubleLargeArray2.getDouble(j139);
                long j141 = j138 + 1;
                doubleLargeArray2.setDouble(j137, d56);
                doubleLargeArray2.setDouble(j139, -doubleLargeArray2.getDouble(j141));
                doubleLargeArray2.setDouble(j138, d55);
                doubleLargeArray2.setDouble(j141, d57);
                long j142 = j140 - 2;
                long j143 = j136 - j113;
                long j144 = j2 + j142;
                long j145 = j2 + j143;
                double d58 = doubleLargeArray2.getDouble(j144);
                long j146 = j144 + 1;
                long j147 = j142;
                double d59 = doubleLargeArray2.getDouble(j145);
                double d60 = -doubleLargeArray2.getDouble(j146);
                long j148 = j145 + 1;
                doubleLargeArray2.setDouble(j144, d59);
                doubleLargeArray2.setDouble(j146, -doubleLargeArray2.getDouble(j148));
                doubleLargeArray2.setDouble(j145, d58);
                doubleLargeArray2.setDouble(j148, d60);
                long j149 = j113 + 2;
                long j150 = j147 + j149;
                long j151 = j143 + j149;
                long j152 = j2 + j150;
                long j153 = j2 + j151;
                double d61 = doubleLargeArray2.getDouble(j152);
                long j154 = j152 + 1;
                long j155 = j150;
                double d62 = doubleLargeArray2.getDouble(j153);
                double d63 = -doubleLargeArray2.getDouble(j154);
                long j156 = j153 + 1;
                doubleLargeArray2.setDouble(j152, d62);
                doubleLargeArray2.setDouble(j154, -doubleLargeArray2.getDouble(j156));
                doubleLargeArray2.setDouble(j153, d61);
                doubleLargeArray2.setDouble(j156, d63);
                long j157 = j2 + (j155 - (j113 - j116));
                long j158 = j2 + j151 + (j128 - 2);
                long j159 = j157 - 1;
                doubleLargeArray2.setDouble(j159, -doubleLargeArray2.getDouble(j159));
                double d64 = doubleLargeArray2.getDouble(j157);
                long j160 = j157 + 1;
                double d65 = doubleLargeArray2.getDouble(j158);
                double d66 = -doubleLargeArray2.getDouble(j160);
                long j161 = j158 + 1;
                doubleLargeArray2.setDouble(j157, d65);
                doubleLargeArray2.setDouble(j160, -doubleLargeArray2.getDouble(j161));
                doubleLargeArray2.setDouble(j158, d64);
                doubleLargeArray2.setDouble(j161, d66);
                long j162 = j158 + 3;
                doubleLargeArray2.setDouble(j162, -doubleLargeArray2.getDouble(j162));
                j9++;
                j4 = 1;
                j6 = j113;
                j5 = j115;
                j8 = j116;
                j7 = 4;
            }
            return;
        }
        long j163 = j6;
        long j164 = j5;
        long j165 = j8;
        int i2 = 0;
        while (true) {
            long j166 = (long) i2;
            if (j166 < j164) {
                long j167 = (long) (i2 * 4);
                int i3 = 0;
                while (i3 < i2) {
                    long j168 = ((long) (i3 * 4)) + longLargeArray2.getLong(j164 + j166);
                    long j169 = longLargeArray2.getLong(j164 + ((long) i3)) + j167;
                    long j170 = j2 + j168;
                    long j171 = j2 + j169;
                    long j172 = j167;
                    double d67 = doubleLargeArray2.getDouble(j170);
                    long j173 = j166;
                    long j174 = j170 + 1;
                    int i4 = i3;
                    long j175 = j171 + 1;
                    doubleLargeArray2.setDouble(j170, doubleLargeArray2.getDouble(j171));
                    doubleLargeArray2.setDouble(j174, -doubleLargeArray2.getDouble(j175));
                    doubleLargeArray2.setDouble(j171, d67);
                    doubleLargeArray2.setDouble(j175, -doubleLargeArray2.getDouble(j174));
                    long j176 = j168 + j165;
                    long j177 = j169 + j165;
                    long j178 = j2 + j176;
                    long j179 = j2 + j177;
                    double d68 = doubleLargeArray2.getDouble(j178);
                    long j180 = j177;
                    long j181 = j178 + 1;
                    double d69 = doubleLargeArray2.getDouble(j179);
                    double d70 = -doubleLargeArray2.getDouble(j181);
                    long j182 = j179 + 1;
                    doubleLargeArray2.setDouble(j178, d69);
                    doubleLargeArray2.setDouble(j181, -doubleLargeArray2.getDouble(j182));
                    doubleLargeArray2.setDouble(j179, d68);
                    doubleLargeArray2.setDouble(j182, d70);
                    long j183 = j176 + j163;
                    long j184 = j180 + 2;
                    long j185 = j2 + j183;
                    long j186 = j2 + j184;
                    double d71 = doubleLargeArray2.getDouble(j185);
                    long j187 = j184;
                    long j188 = j185 + 1;
                    double d72 = doubleLargeArray2.getDouble(j186);
                    double d73 = -doubleLargeArray2.getDouble(j188);
                    long j189 = j186 + 1;
                    doubleLargeArray2.setDouble(j185, d72);
                    doubleLargeArray2.setDouble(j188, -doubleLargeArray2.getDouble(j189));
                    doubleLargeArray2.setDouble(j186, d71);
                    doubleLargeArray2.setDouble(j189, d73);
                    long j190 = j183 - j165;
                    long j191 = j187 - j165;
                    long j192 = j2 + j190;
                    long j193 = j2 + j191;
                    double d74 = doubleLargeArray2.getDouble(j192);
                    long j194 = j191;
                    long j195 = j192 + 1;
                    double d75 = doubleLargeArray2.getDouble(j193);
                    double d76 = -doubleLargeArray2.getDouble(j195);
                    long j196 = j193 + 1;
                    doubleLargeArray2.setDouble(j192, d75);
                    doubleLargeArray2.setDouble(j195, -doubleLargeArray2.getDouble(j196));
                    doubleLargeArray2.setDouble(j193, d74);
                    doubleLargeArray2.setDouble(j196, d76);
                    long j197 = j190 + 2;
                    long j198 = j194 + j163;
                    long j199 = j2 + j197;
                    long j200 = j2 + j198;
                    double d77 = doubleLargeArray2.getDouble(j199);
                    long j201 = j198;
                    long j202 = j199 + 1;
                    double d78 = doubleLargeArray2.getDouble(j200);
                    double d79 = -doubleLargeArray2.getDouble(j202);
                    long j203 = j200 + 1;
                    doubleLargeArray2.setDouble(j199, d78);
                    doubleLargeArray2.setDouble(j202, -doubleLargeArray2.getDouble(j203));
                    doubleLargeArray2.setDouble(j200, d77);
                    doubleLargeArray2.setDouble(j203, d79);
                    long j204 = j197 + j165;
                    long j205 = j201 + j165;
                    long j206 = j2 + j204;
                    long j207 = j2 + j205;
                    double d80 = doubleLargeArray2.getDouble(j206);
                    long j208 = j205;
                    long j209 = j206 + 1;
                    double d81 = doubleLargeArray2.getDouble(j207);
                    double d82 = -doubleLargeArray2.getDouble(j209);
                    long j210 = j207 + 1;
                    doubleLargeArray2.setDouble(j206, d81);
                    doubleLargeArray2.setDouble(j209, -doubleLargeArray2.getDouble(j210));
                    doubleLargeArray2.setDouble(j207, d80);
                    doubleLargeArray2.setDouble(j210, d82);
                    long j211 = j204 - j163;
                    long j212 = j208 - 2;
                    long j213 = j2 + j211;
                    long j214 = j2 + j212;
                    double d83 = doubleLargeArray2.getDouble(j213);
                    long j215 = j212;
                    long j216 = j213 + 1;
                    double d84 = doubleLargeArray2.getDouble(j214);
                    double d85 = -doubleLargeArray2.getDouble(j216);
                    long j217 = j214 + 1;
                    doubleLargeArray2.setDouble(j213, d84);
                    doubleLargeArray2.setDouble(j216, -doubleLargeArray2.getDouble(j217));
                    doubleLargeArray2.setDouble(j214, d83);
                    doubleLargeArray2.setDouble(j217, d85);
                    long j218 = j2 + (j211 - j165);
                    long j219 = j2 + (j215 - j165);
                    double d86 = doubleLargeArray2.getDouble(j218);
                    long j220 = j218 + 1;
                    double d87 = doubleLargeArray2.getDouble(j219);
                    double d88 = -doubleLargeArray2.getDouble(j220);
                    long j221 = j219 + 1;
                    doubleLargeArray2.setDouble(j218, d87);
                    doubleLargeArray2.setDouble(j220, -doubleLargeArray2.getDouble(j221));
                    doubleLargeArray2.setDouble(j219, d86);
                    doubleLargeArray2.setDouble(j221, d88);
                    i3 = i4 + 1;
                    i2 = i2;
                    j167 = j172;
                    j166 = j173;
                }
                long j222 = j167 + longLargeArray2.getLong(j164 + j166);
                long j223 = j222 + 2;
                long j224 = j222 + j163;
                long j225 = j2 + j223;
                long j226 = j2 + j224;
                long j227 = j225 - 1;
                doubleLargeArray2.setDouble(j227, -doubleLargeArray2.getDouble(j227));
                double d89 = doubleLargeArray2.getDouble(j225);
                long j228 = j225 + 1;
                long j229 = j224;
                double d90 = doubleLargeArray2.getDouble(j226);
                long j230 = j223;
                long j231 = j226 + 1;
                double d91 = -doubleLargeArray2.getDouble(j228);
                doubleLargeArray2.setDouble(j225, d90);
                doubleLargeArray2.setDouble(j228, -doubleLargeArray2.getDouble(j231));
                doubleLargeArray2.setDouble(j226, d89);
                doubleLargeArray2.setDouble(j231, d91);
                long j232 = j226 + 3;
                doubleLargeArray2.setDouble(j232, -doubleLargeArray2.getDouble(j232));
                long j233 = j2 + j230 + j165;
                long j234 = j2 + j229 + j165;
                long j235 = j233 - 1;
                doubleLargeArray2.setDouble(j235, -doubleLargeArray2.getDouble(j235));
                double d92 = doubleLargeArray2.getDouble(j233);
                long j236 = j233 + 1;
                double d93 = doubleLargeArray2.getDouble(j234);
                double d94 = -doubleLargeArray2.getDouble(j236);
                long j237 = j234 + 1;
                doubleLargeArray2.setDouble(j233, d93);
                doubleLargeArray2.setDouble(j236, -doubleLargeArray2.getDouble(j237));
                doubleLargeArray2.setDouble(j234, d92);
                doubleLargeArray2.setDouble(j237, d94);
                long j238 = j234 + 3;
                doubleLargeArray2.setDouble(j238, -doubleLargeArray2.getDouble(j238));
                i2++;
            } else {
                return;
            }
        }
    }

    public static void bitrv216(double[] dArr, int i) {
        int i2 = i + 2;
        double d = dArr[i2];
        int i3 = i + 3;
        double d2 = dArr[i3];
        int i4 = i + 4;
        double d3 = dArr[i4];
        int i5 = i + 5;
        double d4 = dArr[i5];
        int i6 = i + 6;
        double d5 = dArr[i6];
        int i7 = i + 7;
        double d6 = dArr[i7];
        int i8 = i + 8;
        double d7 = dArr[i8];
        int i9 = i + 9;
        double d8 = dArr[i9];
        int i10 = i + 10;
        double d9 = dArr[i10];
        int i11 = i + 11;
        double d10 = dArr[i11];
        int i12 = i + 14;
        double d11 = dArr[i12];
        int i13 = i + 15;
        double d12 = dArr[i13];
        int i14 = i + 16;
        double d13 = dArr[i14];
        int i15 = i + 17;
        double d14 = dArr[i15];
        int i16 = i + 20;
        double d15 = dArr[i16];
        int i17 = i + 21;
        double d16 = dArr[i17];
        int i18 = i + 22;
        double d17 = dArr[i18];
        int i19 = i + 23;
        double d18 = dArr[i19];
        int i20 = i + 24;
        double d19 = dArr[i20];
        int i21 = i + 25;
        double d20 = dArr[i21];
        int i22 = i + 26;
        double d21 = dArr[i22];
        int i23 = i + 27;
        double d22 = dArr[i23];
        int i24 = i + 28;
        double d23 = dArr[i24];
        int i25 = i + 29;
        double d24 = dArr[i25];
        dArr[i2] = d13;
        dArr[i3] = d14;
        dArr[i4] = d7;
        dArr[i5] = d8;
        dArr[i6] = d19;
        dArr[i7] = d20;
        dArr[i8] = d3;
        dArr[i9] = d4;
        dArr[i10] = d15;
        dArr[i11] = d16;
        dArr[i12] = d23;
        dArr[i13] = d24;
        dArr[i14] = d;
        dArr[i15] = d2;
        dArr[i16] = d9;
        dArr[i17] = d10;
        dArr[i18] = d21;
        dArr[i19] = d22;
        dArr[i20] = d5;
        dArr[i21] = d6;
        dArr[i22] = d17;
        dArr[i23] = d18;
        dArr[i24] = d11;
        dArr[i25] = d12;
    }

    public static void bitrv216(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j + 2;
        double d = doubleLargeArray2.getDouble(j2);
        long j3 = j + 3;
        double d2 = doubleLargeArray2.getDouble(j3);
        long j4 = j + 4;
        double d3 = doubleLargeArray2.getDouble(j4);
        long j5 = j + 5;
        double d4 = d2;
        double d5 = d;
        long j6 = j + 6;
        double d6 = doubleLargeArray2.getDouble(j5);
        double d7 = doubleLargeArray2.getDouble(j6);
        long j7 = j + 7;
        double d8 = d3;
        double d9 = doubleLargeArray2.getDouble(j7);
        long j8 = j + 8;
        long j9 = j7;
        double d10 = doubleLargeArray2.getDouble(j8);
        long j10 = j8;
        long j11 = j + 9;
        long j12 = j6;
        double d11 = doubleLargeArray2.getDouble(j11);
        long j13 = j11;
        long j14 = j + 10;
        double d12 = d11;
        double d13 = doubleLargeArray2.getDouble(j14);
        long j15 = j + 11;
        long j16 = j14;
        double d14 = doubleLargeArray2.getDouble(j15);
        long j17 = j + 14;
        long j18 = j15;
        double d15 = doubleLargeArray2.getDouble(j17);
        long j19 = j + 15;
        long j20 = j17;
        double d16 = doubleLargeArray2.getDouble(j19);
        long j21 = j + 16;
        long j22 = j19;
        double d17 = doubleLargeArray2.getDouble(j21);
        long j23 = j21;
        long j24 = j + 17;
        long j25 = j5;
        double d18 = doubleLargeArray2.getDouble(j24);
        long j26 = j24;
        long j27 = j + 20;
        double d19 = d10;
        double d20 = doubleLargeArray2.getDouble(j27);
        long j28 = j27;
        long j29 = j + 21;
        double d21 = d20;
        double d22 = doubleLargeArray2.getDouble(j29);
        long j30 = j29;
        long j31 = j + 22;
        double d23 = d22;
        double d24 = doubleLargeArray2.getDouble(j31);
        long j32 = j + 23;
        long j33 = j31;
        double d25 = doubleLargeArray2.getDouble(j32);
        long j34 = j + 24;
        long j35 = j32;
        double d26 = doubleLargeArray2.getDouble(j34);
        long j36 = j34;
        long j37 = j + 25;
        double d27 = d26;
        double d28 = doubleLargeArray2.getDouble(j37);
        long j38 = j37;
        long j39 = j + 26;
        double d29 = d28;
        double d30 = doubleLargeArray2.getDouble(j39);
        long j40 = j39;
        long j41 = j + 27;
        double d31 = d30;
        double d32 = doubleLargeArray2.getDouble(j41);
        long j42 = j41;
        long j43 = j + 28;
        double d33 = d32;
        double d34 = doubleLargeArray2.getDouble(j43);
        long j44 = j43;
        long j45 = j + 29;
        double d35 = d34;
        double d36 = doubleLargeArray2.getDouble(j45);
        doubleLargeArray2.setDouble(j2, d17);
        doubleLargeArray2.setDouble(j3, d18);
        doubleLargeArray2.setDouble(j4, d19);
        doubleLargeArray2.setDouble(j25, d12);
        doubleLargeArray2.setDouble(j12, d27);
        doubleLargeArray2.setDouble(j9, d29);
        doubleLargeArray2.setDouble(j10, d8);
        doubleLargeArray2.setDouble(j13, d6);
        doubleLargeArray2.setDouble(j16, d21);
        doubleLargeArray2.setDouble(j18, d23);
        doubleLargeArray2.setDouble(j20, d35);
        doubleLargeArray2.setDouble(j22, d36);
        doubleLargeArray2.setDouble(j23, d5);
        doubleLargeArray2.setDouble(j26, d4);
        doubleLargeArray2.setDouble(j28, d13);
        doubleLargeArray2.setDouble(j30, d14);
        doubleLargeArray2.setDouble(j33, d31);
        doubleLargeArray2.setDouble(j35, d33);
        doubleLargeArray2.setDouble(j36, d7);
        doubleLargeArray2.setDouble(j38, d9);
        doubleLargeArray2.setDouble(j40, d24);
        doubleLargeArray2.setDouble(j42, d25);
        doubleLargeArray2.setDouble(j44, d15);
        doubleLargeArray2.setDouble(j45, d16);
    }

    public static void bitrv216neg(double[] dArr, int i) {
        int i2 = i + 2;
        double d = dArr[i2];
        int i3 = i + 3;
        double d2 = dArr[i3];
        int i4 = i + 4;
        double d3 = dArr[i4];
        int i5 = i + 5;
        double d4 = dArr[i5];
        int i6 = i + 6;
        double d5 = dArr[i6];
        int i7 = i + 7;
        double d6 = dArr[i7];
        int i8 = i + 8;
        double d7 = dArr[i8];
        int i9 = i + 9;
        double d8 = dArr[i9];
        int i10 = i + 10;
        double d9 = dArr[i10];
        int i11 = i + 11;
        double d10 = dArr[i11];
        int i12 = i + 12;
        double d11 = dArr[i12];
        int i13 = i + 13;
        double d12 = dArr[i13];
        int i14 = i + 14;
        double d13 = dArr[i14];
        int i15 = i + 15;
        double d14 = dArr[i15];
        int i16 = i + 16;
        double d15 = dArr[i16];
        int i17 = i + 17;
        double d16 = dArr[i17];
        int i18 = i + 18;
        double d17 = dArr[i18];
        int i19 = i + 19;
        double d18 = dArr[i19];
        int i20 = i + 20;
        double d19 = dArr[i20];
        int i21 = i + 21;
        double d20 = dArr[i21];
        int i22 = i + 22;
        double d21 = dArr[i22];
        int i23 = i + 23;
        double d22 = dArr[i23];
        int i24 = i + 24;
        double d23 = dArr[i24];
        int i25 = i + 25;
        double d24 = dArr[i25];
        int i26 = i + 26;
        double d25 = dArr[i26];
        int i27 = i + 27;
        double d26 = dArr[i27];
        int i28 = i + 28;
        double d27 = dArr[i28];
        int i29 = i + 29;
        double d28 = dArr[i29];
        int i30 = i + 30;
        double d29 = dArr[i30];
        int i31 = i + 31;
        double d30 = dArr[i31];
        dArr[i2] = d29;
        dArr[i3] = d30;
        dArr[i4] = d13;
        dArr[i5] = d14;
        dArr[i6] = d21;
        dArr[i7] = d22;
        dArr[i8] = d5;
        dArr[i9] = d6;
        dArr[i10] = d25;
        dArr[i11] = d26;
        dArr[i12] = d9;
        dArr[i13] = d10;
        dArr[i14] = d17;
        dArr[i15] = d18;
        dArr[i16] = d;
        dArr[i17] = d2;
        dArr[i18] = d27;
        dArr[i19] = d28;
        dArr[i20] = d11;
        dArr[i21] = d12;
        dArr[i22] = d19;
        dArr[i23] = d20;
        dArr[i24] = d3;
        dArr[i25] = d4;
        dArr[i26] = d23;
        dArr[i27] = d24;
        dArr[i28] = d7;
        dArr[i29] = d8;
        dArr[i30] = d15;
        dArr[i31] = d16;
    }

    public static void bitrv216neg(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j + 2;
        double d = doubleLargeArray2.getDouble(j2);
        long j3 = j + 3;
        double d2 = doubleLargeArray2.getDouble(j3);
        long j4 = j + 4;
        long j5 = j + 5;
        double d3 = doubleLargeArray2.getDouble(j4);
        double d4 = doubleLargeArray2.getDouble(j5);
        long j6 = j + 6;
        double d5 = d2;
        double d6 = d;
        long j7 = j + 7;
        double d7 = doubleLargeArray2.getDouble(j6);
        double d8 = doubleLargeArray2.getDouble(j7);
        long j8 = j + 8;
        long j9 = j7;
        double d9 = doubleLargeArray2.getDouble(j8);
        long j10 = j + 9;
        long j11 = j8;
        double d10 = doubleLargeArray2.getDouble(j10);
        long j12 = j + 10;
        long j13 = j10;
        double d11 = doubleLargeArray2.getDouble(j12);
        long j14 = j + 11;
        long j15 = j12;
        double d12 = doubleLargeArray2.getDouble(j14);
        long j16 = j + 12;
        long j17 = j14;
        double d13 = doubleLargeArray2.getDouble(j16);
        long j18 = j + 13;
        long j19 = j16;
        double d14 = doubleLargeArray2.getDouble(j18);
        long j20 = j + 14;
        long j21 = j18;
        double d15 = doubleLargeArray2.getDouble(j20);
        long j22 = j20;
        long j23 = j + 15;
        long j24 = j6;
        double d16 = doubleLargeArray2.getDouble(j23);
        long j25 = j23;
        long j26 = j + 16;
        double d17 = d16;
        double d18 = doubleLargeArray2.getDouble(j26);
        long j27 = j + 17;
        long j28 = j26;
        double d19 = doubleLargeArray2.getDouble(j27);
        long j29 = j + 18;
        long j30 = j27;
        double d20 = doubleLargeArray2.getDouble(j29);
        long j31 = j29;
        long j32 = j + 19;
        double d21 = d20;
        double d22 = doubleLargeArray2.getDouble(j32);
        long j33 = j32;
        long j34 = j + 20;
        double d23 = d22;
        double d24 = doubleLargeArray2.getDouble(j34);
        long j35 = j + 21;
        long j36 = j34;
        double d25 = doubleLargeArray2.getDouble(j35);
        long j37 = j + 22;
        long j38 = j35;
        double d26 = doubleLargeArray2.getDouble(j37);
        long j39 = j37;
        long j40 = j + 23;
        double d27 = d26;
        double d28 = doubleLargeArray2.getDouble(j40);
        long j41 = j40;
        long j42 = j + 24;
        double d29 = d28;
        double d30 = doubleLargeArray2.getDouble(j42);
        long j43 = j + 25;
        long j44 = j42;
        double d31 = doubleLargeArray2.getDouble(j43);
        long j45 = j + 26;
        long j46 = j43;
        double d32 = doubleLargeArray2.getDouble(j45);
        long j47 = j45;
        long j48 = j + 27;
        double d33 = d32;
        double d34 = doubleLargeArray2.getDouble(j48);
        long j49 = j48;
        long j50 = j + 28;
        double d35 = d34;
        double d36 = doubleLargeArray2.getDouble(j50);
        long j51 = j50;
        long j52 = j + 29;
        double d37 = d36;
        double d38 = doubleLargeArray2.getDouble(j52);
        long j53 = j52;
        long j54 = j + 30;
        double d39 = d38;
        double d40 = doubleLargeArray2.getDouble(j54);
        long j55 = j54;
        long j56 = j + 31;
        long j57 = j5;
        double d41 = doubleLargeArray2.getDouble(j56);
        doubleLargeArray2.setDouble(j2, d40);
        doubleLargeArray2.setDouble(j3, d41);
        doubleLargeArray2.setDouble(j4, d15);
        doubleLargeArray2.setDouble(j57, d17);
        doubleLargeArray2.setDouble(j24, d27);
        doubleLargeArray2.setDouble(j9, d29);
        doubleLargeArray2.setDouble(j11, d7);
        doubleLargeArray2.setDouble(j13, d8);
        doubleLargeArray2.setDouble(j15, d33);
        doubleLargeArray2.setDouble(j17, d35);
        doubleLargeArray2.setDouble(j19, d11);
        doubleLargeArray2.setDouble(j21, d12);
        doubleLargeArray2.setDouble(j22, d21);
        doubleLargeArray2.setDouble(j25, d23);
        doubleLargeArray2.setDouble(j28, d6);
        doubleLargeArray2.setDouble(j30, d5);
        doubleLargeArray2.setDouble(j31, d37);
        doubleLargeArray2.setDouble(j33, d39);
        doubleLargeArray2.setDouble(j36, d13);
        doubleLargeArray2.setDouble(j38, d14);
        doubleLargeArray2.setDouble(j39, d24);
        doubleLargeArray2.setDouble(j41, d25);
        doubleLargeArray2.setDouble(j44, d3);
        doubleLargeArray2.setDouble(j46, d4);
        doubleLargeArray2.setDouble(j47, d30);
        doubleLargeArray2.setDouble(j49, d31);
        doubleLargeArray2.setDouble(j51, d9);
        doubleLargeArray2.setDouble(j53, d10);
        doubleLargeArray2.setDouble(j55, d18);
        doubleLargeArray2.setDouble(j56, d19);
    }

    public static void bitrv208(double[] dArr, int i) {
        int i2 = i + 2;
        double d = dArr[i2];
        int i3 = i + 3;
        double d2 = dArr[i3];
        int i4 = i + 6;
        double d3 = dArr[i4];
        int i5 = i + 7;
        double d4 = dArr[i5];
        int i6 = i + 8;
        double d5 = dArr[i6];
        int i7 = i + 9;
        double d6 = dArr[i7];
        int i8 = i + 12;
        double d7 = dArr[i8];
        int i9 = i + 13;
        double d8 = dArr[i9];
        dArr[i2] = d5;
        dArr[i3] = d6;
        dArr[i4] = d7;
        dArr[i5] = d8;
        dArr[i6] = d;
        dArr[i7] = d2;
        dArr[i8] = d3;
        dArr[i9] = d4;
    }

    public static void bitrv208(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j + 2;
        double d = doubleLargeArray2.getDouble(j2);
        long j3 = j + 3;
        double d2 = doubleLargeArray2.getDouble(j3);
        long j4 = j + 6;
        long j5 = j + 7;
        double d3 = doubleLargeArray2.getDouble(j4);
        double d4 = doubleLargeArray2.getDouble(j5);
        long j6 = j + 8;
        double d5 = d2;
        double d6 = doubleLargeArray2.getDouble(j6);
        double d7 = d;
        long j7 = j + 9;
        long j8 = j6;
        double d8 = doubleLargeArray2.getDouble(j7);
        long j9 = j7;
        long j10 = j + 12;
        long j11 = j5;
        double d9 = doubleLargeArray2.getDouble(j10);
        long j12 = j10;
        long j13 = j + 13;
        long j14 = j4;
        double d10 = doubleLargeArray2.getDouble(j13);
        doubleLargeArray2.setDouble(j2, d6);
        doubleLargeArray2.setDouble(j3, d8);
        doubleLargeArray2.setDouble(j14, d9);
        doubleLargeArray2.setDouble(j11, d10);
        doubleLargeArray2.setDouble(j8, d7);
        doubleLargeArray2.setDouble(j9, d5);
        doubleLargeArray2.setDouble(j12, d3);
        doubleLargeArray2.setDouble(j13, d4);
    }

    public static void bitrv208neg(double[] dArr, int i) {
        int i2 = i + 2;
        double d = dArr[i2];
        int i3 = i + 3;
        double d2 = dArr[i3];
        int i4 = i + 4;
        double d3 = dArr[i4];
        int i5 = i + 5;
        double d4 = dArr[i5];
        int i6 = i + 6;
        double d5 = dArr[i6];
        int i7 = i + 7;
        double d6 = dArr[i7];
        int i8 = i + 8;
        double d7 = dArr[i8];
        int i9 = i + 9;
        double d8 = dArr[i9];
        int i10 = i + 10;
        double d9 = dArr[i10];
        int i11 = i + 11;
        double d10 = dArr[i11];
        int i12 = i + 12;
        double d11 = dArr[i12];
        int i13 = i + 13;
        double d12 = dArr[i13];
        int i14 = i + 14;
        double d13 = dArr[i14];
        int i15 = i + 15;
        double d14 = dArr[i15];
        dArr[i2] = d13;
        dArr[i3] = d14;
        dArr[i4] = d5;
        dArr[i5] = d6;
        dArr[i6] = d9;
        dArr[i7] = d10;
        dArr[i8] = d;
        dArr[i9] = d2;
        dArr[i10] = d11;
        dArr[i11] = d12;
        dArr[i12] = d3;
        dArr[i13] = d4;
        dArr[i14] = d7;
        dArr[i15] = d8;
    }

    public static void bitrv208neg(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j + 2;
        double d = doubleLargeArray2.getDouble(j2);
        long j3 = j + 3;
        double d2 = doubleLargeArray2.getDouble(j3);
        long j4 = j + 4;
        long j5 = j + 5;
        double d3 = doubleLargeArray2.getDouble(j4);
        double d4 = doubleLargeArray2.getDouble(j5);
        long j6 = j + 6;
        double d5 = d2;
        double d6 = doubleLargeArray2.getDouble(j6);
        double d7 = d;
        long j7 = j + 7;
        long j8 = j6;
        double d8 = doubleLargeArray2.getDouble(j7);
        long j9 = j7;
        long j10 = j + 8;
        double d9 = d8;
        double d10 = doubleLargeArray2.getDouble(j10);
        long j11 = j + 9;
        long j12 = j10;
        double d11 = doubleLargeArray2.getDouble(j11);
        long j13 = j + 10;
        long j14 = j11;
        double d12 = doubleLargeArray2.getDouble(j13);
        long j15 = j13;
        long j16 = j + 11;
        double d13 = d12;
        double d14 = doubleLargeArray2.getDouble(j16);
        long j17 = j16;
        long j18 = j + 12;
        double d15 = d14;
        double d16 = doubleLargeArray2.getDouble(j18);
        long j19 = j18;
        long j20 = j + 13;
        double d17 = d16;
        double d18 = doubleLargeArray2.getDouble(j20);
        long j21 = j20;
        long j22 = j + 14;
        double d19 = d18;
        double d20 = doubleLargeArray2.getDouble(j22);
        long j23 = j22;
        long j24 = j + 15;
        long j25 = j5;
        double d21 = doubleLargeArray2.getDouble(j24);
        doubleLargeArray2.setDouble(j2, d20);
        doubleLargeArray2.setDouble(j3, d21);
        doubleLargeArray2.setDouble(j4, d6);
        doubleLargeArray2.setDouble(j25, d9);
        doubleLargeArray2.setDouble(j8, d13);
        doubleLargeArray2.setDouble(j9, d15);
        doubleLargeArray2.setDouble(j12, d7);
        doubleLargeArray2.setDouble(j14, d5);
        doubleLargeArray2.setDouble(j15, d17);
        doubleLargeArray2.setDouble(j17, d19);
        doubleLargeArray2.setDouble(j19, d3);
        doubleLargeArray2.setDouble(j21, d4);
        doubleLargeArray2.setDouble(j23, d10);
        doubleLargeArray2.setDouble(j24, d11);
    }

    public static void cftf1st(int i, double[] dArr, int i2, double[] dArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        double d = dArr[i2];
        double d2 = dArr[i9];
        double d3 = d + d2;
        int i11 = i2 + 1;
        double d4 = dArr[i11];
        int i12 = i9 + 1;
        double d5 = dArr[i12];
        double d6 = d4 + d5;
        double d7 = d - d2;
        double d8 = d4 - d5;
        double d9 = dArr[i8];
        double d10 = dArr[i10];
        double d11 = d9 + d10;
        int i13 = i8 + 1;
        double d12 = dArr[i13];
        int i14 = i10 + 1;
        double d13 = dArr[i14];
        double d14 = d12 + d13;
        double d15 = d9 - d10;
        double d16 = d12 - d13;
        dArr[i2] = d3 + d11;
        dArr[i11] = d6 + d14;
        dArr[i8] = d3 - d11;
        dArr[i13] = d6 - d14;
        dArr[i9] = d7 - d16;
        dArr[i12] = d8 + d15;
        dArr[i10] = d7 + d16;
        dArr[i14] = d8 - d15;
        double d17 = dArr2[i3 + 1];
        double d18 = dArr2[i3 + 2];
        double d19 = dArr2[i3 + 3];
        int i15 = 2;
        double d20 = 1.0d;
        double d21 = 0.0d;
        int i16 = 0;
        double d22 = 1.0d;
        double d23 = 0.0d;
        while (true) {
            double d24 = d17;
            if (i15 < i4 - 2) {
                i16 += 4;
                int i17 = i3 + i16;
                double d25 = dArr2[i17];
                double d26 = (d20 + d25) * d18;
                double d27 = dArr2[i17 + 1];
                double d28 = (d23 + d27) * d18;
                double d29 = dArr2[i17 + 2];
                double d30 = (d22 + d29) * d19;
                double d31 = dArr2[i17 + 3];
                double d32 = (d21 + d31) * d19;
                int i18 = i15 + i5;
                int i19 = i18 + i5;
                int i20 = i19 + i5;
                int i21 = i2 + i18;
                int i22 = i2 + i19;
                int i23 = i2 + i20;
                int i24 = i2 + i15;
                double d33 = dArr[i24];
                double d34 = dArr[i22];
                double d35 = d33 + d34;
                int i25 = i24 + 1;
                double d36 = dArr[i25];
                int i26 = i22 + 1;
                double d37 = dArr[i26];
                double d38 = d36 + d37;
                double d39 = d33 - d34;
                double d40 = d36 - d37;
                int i27 = i24 + 2;
                double d41 = dArr[i27];
                int i28 = i22 + 2;
                double d42 = dArr[i28];
                double d43 = d41 + d42;
                int i29 = i24 + 3;
                double d44 = dArr[i29];
                int i30 = i22 + 3;
                double d45 = dArr[i30];
                double d46 = d44 + d45;
                double d47 = d41 - d42;
                double d48 = d44 - d45;
                double d49 = dArr[i21];
                double d50 = dArr[i23];
                double d51 = d49 + d50;
                int i31 = i21 + 1;
                double d52 = dArr[i31];
                int i32 = i23 + 1;
                double d53 = dArr[i32];
                double d54 = d52 + d53;
                double d55 = d49 - d50;
                double d56 = d52 - d53;
                int i33 = i21 + 2;
                double d57 = dArr[i33];
                int i34 = i23 + 2;
                double d58 = dArr[i34];
                double d59 = d57 + d58;
                int i35 = i21 + 3;
                double d60 = dArr[i35];
                int i36 = i23 + 3;
                double d61 = dArr[i36];
                double d62 = d60 + d61;
                double d63 = d57 - d58;
                double d64 = d60 - d61;
                dArr[i24] = d35 + d51;
                dArr[i25] = d38 + d54;
                dArr[i27] = d43 + d59;
                dArr[i29] = d46 + d62;
                dArr[i21] = d35 - d51;
                dArr[i31] = d38 - d54;
                dArr[i33] = d43 - d59;
                dArr[i35] = d46 - d62;
                double d65 = d39 - d56;
                double d66 = d40 + d55;
                dArr[i22] = (d26 * d65) - (d28 * d66);
                dArr[i26] = (d66 * d26) + (d65 * d28);
                double d67 = d47 - d64;
                double d68 = d48 + d63;
                dArr[i28] = (d25 * d67) - (d27 * d68);
                dArr[i30] = (d68 * d25) + (d67 * d27);
                double d69 = d39 + d56;
                double d70 = d40 - d55;
                dArr[i23] = (d30 * d69) + (d32 * d70);
                dArr[i32] = (d70 * d30) - (d69 * d32);
                double d71 = d47 + d64;
                double d72 = d48 - d63;
                dArr[i34] = (d29 * d71) + (d31 * d72);
                dArr[i36] = (d72 * d29) - (d71 * d31);
                int i37 = i5 - i15;
                int i38 = i37 + i5;
                int i39 = i38 + i5;
                int i40 = i39 + i5;
                int i41 = i2 + i37;
                int i42 = i2 + i38;
                int i43 = i2 + i39;
                int i44 = i2 + i40;
                double d73 = dArr[i41];
                double d74 = dArr[i43];
                double d75 = d73 + d74;
                int i45 = i41 + 1;
                double d76 = dArr[i45];
                int i46 = i43 + 1;
                double d77 = dArr[i46];
                double d78 = d76 + d77;
                double d79 = d73 - d74;
                double d80 = d76 - d77;
                int i47 = i41 - 2;
                double d81 = dArr[i47];
                int i48 = i43 - 2;
                double d82 = dArr[i48];
                double d83 = d81 + d82;
                int i49 = i41 - 1;
                double d84 = dArr[i49];
                int i50 = i43 - 1;
                double d85 = dArr[i50];
                double d86 = d84 + d85;
                double d87 = d81 - d82;
                double d88 = d84 - d85;
                double d89 = dArr[i42];
                double d90 = dArr[i44];
                double d91 = d89 + d90;
                int i51 = i42 + 1;
                double d92 = dArr[i51];
                int i52 = i44 + 1;
                double d93 = dArr[i52];
                double d94 = d92 + d93;
                double d95 = d89 - d90;
                double d96 = d92 - d93;
                int i53 = i42 - 2;
                double d97 = dArr[i53];
                int i54 = i44 - 2;
                double d98 = dArr[i54];
                double d99 = d97 + d98;
                int i55 = i42 - 1;
                double d100 = dArr[i55];
                int i56 = i44 - 1;
                double d101 = dArr[i56];
                double d102 = d100 + d101;
                double d103 = d97 - d98;
                double d104 = d100 - d101;
                dArr[i41] = d75 + d91;
                dArr[i45] = d78 + d94;
                dArr[i47] = d83 + d99;
                dArr[i49] = d86 + d102;
                dArr[i42] = d75 - d91;
                dArr[i51] = d78 - d94;
                dArr[i53] = d83 - d99;
                dArr[i55] = d86 - d102;
                double d105 = d79 - d96;
                double d106 = d80 + d95;
                dArr[i43] = (d28 * d105) - (d26 * d106);
                dArr[i46] = (d28 * d106) + (d26 * d105);
                double d107 = d87 - d104;
                double d108 = d88 + d103;
                dArr[i48] = (d27 * d107) - (d25 * d108);
                dArr[i50] = (d108 * d27) + (d107 * d25);
                double d109 = d79 + d96;
                double d110 = d80 - d95;
                dArr[i44] = (d32 * d109) + (d30 * d110);
                dArr[i52] = (d32 * d110) - (d30 * d109);
                double d111 = d87 + d104;
                double d112 = d88 - d103;
                dArr[i54] = (d31 * d111) + (d29 * d112);
                dArr[i56] = (d112 * d31) - (d111 * d29);
                i15 += 4;
                d21 = d31;
                d17 = d24;
                d20 = d25;
                d23 = d27;
                d22 = d29;
            } else {
                double d113 = (d20 + d24) * d18;
                double d114 = d18 * (d23 + d24);
                double d115 = (d22 - d24) * d19;
                double d116 = d19 * (d21 - d24);
                int i57 = i4 + i5;
                int i58 = i57 + i5;
                int i59 = i5 + i58;
                int i60 = i2 + i4;
                int i61 = i2 + i57;
                int i62 = i2 + i58;
                int i63 = i2 + i59;
                int i64 = i60 - 2;
                double d117 = dArr[i64];
                int i65 = i62 - 2;
                double d118 = dArr[i65];
                double d119 = d117 + d118;
                int i66 = i60 - 1;
                double d120 = dArr[i66];
                int i67 = i62 - 1;
                double d121 = dArr[i67];
                double d122 = d120 + d121;
                double d123 = d117 - d118;
                double d124 = d120 - d121;
                int i68 = i61 - 2;
                double d125 = dArr[i68];
                int i69 = i63 - 2;
                double d126 = dArr[i69];
                double d127 = d125 + d126;
                int i70 = i61 - 1;
                double d128 = dArr[i70];
                int i71 = i63 - 1;
                double d129 = dArr[i71];
                double d130 = d128 + d129;
                double d131 = d125 - d126;
                double d132 = d128 - d129;
                dArr[i64] = d119 + d127;
                dArr[i66] = d122 + d130;
                dArr[i68] = d119 - d127;
                dArr[i70] = d122 - d130;
                double d133 = d123 - d132;
                double d134 = d124 + d131;
                dArr[i65] = (d113 * d133) - (d114 * d134);
                dArr[i67] = (d134 * d113) + (d133 * d114);
                double d135 = d123 + d132;
                double d136 = d124 - d131;
                dArr[i69] = (d115 * d135) + (d116 * d136);
                dArr[i71] = (d136 * d115) - (d135 * d116);
                double d137 = dArr[i60];
                double d138 = dArr[i62];
                double d139 = d137 + d138;
                int i72 = i60 + 1;
                double d140 = dArr[i72];
                int i73 = i62 + 1;
                double d141 = dArr[i73];
                double d142 = d140 + d141;
                double d143 = d137 - d138;
                double d144 = d140 - d141;
                double d145 = dArr[i61];
                double d146 = dArr[i63];
                double d147 = d145 + d146;
                int i74 = i61 + 1;
                double d148 = dArr[i74];
                int i75 = i63 + 1;
                double d149 = dArr[i75];
                double d150 = d148 + d149;
                double d151 = d145 - d146;
                double d152 = d148 - d149;
                dArr[i60] = d139 + d147;
                dArr[i72] = d142 + d150;
                dArr[i61] = d139 - d147;
                dArr[i74] = d142 - d150;
                double d153 = d143 - d152;
                double d154 = d144 + d151;
                dArr[i62] = (d153 - d154) * d24;
                dArr[i73] = d24 * (d154 + d153);
                double d155 = d143 + d152;
                double d156 = d144 - d151;
                double d157 = d115;
                double d158 = -d24;
                dArr[i63] = (d155 + d156) * d158;
                dArr[i75] = d158 * (d156 - d155);
                int i76 = i60 + 2;
                double d159 = dArr[i76];
                int i77 = i62 + 2;
                double d160 = dArr[i77];
                double d161 = d159 + d160;
                int i78 = i60 + 3;
                double d162 = dArr[i78];
                int i79 = i62 + 3;
                double d163 = dArr[i79];
                double d164 = d162 + d163;
                double d165 = d159 - d160;
                double d166 = d162 - d163;
                int i80 = i61 + 2;
                double d167 = dArr[i80];
                int i81 = i63 + 2;
                double d168 = dArr[i81];
                double d169 = d167 + d168;
                int i82 = i61 + 3;
                double d170 = dArr[i82];
                int i83 = i63 + 3;
                double d171 = dArr[i83];
                double d172 = d170 + d171;
                double d173 = d167 - d168;
                double d174 = d170 - d171;
                dArr[i76] = d161 + d169;
                dArr[i78] = d164 + d172;
                dArr[i80] = d161 - d169;
                dArr[i82] = d164 - d172;
                double d175 = d165 - d174;
                double d176 = d166 + d173;
                dArr[i77] = (d114 * d175) - (d113 * d176);
                dArr[i79] = (d114 * d176) + (d113 * d175);
                double d177 = d165 + d174;
                double d178 = d166 - d173;
                double d179 = d157;
                dArr[i81] = (d116 * d177) + (d179 * d178);
                dArr[i83] = (d116 * d178) - (d177 * d179);
                return;
            }
        }
    }

    public static void cftf1st(long j, DoubleLargeArray doubleLargeArray, long j2, DoubleLargeArray doubleLargeArray2, long j3) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j4 = j2;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j8 + j4;
        double d = doubleLargeArray.getDouble(j2) + doubleLargeArray3.getDouble(j10);
        long j12 = j4 + 1;
        long j13 = j6;
        long j14 = j10 + 1;
        double d2 = doubleLargeArray3.getDouble(j12) + doubleLargeArray3.getDouble(j14);
        double d3 = doubleLargeArray.getDouble(j2) - doubleLargeArray3.getDouble(j10);
        double d4 = doubleLargeArray3.getDouble(j12) - doubleLargeArray3.getDouble(j14);
        double d5 = doubleLargeArray3.getDouble(j9) + doubleLargeArray3.getDouble(j11);
        long j15 = j5;
        long j16 = j9 + 1;
        long j17 = j14;
        long j18 = j11 + 1;
        double d6 = doubleLargeArray3.getDouble(j16) + doubleLargeArray3.getDouble(j18);
        double d7 = doubleLargeArray3.getDouble(j9) - doubleLargeArray3.getDouble(j11);
        double d8 = doubleLargeArray3.getDouble(j16) - doubleLargeArray3.getDouble(j18);
        doubleLargeArray3.setDouble(j4, d + d5);
        doubleLargeArray3.setDouble(j12, d2 + d6);
        doubleLargeArray3.setDouble(j9, d - d5);
        doubleLargeArray3.setDouble(j16, d2 - d6);
        doubleLargeArray3.setDouble(j10, d3 - d8);
        doubleLargeArray3.setDouble(j17, d4 + d7);
        doubleLargeArray3.setDouble(j11, d3 + d8);
        doubleLargeArray3.setDouble(j18, d4 - d7);
        double d9 = doubleLargeArray4.getDouble(j3 + 1);
        long j19 = 2;
        double d10 = doubleLargeArray4.getDouble(j3 + 2);
        double d11 = doubleLargeArray4.getDouble(j3 + 3);
        double d12 = 1.0d;
        double d13 = d9;
        long j20 = 0;
        int i = 2;
        double d14 = 0.0d;
        double d15 = 0.0d;
        double d16 = 1.0d;
        while (true) {
            long j21 = (long) i;
            if (j21 < j15 - j19) {
                j20 += 4;
                long j22 = j3 + j20;
                double d17 = (d12 + doubleLargeArray4.getDouble(j22)) * d10;
                int i2 = i;
                long j23 = j22 + 1;
                double d18 = (d14 + doubleLargeArray4.getDouble(j23)) * d10;
                double d19 = d10;
                long j24 = j22 + 2;
                double d20 = (d16 + doubleLargeArray4.getDouble(j24)) * d11;
                double d21 = d17;
                long j25 = j22 + 3;
                double d22 = (d15 + doubleLargeArray4.getDouble(j25)) * d11;
                double d23 = doubleLargeArray4.getDouble(j22);
                double d24 = doubleLargeArray4.getDouble(j23);
                double d25 = doubleLargeArray4.getDouble(j24);
                long j26 = j21 + j13;
                long j27 = j26 + j13;
                long j28 = j27 + j13;
                double d26 = d11;
                long j29 = j4 + j26;
                double d27 = doubleLargeArray4.getDouble(j25);
                long j30 = j4 + j27;
                double d28 = d25;
                long j31 = j4 + j28;
                double d29 = d24;
                long j32 = j4 + j21;
                double d30 = doubleLargeArray3.getDouble(j32) + doubleLargeArray3.getDouble(j30);
                long j33 = j32 + 1;
                long j34 = j30 + 1;
                double d31 = doubleLargeArray3.getDouble(j33) + doubleLargeArray3.getDouble(j34);
                double d32 = doubleLargeArray3.getDouble(j32) - doubleLargeArray3.getDouble(j30);
                double d33 = doubleLargeArray3.getDouble(j33) - doubleLargeArray3.getDouble(j34);
                double d34 = d23;
                long j35 = j32 + 2;
                long j36 = j34;
                long j37 = j30 + 2;
                double d35 = doubleLargeArray3.getDouble(j35) + doubleLargeArray3.getDouble(j37);
                long j38 = j33;
                long j39 = j32 + 3;
                long j40 = j32;
                long j41 = j30 + 3;
                double d36 = doubleLargeArray3.getDouble(j39) + doubleLargeArray3.getDouble(j41);
                double d37 = doubleLargeArray3.getDouble(j35) - doubleLargeArray3.getDouble(j37);
                double d38 = doubleLargeArray3.getDouble(j39) - doubleLargeArray3.getDouble(j41);
                double d39 = doubleLargeArray3.getDouble(j29) + doubleLargeArray3.getDouble(j31);
                long j42 = j41;
                long j43 = j29 + 1;
                long j44 = j37;
                long j45 = j31 + 1;
                double d40 = doubleLargeArray3.getDouble(j43) + doubleLargeArray3.getDouble(j45);
                double d41 = doubleLargeArray3.getDouble(j29) - doubleLargeArray3.getDouble(j31);
                double d42 = doubleLargeArray3.getDouble(j43) - doubleLargeArray3.getDouble(j45);
                long j46 = j45;
                long j47 = j29 + 2;
                long j48 = j30;
                long j49 = j31 + 2;
                double d43 = doubleLargeArray3.getDouble(j47) + doubleLargeArray3.getDouble(j49);
                long j50 = j43;
                long j51 = j29 + 3;
                long j52 = j29;
                long j53 = j31 + 3;
                double d44 = doubleLargeArray3.getDouble(j51) + doubleLargeArray3.getDouble(j53);
                double d45 = doubleLargeArray3.getDouble(j47) - doubleLargeArray3.getDouble(j49);
                double d46 = doubleLargeArray3.getDouble(j51) - doubleLargeArray3.getDouble(j53);
                doubleLargeArray3.setDouble(j40, d30 + d39);
                doubleLargeArray3.setDouble(j38, d31 + d40);
                doubleLargeArray3.setDouble(j35, d35 + d43);
                doubleLargeArray3.setDouble(j39, d36 + d44);
                doubleLargeArray3.setDouble(j52, d30 - d39);
                doubleLargeArray3.setDouble(j50, d31 - d40);
                doubleLargeArray3.setDouble(j47, d35 - d43);
                doubleLargeArray3.setDouble(j51, d36 - d44);
                double d47 = d32 - d42;
                double d48 = d33 + d41;
                doubleLargeArray3.setDouble(j48, (d21 * d47) - (d18 * d48));
                doubleLargeArray3.setDouble(j36, (d21 * d48) + (d47 * d18));
                double d49 = d37 - d46;
                double d50 = d38 + d45;
                doubleLargeArray3.setDouble(j44, (d34 * d49) - (d29 * d50));
                doubleLargeArray3.setDouble(j42, (d34 * d50) + (d29 * d49));
                double d51 = d32 + d42;
                double d52 = d33 - d41;
                doubleLargeArray3.setDouble(j31, (d20 * d51) + (d22 * d52));
                doubleLargeArray3.setDouble(j46, (d52 * d20) - (d51 * d22));
                double d53 = d37 + d46;
                double d54 = d38 - d45;
                doubleLargeArray3.setDouble(j49, (d28 * d53) + (d27 * d54));
                doubleLargeArray3.setDouble(j53, (d28 * d54) - (d27 * d53));
                long j54 = j13 - j21;
                long j55 = j54 + j13;
                long j56 = j55 + j13;
                long j57 = j56 + j13;
                long j58 = j2 + j54;
                long j59 = j2 + j55;
                long j60 = j2 + j56;
                long j61 = j2 + j57;
                long j62 = j58 + 1;
                double d55 = doubleLargeArray3.getDouble(j58) + doubleLargeArray3.getDouble(j60);
                long j63 = j60 + 1;
                double d56 = doubleLargeArray3.getDouble(j62) + doubleLargeArray3.getDouble(j63);
                double d57 = doubleLargeArray3.getDouble(j58) - doubleLargeArray3.getDouble(j60);
                double d58 = doubleLargeArray3.getDouble(j62) - doubleLargeArray3.getDouble(j63);
                long j64 = j63;
                long j65 = j58 - 2;
                long j66 = j62;
                long j67 = j60 - 2;
                double d59 = doubleLargeArray3.getDouble(j65) + doubleLargeArray3.getDouble(j67);
                double d60 = d56;
                long j68 = j58 - 1;
                long j69 = j58;
                long j70 = j60 - 1;
                double d61 = doubleLargeArray3.getDouble(j68) + doubleLargeArray3.getDouble(j70);
                double d62 = doubleLargeArray3.getDouble(j65) - doubleLargeArray3.getDouble(j67);
                double d63 = doubleLargeArray3.getDouble(j68) - doubleLargeArray3.getDouble(j70);
                double d64 = doubleLargeArray3.getDouble(j59) + doubleLargeArray3.getDouble(j61);
                long j71 = j70;
                long j72 = j59 + 1;
                long j73 = j67;
                long j74 = j61 + 1;
                double d65 = doubleLargeArray3.getDouble(j72) + doubleLargeArray3.getDouble(j74);
                double d66 = doubleLargeArray3.getDouble(j59) - doubleLargeArray3.getDouble(j61);
                double d67 = doubleLargeArray3.getDouble(j72) - doubleLargeArray3.getDouble(j74);
                long j75 = j74;
                long j76 = j59 - 2;
                long j77 = j60;
                long j78 = j61 - 2;
                double d68 = doubleLargeArray3.getDouble(j76) + doubleLargeArray3.getDouble(j78);
                long j79 = j72;
                long j80 = j59 - 1;
                long j81 = j59;
                long j82 = j61 - 1;
                double d69 = doubleLargeArray3.getDouble(j80) + doubleLargeArray3.getDouble(j82);
                double d70 = doubleLargeArray3.getDouble(j76) - doubleLargeArray3.getDouble(j78);
                double d71 = doubleLargeArray3.getDouble(j80) - doubleLargeArray3.getDouble(j82);
                long j83 = j82;
                long j84 = j78;
                doubleLargeArray3.setDouble(j69, d55 + d64);
                doubleLargeArray3.setDouble(j66, d60 + d65);
                doubleLargeArray3.setDouble(j65, d59 + d68);
                doubleLargeArray3.setDouble(j68, d61 + d69);
                doubleLargeArray3.setDouble(j81, d55 - d64);
                doubleLargeArray3.setDouble(j79, d60 - d65);
                doubleLargeArray3.setDouble(j76, d59 - d68);
                doubleLargeArray3.setDouble(j80, d61 - d69);
                double d72 = d57 - d67;
                double d73 = d58 + d66;
                doubleLargeArray3.setDouble(j77, (d18 * d72) - (d21 * d73));
                doubleLargeArray3.setDouble(j64, (d18 * d73) + (d21 * d72));
                double d74 = d62 - d71;
                double d75 = d63 + d70;
                doubleLargeArray3.setDouble(j73, (d29 * d74) - (d34 * d75));
                doubleLargeArray3.setDouble(j71, (d29 * d75) + (d74 * d34));
                double d76 = d57 + d67;
                double d77 = d58 - d66;
                doubleLargeArray3.setDouble(j61, (d22 * d76) + (d20 * d77));
                doubleLargeArray3.setDouble(j75, (d22 * d77) - (d20 * d76));
                double d78 = d62 + d71;
                double d79 = d63 - d70;
                doubleLargeArray3.setDouble(j84, (d27 * d78) + (d28 * d79));
                doubleLargeArray3.setDouble(j83, (d27 * d79) - (d28 * d78));
                i = i2 + 4;
                j4 = j2;
                doubleLargeArray4 = doubleLargeArray2;
                d10 = d19;
                d15 = d27;
                d16 = d28;
                d14 = d29;
                d11 = d26;
                d12 = d34;
                j19 = 2;
            } else {
                double d80 = d10;
                double d81 = d11;
                double d82 = d80 * (d12 + d13);
                double d83 = d80 * (d14 + d13);
                long j85 = j15 + j13;
                long j86 = j85 + j13;
                long j87 = j86 + j13;
                double d84 = d81 * (d15 - d13);
                long j88 = j2 + j15;
                long j89 = j2 + j85;
                long j90 = j2 + j86;
                long j91 = j2 + j87;
                double d85 = d81 * (d16 - d13);
                long j92 = j88 - 2;
                double d86 = d83;
                long j93 = j90 - 2;
                double d87 = doubleLargeArray3.getDouble(j92) + doubleLargeArray3.getDouble(j93);
                double d88 = d82;
                long j94 = j88 - 1;
                long j95 = j88;
                long j96 = j90 - 1;
                double d89 = doubleLargeArray3.getDouble(j94) + doubleLargeArray3.getDouble(j96);
                double d90 = doubleLargeArray3.getDouble(j92) - doubleLargeArray3.getDouble(j93);
                double d91 = doubleLargeArray3.getDouble(j94) - doubleLargeArray3.getDouble(j96);
                long j97 = j90;
                long j98 = j89 - 2;
                long j99 = j96;
                long j100 = j91 - 2;
                double d92 = doubleLargeArray3.getDouble(j98) + doubleLargeArray3.getDouble(j100);
                long j101 = j93;
                long j102 = j89 - 1;
                long j103 = j89;
                long j104 = j91 - 1;
                double d93 = doubleLargeArray3.getDouble(j102) + doubleLargeArray3.getDouble(j104);
                double d94 = doubleLargeArray3.getDouble(j98) - doubleLargeArray3.getDouble(j100);
                double d95 = doubleLargeArray3.getDouble(j102) - doubleLargeArray3.getDouble(j104);
                doubleLargeArray3.setDouble(j92, d87 + d92);
                doubleLargeArray3.setDouble(j94, d89 + d93);
                doubleLargeArray3.setDouble(j98, d87 - d92);
                doubleLargeArray3.setDouble(j102, d89 - d93);
                double d96 = d90 - d95;
                double d97 = d91 + d94;
                doubleLargeArray3.setDouble(j101, (d88 * d96) - (d86 * d97));
                doubleLargeArray3.setDouble(j99, (d88 * d97) + (d96 * d86));
                double d98 = d90 + d95;
                double d99 = d91 - d94;
                double d100 = d84;
                doubleLargeArray3.setDouble(j100, (d85 * d98) + (d100 * d99));
                doubleLargeArray3.setDouble(j104, (d85 * d99) - (d100 * d98));
                long j105 = j95;
                long j106 = j97;
                double d101 = doubleLargeArray3.getDouble(j105) + doubleLargeArray3.getDouble(j106);
                long j107 = j105 + 1;
                long j108 = j106 + 1;
                double d102 = doubleLargeArray3.getDouble(j107) + doubleLargeArray3.getDouble(j108);
                double d103 = doubleLargeArray3.getDouble(j105) - doubleLargeArray3.getDouble(j106);
                double d104 = doubleLargeArray3.getDouble(j107) - doubleLargeArray3.getDouble(j108);
                long j109 = j103;
                long j110 = j108;
                long j111 = j91;
                double d105 = doubleLargeArray3.getDouble(j109) + doubleLargeArray3.getDouble(j111);
                long j112 = j109 + 1;
                long j113 = j107;
                long j114 = j111 + 1;
                double d106 = doubleLargeArray3.getDouble(j112) + doubleLargeArray3.getDouble(j114);
                double d107 = doubleLargeArray3.getDouble(j109) - doubleLargeArray3.getDouble(j111);
                double d108 = doubleLargeArray3.getDouble(j112) - doubleLargeArray3.getDouble(j114);
                long j115 = j114;
                doubleLargeArray3.setDouble(j105, d101 + d105);
                long j116 = j105;
                doubleLargeArray3.setDouble(j113, d102 + d106);
                doubleLargeArray3.setDouble(j109, d101 - d105);
                doubleLargeArray3.setDouble(j112, d102 - d106);
                double d109 = d103 - d108;
                double d110 = d104 + d107;
                long j117 = j97;
                doubleLargeArray3.setDouble(j117, (d109 - d110) * d13);
                doubleLargeArray3.setDouble(j110, d13 * (d110 + d109));
                double d111 = d103 + d108;
                double d112 = d104 - d107;
                double d113 = -d13;
                doubleLargeArray3.setDouble(j111, (d111 + d112) * d113);
                doubleLargeArray3.setDouble(j115, d113 * (d112 - d111));
                long j118 = j116 + 2;
                long j119 = j117 + 2;
                double d114 = doubleLargeArray3.getDouble(j118) + doubleLargeArray3.getDouble(j119);
                long j120 = j116 + 3;
                long j121 = j117 + 3;
                double d115 = doubleLargeArray3.getDouble(j120) + doubleLargeArray3.getDouble(j121);
                double d116 = doubleLargeArray3.getDouble(j118) - doubleLargeArray3.getDouble(j119);
                double d117 = doubleLargeArray3.getDouble(j120) - doubleLargeArray3.getDouble(j121);
                long j122 = j121;
                long j123 = j109 + 2;
                long j124 = j119;
                long j125 = j111 + 2;
                double d118 = doubleLargeArray3.getDouble(j123) + doubleLargeArray3.getDouble(j125);
                long j126 = j109 + 3;
                long j127 = j111 + 3;
                double d119 = doubleLargeArray3.getDouble(j126) + doubleLargeArray3.getDouble(j127);
                double d120 = doubleLargeArray3.getDouble(j123) - doubleLargeArray3.getDouble(j125);
                double d121 = doubleLargeArray3.getDouble(j126) - doubleLargeArray3.getDouble(j127);
                double d122 = d114;
                doubleLargeArray3.setDouble(j118, d122 + d118);
                doubleLargeArray3.setDouble(j120, d115 + d119);
                doubleLargeArray3.setDouble(j123, d122 - d118);
                doubleLargeArray3.setDouble(j126, d115 - d119);
                double d123 = d116 - d121;
                double d124 = d117 + d120;
                doubleLargeArray3.setDouble(j124, (d86 * d123) - (d88 * d124));
                doubleLargeArray3.setDouble(j122, (d124 * d86) + (d88 * d123));
                double d125 = d116 + d121;
                double d126 = d117 - d120;
                double d127 = d84;
                doubleLargeArray3.setDouble(j125, (d127 * d125) + (d85 * d126));
                doubleLargeArray3.setDouble(j127, (d127 * d126) - (d85 * d125));
                return;
            }
        }
    }

    public static void cftb1st(int i, double[] dArr, int i2, double[] dArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        double d = dArr[i2];
        double d2 = dArr[i9];
        double d3 = d + d2;
        int i11 = i2 + 1;
        double d4 = dArr[i11];
        int i12 = i9 + 1;
        double d5 = dArr[i12];
        double d6 = (-d4) - d5;
        double d7 = d - d2;
        double d8 = (-d4) + d5;
        double d9 = dArr[i8];
        double d10 = dArr[i10];
        double d11 = d9 + d10;
        int i13 = i8 + 1;
        double d12 = dArr[i13];
        int i14 = i10 + 1;
        double d13 = dArr[i14];
        double d14 = d12 + d13;
        double d15 = d9 - d10;
        double d16 = d12 - d13;
        dArr[i2] = d3 + d11;
        dArr[i11] = d6 - d14;
        dArr[i8] = d3 - d11;
        dArr[i13] = d6 + d14;
        dArr[i9] = d7 + d16;
        dArr[i12] = d8 + d15;
        dArr[i10] = d7 - d16;
        dArr[i14] = d8 - d15;
        double d17 = dArr2[i3 + 1];
        double d18 = dArr2[i3 + 2];
        double d19 = dArr2[i3 + 3];
        int i15 = 2;
        double d20 = 1.0d;
        double d21 = 0.0d;
        int i16 = 0;
        double d22 = 1.0d;
        double d23 = 0.0d;
        while (true) {
            double d24 = d17;
            if (i15 < i4 - 2) {
                i16 += 4;
                int i17 = i3 + i16;
                double d25 = dArr2[i17];
                double d26 = (d20 + d25) * d18;
                double d27 = dArr2[i17 + 1];
                double d28 = (d23 + d27) * d18;
                double d29 = dArr2[i17 + 2];
                double d30 = (d22 + d29) * d19;
                double d31 = dArr2[i17 + 3];
                double d32 = (d21 + d31) * d19;
                int i18 = i15 + i5;
                int i19 = i18 + i5;
                int i20 = i19 + i5;
                int i21 = i2 + i18;
                int i22 = i2 + i19;
                int i23 = i2 + i20;
                int i24 = i2 + i15;
                double d33 = dArr[i24];
                double d34 = dArr[i22];
                double d35 = d33 + d34;
                int i25 = i24 + 1;
                double d36 = d19;
                double d37 = dArr[i25];
                double d38 = d18;
                int i26 = i22 + 1;
                double d39 = dArr[i26];
                double d40 = (-d37) - d39;
                double d41 = d33 - d34;
                double d42 = (-d37) + d39;
                int i27 = i24 + 2;
                double d43 = dArr[i27];
                int i28 = i22 + 2;
                double d44 = dArr[i28];
                double d45 = d43 + d44;
                int i29 = i24 + 3;
                int i30 = i4;
                int i31 = i5;
                double d46 = dArr[i29];
                double d47 = d31;
                int i32 = i22 + 3;
                double d48 = dArr[i32];
                double d49 = (-d46) - d48;
                double d50 = d43 - d44;
                double d51 = (-d46) + d48;
                double d52 = dArr[i21];
                double d53 = dArr[i23];
                double d54 = d52 + d53;
                int i33 = i21 + 1;
                double d55 = dArr[i33];
                int i34 = i23 + 1;
                double d56 = dArr[i34];
                double d57 = d55 + d56;
                double d58 = d52 - d53;
                double d59 = d55 - d56;
                int i35 = i21 + 2;
                double d60 = dArr[i35];
                int i36 = i23 + 2;
                double d61 = dArr[i36];
                double d62 = d60 + d61;
                int i37 = i21 + 3;
                double d63 = dArr[i37];
                int i38 = i23 + 3;
                double d64 = dArr[i38];
                double d65 = d63 + d64;
                double d66 = d60 - d61;
                double d67 = d63 - d64;
                dArr[i24] = d35 + d54;
                dArr[i25] = d40 - d57;
                dArr[i27] = d45 + d62;
                dArr[i29] = d49 - d65;
                dArr[i21] = d35 - d54;
                dArr[i33] = d40 + d57;
                dArr[i35] = d45 - d62;
                dArr[i37] = d49 + d65;
                double d68 = d41 + d59;
                double d69 = d42 + d58;
                dArr[i22] = (d26 * d68) - (d28 * d69);
                dArr[i26] = (d69 * d26) + (d68 * d28);
                double d70 = d50 + d67;
                double d71 = d51 + d66;
                dArr[i28] = (d25 * d70) - (d27 * d71);
                dArr[i32] = (d71 * d25) + (d70 * d27);
                double d72 = d41 - d59;
                double d73 = d42 - d58;
                dArr[i23] = (d30 * d72) + (d32 * d73);
                dArr[i34] = (d73 * d30) - (d72 * d32);
                double d74 = d50 - d67;
                double d75 = d51 - d66;
                dArr[i36] = (d29 * d74) + (d47 * d75);
                dArr[i38] = (d75 * d29) - (d47 * d74);
                int i39 = i31 - i15;
                int i40 = i39 + i31;
                int i41 = i40 + i31;
                int i42 = i41 + i31;
                int i43 = i2 + i39;
                int i44 = i2 + i40;
                int i45 = i2 + i41;
                int i46 = i2 + i42;
                double d76 = dArr[i43];
                double d77 = dArr[i45];
                double d78 = d76 + d77;
                int i47 = i43 + 1;
                double d79 = d30;
                double d80 = dArr[i47];
                int i48 = i15;
                double d81 = d26;
                int i49 = i45 + 1;
                double d82 = dArr[i49];
                double d83 = (-d80) - d82;
                double d84 = d76 - d77;
                double d85 = (-d80) + d82;
                int i50 = i43 - 2;
                double d86 = dArr[i50];
                int i51 = i45 - 2;
                double d87 = dArr[i51];
                double d88 = d86 + d87;
                int i52 = i43 - 1;
                double d89 = d28;
                int i53 = i51;
                double d90 = dArr[i52];
                double d91 = d32;
                int i54 = i53;
                int i55 = i45 - 1;
                double d92 = dArr[i55];
                double d93 = (-d90) - d92;
                double d94 = d86 - d87;
                double d95 = (-d90) + d92;
                double d96 = dArr[i44];
                double d97 = dArr[i46];
                double d98 = d96 + d97;
                int i56 = i44 + 1;
                double d99 = dArr[i56];
                int i57 = i46 + 1;
                double d100 = dArr[i57];
                double d101 = d99 + d100;
                double d102 = d96 - d97;
                double d103 = d99 - d100;
                int i58 = i44 - 2;
                double d104 = dArr[i58];
                int i59 = i46 - 2;
                double d105 = dArr[i59];
                double d106 = d104 + d105;
                int i60 = i44 - 1;
                double d107 = dArr[i60];
                int i61 = i46 - 1;
                double d108 = dArr[i61];
                double d109 = d107 + d108;
                double d110 = d104 - d105;
                double d111 = d107 - d108;
                dArr[i43] = d78 + d98;
                dArr[i47] = d83 - d101;
                dArr[i50] = d88 + d106;
                dArr[i52] = d93 - d109;
                dArr[i44] = d78 - d98;
                dArr[i56] = d83 + d101;
                dArr[i58] = d88 - d106;
                dArr[i60] = d93 + d109;
                double d112 = d84 + d103;
                double d113 = d85 + d102;
                dArr[i45] = (d89 * d112) - (d81 * d113);
                dArr[i49] = (d113 * d89) + (d112 * d81);
                double d114 = d94 + d111;
                double d115 = d95 + d110;
                dArr[i54] = (d27 * d114) - (d25 * d115);
                dArr[i55] = (d115 * d27) + (d114 * d25);
                double d116 = d84 - d103;
                double d117 = d85 - d102;
                dArr[i46] = (d91 * d116) + (d79 * d117);
                dArr[i57] = (d91 * d117) - (d79 * d116);
                double d118 = d94 - d111;
                double d119 = d95 - d110;
                dArr[i59] = (d47 * d118) + (d29 * d119);
                dArr[i61] = (d47 * d119) - (d118 * d29);
                i15 = i48 + 4;
                i4 = i30;
                d17 = d24;
                d20 = d25;
                d23 = d27;
                d22 = d29;
                d19 = d36;
                d18 = d38;
                i5 = i31;
                d21 = d47;
            } else {
                int i62 = i4;
                int i63 = i5;
                double d120 = d18;
                double d121 = d19;
                double d122 = d120 * (d20 + d24);
                double d123 = d120 * (d23 + d24);
                double d124 = d121 * (d22 - d24);
                double d125 = d121 * (d21 - d24);
                int i64 = i62 + i63;
                int i65 = i64 + i63;
                int i66 = i65 + i63;
                int i67 = i2 + i62;
                int i68 = i2 + i64;
                int i69 = i2 + i65;
                int i70 = i2 + i66;
                int i71 = i67 - 2;
                double d126 = dArr[i71];
                int i72 = i69 - 2;
                double d127 = dArr[i72];
                double d128 = d126 + d127;
                int i73 = i67 - 1;
                double d129 = d125;
                double d130 = dArr[i73];
                double d131 = d124;
                int i74 = i69 - 1;
                double d132 = dArr[i74];
                double d133 = (-d130) - d132;
                double d134 = d126 - d127;
                double d135 = (-d130) + d132;
                int i75 = i68 - 2;
                double d136 = dArr[i75];
                int i76 = i70 - 2;
                double d137 = dArr[i76];
                double d138 = d136 + d137;
                int i77 = i68 - 1;
                double d139 = dArr[i77];
                int i78 = i70 - 1;
                double d140 = dArr[i78];
                double d141 = d139 + d140;
                double d142 = d136 - d137;
                double d143 = d139 - d140;
                dArr[i71] = d128 + d138;
                dArr[i73] = d133 - d141;
                dArr[i75] = d128 - d138;
                dArr[i77] = d133 + d141;
                double d144 = d134 + d143;
                double d145 = d135 + d142;
                dArr[i72] = (d122 * d144) - (d123 * d145);
                dArr[i74] = (d145 * d122) + (d144 * d123);
                double d146 = d134 - d143;
                double d147 = d135 - d142;
                double d148 = d129;
                dArr[i76] = (d131 * d146) + (d148 * d147);
                dArr[i78] = (d131 * d147) - (d148 * d146);
                double d149 = dArr[i67];
                double d150 = dArr[i69];
                double d151 = d149 + d150;
                int i79 = i67 + 1;
                double d152 = d122;
                double d153 = dArr[i79];
                double d154 = d123;
                int i80 = i69 + 1;
                double d155 = dArr[i80];
                double d156 = (-d153) - d155;
                double d157 = d149 - d150;
                double d158 = (-d153) + d155;
                double d159 = dArr[i68];
                double d160 = dArr[i70];
                double d161 = d159 + d160;
                int i81 = i68 + 1;
                double d162 = dArr[i81];
                int i82 = i70 + 1;
                double d163 = dArr[i82];
                double d164 = d162 + d163;
                double d165 = d159 - d160;
                double d166 = d162 - d163;
                dArr[i67] = d151 + d161;
                dArr[i79] = d156 - d164;
                dArr[i68] = d151 - d161;
                dArr[i81] = d156 + d164;
                double d167 = d157 + d166;
                double d168 = d158 + d165;
                dArr[i69] = (d167 - d168) * d24;
                dArr[i80] = d24 * (d168 + d167);
                double d169 = d157 - d166;
                double d170 = d158 - d165;
                double d171 = -d24;
                dArr[i70] = (d169 + d170) * d171;
                dArr[i82] = d171 * (d170 - d169);
                int i83 = i67 + 2;
                double d172 = dArr[i83];
                int i84 = i69 + 2;
                double d173 = dArr[i84];
                double d174 = d172 + d173;
                int i85 = i67 + 3;
                double d175 = dArr[i85];
                double d176 = d148;
                int i86 = i69 + 3;
                double d177 = dArr[i86];
                double d178 = (-d175) - d177;
                double d179 = d172 - d173;
                double d180 = (-d175) + d177;
                int i87 = i68 + 2;
                double d181 = dArr[i87];
                int i88 = i70 + 2;
                double d182 = dArr[i88];
                double d183 = d181 + d182;
                int i89 = i68 + 3;
                double d184 = dArr[i89];
                int i90 = i70 + 3;
                double d185 = dArr[i90];
                double d186 = d184 + d185;
                double d187 = d181 - d182;
                double d188 = d184 - d185;
                dArr[i83] = d174 + d183;
                dArr[i85] = d178 - d186;
                dArr[i87] = d174 - d183;
                dArr[i89] = d178 + d186;
                double d189 = d179 + d188;
                double d190 = d180 + d187;
                double d191 = d152;
                dArr[i84] = (d154 * d189) - (d191 * d190);
                dArr[i86] = (d190 * d154) + (d189 * d191);
                double d192 = d179 - d188;
                double d193 = d180 - d187;
                dArr[i88] = (d176 * d192) + (d131 * d193);
                dArr[i90] = (d176 * d193) - (d131 * d192);
                return;
            }
        }
    }

    public static void cftb1st(long j, DoubleLargeArray doubleLargeArray, long j2, DoubleLargeArray doubleLargeArray2, long j3) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j4 = j2;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j8 + j4;
        double d = doubleLargeArray.getDouble(j2) + doubleLargeArray3.getDouble(j10);
        long j12 = j4 + 1;
        long j13 = j6;
        long j14 = j5;
        long j15 = j10 + 1;
        double d2 = (-doubleLargeArray3.getDouble(j12)) - doubleLargeArray3.getDouble(j15);
        double d3 = doubleLargeArray.getDouble(j2) - doubleLargeArray3.getDouble(j10);
        long j16 = j10;
        double d4 = (-doubleLargeArray3.getDouble(j12)) + doubleLargeArray3.getDouble(j15);
        double d5 = doubleLargeArray3.getDouble(j9) + doubleLargeArray3.getDouble(j11);
        long j17 = j9 + 1;
        double d6 = d4;
        long j18 = j11 + 1;
        double d7 = doubleLargeArray3.getDouble(j17) + doubleLargeArray3.getDouble(j18);
        double d8 = doubleLargeArray3.getDouble(j9) - doubleLargeArray3.getDouble(j11);
        double d9 = doubleLargeArray3.getDouble(j17) - doubleLargeArray3.getDouble(j18);
        doubleLargeArray3.setDouble(j4, d + d5);
        doubleLargeArray3.setDouble(j12, d2 - d7);
        doubleLargeArray3.setDouble(j9, d - d5);
        doubleLargeArray3.setDouble(j17, d2 + d7);
        doubleLargeArray3.setDouble(j16, d3 + d9);
        doubleLargeArray3.setDouble(j15, d6 + d8);
        doubleLargeArray3.setDouble(j11, d3 - d9);
        doubleLargeArray3.setDouble(j18, d6 - d8);
        DoubleLargeArray doubleLargeArray5 = doubleLargeArray2;
        double d10 = doubleLargeArray5.getDouble(j3 + 1);
        double d11 = doubleLargeArray5.getDouble(j3 + 2);
        double d12 = doubleLargeArray5.getDouble(j3 + 3);
        double d13 = 0.0d;
        double d14 = 0.0d;
        long j19 = 0;
        double d15 = 1.0d;
        double d16 = 1.0d;
        long j20 = 2;
        for (long j21 = 2; j20 < j14 - j21; j21 = 2) {
            j19 += 4;
            long j22 = j3 + j19;
            double d17 = (d15 + doubleLargeArray5.getDouble(j22)) * d11;
            long j23 = j22 + 1;
            double d18 = (d13 + doubleLargeArray5.getDouble(j23)) * d11;
            double d19 = d11;
            long j24 = j22 + 2;
            double d20 = (d16 + doubleLargeArray5.getDouble(j24)) * d12;
            double d21 = d10;
            long j25 = j22 + 3;
            double d22 = (d14 + doubleLargeArray5.getDouble(j25)) * d12;
            double d23 = doubleLargeArray5.getDouble(j22);
            double d24 = doubleLargeArray5.getDouble(j23);
            double d25 = doubleLargeArray5.getDouble(j24);
            long j26 = j20 + j13;
            long j27 = j26 + j13;
            long j28 = j27 + j13;
            double d26 = d12;
            long j29 = j4 + j26;
            double d27 = doubleLargeArray5.getDouble(j25);
            long j30 = j4 + j27;
            double d28 = d25;
            long j31 = j4 + j28;
            double d29 = d24;
            long j32 = j4 + j20;
            double d30 = doubleLargeArray3.getDouble(j32) + doubleLargeArray3.getDouble(j30);
            long j33 = j32 + 1;
            long j34 = j20;
            double d31 = d23;
            long j35 = j30 + 1;
            double d32 = (-doubleLargeArray3.getDouble(j33)) - doubleLargeArray3.getDouble(j35);
            double d33 = doubleLargeArray3.getDouble(j32) - doubleLargeArray3.getDouble(j30);
            double d34 = d32;
            long j36 = j35;
            long j37 = j32 + 2;
            double d35 = (-doubleLargeArray3.getDouble(j33)) + doubleLargeArray3.getDouble(j35);
            long j38 = j30 + 2;
            double d36 = doubleLargeArray3.getDouble(j37) + doubleLargeArray3.getDouble(j38);
            long j39 = j33;
            long j40 = j32 + 3;
            long j41 = j32;
            long j42 = j30 + 3;
            double d37 = (-doubleLargeArray3.getDouble(j40)) - doubleLargeArray3.getDouble(j42);
            double d38 = doubleLargeArray3.getDouble(j37) - doubleLargeArray3.getDouble(j38);
            long j43 = j38;
            double d39 = (-doubleLargeArray3.getDouble(j40)) + doubleLargeArray3.getDouble(j42);
            long j44 = j42;
            long j45 = j31;
            double d40 = doubleLargeArray3.getDouble(j29) + doubleLargeArray3.getDouble(j45);
            double d41 = d39;
            long j46 = j29 + 1;
            long j47 = j30;
            long j48 = j45 + 1;
            double d42 = doubleLargeArray3.getDouble(j46) + doubleLargeArray3.getDouble(j48);
            double d43 = doubleLargeArray3.getDouble(j29) - doubleLargeArray3.getDouble(j45);
            double d44 = doubleLargeArray3.getDouble(j46) - doubleLargeArray3.getDouble(j48);
            long j49 = j48;
            long j50 = j29 + 2;
            long j51 = j46;
            long j52 = j45 + 2;
            double d45 = doubleLargeArray3.getDouble(j50) + doubleLargeArray3.getDouble(j52);
            long j53 = j40;
            long j54 = j29 + 3;
            long j55 = j29;
            long j56 = j45 + 3;
            double d46 = doubleLargeArray3.getDouble(j54) + doubleLargeArray3.getDouble(j56);
            double d47 = doubleLargeArray3.getDouble(j50) - doubleLargeArray3.getDouble(j52);
            double d48 = doubleLargeArray3.getDouble(j54) - doubleLargeArray3.getDouble(j56);
            long j57 = j52;
            doubleLargeArray3.setDouble(j41, d30 + d40);
            doubleLargeArray3.setDouble(j39, d34 - d42);
            doubleLargeArray3.setDouble(j37, d36 + d45);
            doubleLargeArray3.setDouble(j53, d37 - d46);
            doubleLargeArray3.setDouble(j55, d30 - d40);
            doubleLargeArray3.setDouble(j51, d34 + d42);
            doubleLargeArray3.setDouble(j50, d36 - d45);
            doubleLargeArray3.setDouble(j54, d37 + d46);
            double d49 = d33 + d44;
            double d50 = d35 + d43;
            doubleLargeArray3.setDouble(j47, (d17 * d49) - (d18 * d50));
            doubleLargeArray3.setDouble(j36, (d50 * d17) + (d49 * d18));
            double d51 = d38 + d48;
            double d52 = d41 + d47;
            doubleLargeArray3.setDouble(j43, (d31 * d51) - (d29 * d52));
            doubleLargeArray3.setDouble(j44, (d31 * d52) + (d29 * d51));
            double d53 = d33 - d44;
            double d54 = d35 - d43;
            doubleLargeArray3.setDouble(j45, (d20 * d53) + (d22 * d54));
            doubleLargeArray3.setDouble(j49, (d54 * d20) - (d53 * d22));
            double d55 = d38 - d48;
            double d56 = d41 - d47;
            doubleLargeArray3.setDouble(j57, (d28 * d55) + (d27 * d56));
            doubleLargeArray3.setDouble(j56, (d28 * d56) - (d27 * d55));
            long j58 = j13 - j34;
            long j59 = j58 + j13;
            long j60 = j59 + j13;
            long j61 = j60 + j13;
            long j62 = j2 + j58;
            long j63 = j2 + j59;
            long j64 = j2 + j60;
            long j65 = j62 + 1;
            double d57 = doubleLargeArray3.getDouble(j62) + doubleLargeArray3.getDouble(j64);
            long j66 = j64 + 1;
            double d58 = (-doubleLargeArray3.getDouble(j65)) - doubleLargeArray3.getDouble(j66);
            double d59 = doubleLargeArray3.getDouble(j62) - doubleLargeArray3.getDouble(j64);
            double d60 = d58;
            long j67 = j66;
            long j68 = j62 - 2;
            double d61 = (-doubleLargeArray3.getDouble(j65)) + doubleLargeArray3.getDouble(j66);
            long j69 = j64 - 2;
            double d62 = doubleLargeArray3.getDouble(j68) + doubleLargeArray3.getDouble(j69);
            long j70 = j65;
            long j71 = j62 - 1;
            long j72 = j62;
            long j73 = j2 + j61;
            long j74 = j64 - 1;
            double d63 = (-doubleLargeArray3.getDouble(j71)) - doubleLargeArray3.getDouble(j74);
            double d64 = doubleLargeArray3.getDouble(j68) - doubleLargeArray3.getDouble(j69);
            long j75 = j69;
            double d65 = (-doubleLargeArray3.getDouble(j71)) + doubleLargeArray3.getDouble(j74);
            long j76 = j74;
            long j77 = j73;
            double d66 = doubleLargeArray3.getDouble(j63) + doubleLargeArray3.getDouble(j77);
            double d67 = d65;
            long j78 = j63 + 1;
            long j79 = j64;
            long j80 = j77 + 1;
            double d68 = doubleLargeArray3.getDouble(j78) + doubleLargeArray3.getDouble(j80);
            double d69 = doubleLargeArray3.getDouble(j63) - doubleLargeArray3.getDouble(j77);
            double d70 = doubleLargeArray3.getDouble(j78) - doubleLargeArray3.getDouble(j80);
            long j81 = j80;
            long j82 = j63 - 2;
            long j83 = j78;
            long j84 = j77 - 2;
            double d71 = doubleLargeArray3.getDouble(j82) + doubleLargeArray3.getDouble(j84);
            long j85 = j71;
            long j86 = j63 - 1;
            long j87 = j63;
            long j88 = j77 - 1;
            double d72 = doubleLargeArray3.getDouble(j86) + doubleLargeArray3.getDouble(j88);
            double d73 = doubleLargeArray3.getDouble(j82) - doubleLargeArray3.getDouble(j84);
            double d74 = doubleLargeArray3.getDouble(j86) - doubleLargeArray3.getDouble(j88);
            long j89 = j88;
            long j90 = j84;
            doubleLargeArray3.setDouble(j72, d57 + d66);
            doubleLargeArray3.setDouble(j70, d60 - d68);
            doubleLargeArray3.setDouble(j68, d62 + d71);
            doubleLargeArray3.setDouble(j85, d63 - d72);
            doubleLargeArray3.setDouble(j87, d57 - d66);
            doubleLargeArray3.setDouble(j83, d60 + d68);
            doubleLargeArray3.setDouble(j82, d62 - d71);
            doubleLargeArray3.setDouble(j86, d63 + d72);
            double d75 = d59 + d70;
            double d76 = d61 + d69;
            doubleLargeArray3.setDouble(j79, (d18 * d75) - (d17 * d76));
            doubleLargeArray3.setDouble(j67, (d18 * d76) + (d17 * d75));
            double d77 = d64 + d74;
            double d78 = d67 + d73;
            doubleLargeArray3.setDouble(j75, (d29 * d77) - (d31 * d78));
            doubleLargeArray3.setDouble(j76, (d29 * d78) + (d77 * d31));
            double d79 = d59 - d70;
            double d80 = d61 - d69;
            doubleLargeArray3.setDouble(j77, (d22 * d79) + (d20 * d80));
            doubleLargeArray3.setDouble(j81, (d22 * d80) - (d20 * d79));
            double d81 = d64 - d74;
            double d82 = d67 - d73;
            doubleLargeArray3.setDouble(j90, (d27 * d81) + (d28 * d82));
            doubleLargeArray3.setDouble(j89, (d27 * d82) - (d28 * d81));
            j20 = j34 + 4;
            j4 = j2;
            doubleLargeArray5 = doubleLargeArray2;
            d10 = d21;
            d11 = d19;
            d14 = d27;
            d16 = d28;
            d13 = d29;
            d12 = d26;
            d15 = d31;
        }
        double d83 = d10;
        double d84 = d11;
        double d85 = d12;
        long j91 = j14 + j13;
        long j92 = j91 + j13;
        long j93 = j92 + j13;
        double d86 = d85 * (d14 - d83);
        long j94 = j2 + j14;
        long j95 = j2 + j91;
        long j96 = j2 + j92;
        double d87 = d85 * (d16 - d83);
        long j97 = j94 - 2;
        double d88 = d84 * (d13 + d83);
        long j98 = j96 - 2;
        double d89 = doubleLargeArray3.getDouble(j97) + doubleLargeArray3.getDouble(j98);
        double d90 = d84 * (d15 + d83);
        long j99 = j94 - 1;
        long j100 = j94;
        long j101 = j2 + j93;
        long j102 = j96 - 1;
        double d91 = (-doubleLargeArray3.getDouble(j99)) - doubleLargeArray3.getDouble(j102);
        double d92 = doubleLargeArray3.getDouble(j97) - doubleLargeArray3.getDouble(j98);
        long j103 = j96;
        long j104 = j102;
        long j105 = j95 - 2;
        long j106 = j98;
        long j107 = j101;
        double d93 = (-doubleLargeArray3.getDouble(j99)) + doubleLargeArray3.getDouble(j102);
        long j108 = j107 - 2;
        double d94 = doubleLargeArray3.getDouble(j105) + doubleLargeArray3.getDouble(j108);
        long j109 = j99;
        long j110 = j95 - 1;
        long j111 = j95;
        long j112 = j107 - 1;
        double d95 = doubleLargeArray3.getDouble(j110) + doubleLargeArray3.getDouble(j112);
        double d96 = doubleLargeArray3.getDouble(j105) - doubleLargeArray3.getDouble(j108);
        double d97 = doubleLargeArray3.getDouble(j110) - doubleLargeArray3.getDouble(j112);
        long j113 = j107;
        doubleLargeArray3.setDouble(j97, d89 + d94);
        doubleLargeArray3.setDouble(j109, d91 - d95);
        doubleLargeArray3.setDouble(j105, d89 - d94);
        doubleLargeArray3.setDouble(j110, d91 + d95);
        double d98 = d92 + d97;
        double d99 = d93;
        double d100 = d99 + d96;
        doubleLargeArray3.setDouble(j106, (d90 * d98) - (d88 * d100));
        doubleLargeArray3.setDouble(j104, (d100 * d90) + (d98 * d88));
        double d101 = d92 - d97;
        double d102 = d99 - d96;
        double d103 = d86;
        doubleLargeArray3.setDouble(j108, (d87 * d101) + (d103 * d102));
        doubleLargeArray3.setDouble(j112, (d87 * d102) - (d103 * d101));
        long j114 = j100;
        long j115 = j103;
        double d104 = doubleLargeArray3.getDouble(j114) + doubleLargeArray3.getDouble(j115);
        long j116 = j114 + 1;
        long j117 = j115 + 1;
        double d105 = (-doubleLargeArray3.getDouble(j116)) - doubleLargeArray3.getDouble(j117);
        double d106 = doubleLargeArray3.getDouble(j114) - doubleLargeArray3.getDouble(j115);
        double d107 = (-doubleLargeArray3.getDouble(j116)) + doubleLargeArray3.getDouble(j117);
        long j118 = j117;
        long j119 = j111;
        long j120 = j113;
        double d108 = doubleLargeArray3.getDouble(j119) + doubleLargeArray3.getDouble(j120);
        double d109 = d107;
        long j121 = j119 + 1;
        long j122 = j116;
        long j123 = j120 + 1;
        double d110 = doubleLargeArray3.getDouble(j121) + doubleLargeArray3.getDouble(j123);
        double d111 = doubleLargeArray3.getDouble(j119) - doubleLargeArray3.getDouble(j120);
        double d112 = doubleLargeArray3.getDouble(j121) - doubleLargeArray3.getDouble(j123);
        long j124 = j123;
        doubleLargeArray3.setDouble(j114, d104 + d108);
        long j125 = j114;
        doubleLargeArray3.setDouble(j122, d105 - d110);
        doubleLargeArray3.setDouble(j119, d104 - d108);
        doubleLargeArray3.setDouble(j121, d105 + d110);
        double d113 = d106 + d112;
        double d114 = d109 + d111;
        long j126 = j103;
        doubleLargeArray3.setDouble(j126, (d113 - d114) * d83);
        doubleLargeArray3.setDouble(j118, (d114 + d113) * d83);
        double d115 = d106 - d112;
        double d116 = d109 - d111;
        double d117 = -d83;
        doubleLargeArray3.setDouble(j120, (d115 + d116) * d117);
        doubleLargeArray3.setDouble(j124, d117 * (d116 - d115));
        long j127 = j125 + 2;
        long j128 = j126 + 2;
        double d118 = doubleLargeArray3.getDouble(j127) + doubleLargeArray3.getDouble(j128);
        long j129 = j125 + 3;
        long j130 = j126 + 3;
        double d119 = (-doubleLargeArray3.getDouble(j129)) - doubleLargeArray3.getDouble(j130);
        double d120 = doubleLargeArray3.getDouble(j127) - doubleLargeArray3.getDouble(j128);
        long j131 = j128;
        long j132 = j130;
        long j133 = j119 + 2;
        double d121 = (-doubleLargeArray3.getDouble(j129)) + doubleLargeArray3.getDouble(j130);
        long j134 = j113 + 2;
        double d122 = doubleLargeArray3.getDouble(j133) + doubleLargeArray3.getDouble(j134);
        long j135 = j119 + 3;
        double d123 = d120;
        long j136 = j113 + 3;
        double d124 = doubleLargeArray3.getDouble(j135) + doubleLargeArray3.getDouble(j136);
        double d125 = doubleLargeArray3.getDouble(j133) - doubleLargeArray3.getDouble(j134);
        double d126 = doubleLargeArray3.getDouble(j135) - doubleLargeArray3.getDouble(j136);
        double d127 = d118;
        long j137 = j136;
        doubleLargeArray3.setDouble(j127, d127 + d122);
        doubleLargeArray3.setDouble(j129, d119 - d124);
        doubleLargeArray3.setDouble(j133, d127 - d122);
        doubleLargeArray3.setDouble(j135, d119 + d124);
        double d128 = d123 + d126;
        double d129 = d121 + d125;
        doubleLargeArray3.setDouble(j131, (d88 * d128) - (d90 * d129));
        doubleLargeArray3.setDouble(j132, (d129 * d88) + (d90 * d128));
        double d130 = d123 - d126;
        double d131 = d121 - d125;
        double d132 = d86;
        doubleLargeArray3.setDouble(j134, (d132 * d130) + (d87 * d131));
        doubleLargeArray3.setDouble(j137, (d131 * d132) - (d87 * d130));
    }

    public static void cftrec4_th(int i, double[] dArr, int i2, int i3, double[] dArr2) {
        int i4;
        int i5;
        int i6;
        int i7;
        int i8 = i;
        Class<CommonUtils> cls = CommonUtils.class;
        int i9 = i8 >> 1;
        if (((long) i8) >= getThreadsBeginN_1D_FFT_4Threads()) {
            i6 = 4;
            i5 = i8 >> 2;
            i4 = 1;
        } else {
            i6 = 2;
            i5 = i9;
            i4 = 0;
        }
        int i10 = i6;
        Future[] futureArr = new Future[i10];
        int i11 = 0;
        for (int i12 = 0; i12 < i10; i12++) {
            final int i13 = i2 + (i12 * i5);
            if (i12 != i4) {
                i7 = i11 + 1;
                final int i14 = i5;
                final int i15 = i;
                final double[] dArr3 = dArr;
                final double[] dArr4 = dArr2;
                final int i16 = i3;
                futureArr[i11] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        int i = i13 + i14;
                        int i2 = i15;
                        while (i2 > 512) {
                            int i3 = i2 >> 2;
                            CommonUtils.cftmdl1(i3, dArr3, i - i3, dArr4, i16 - (i2 >> 3));
                            i2 = i3;
                        }
                        CommonUtils.cftleaf(i2, 1, dArr3, i - i2, i16, dArr4);
                        int i4 = i13 - i2;
                        int i5 = 0;
                        int i6 = i14 - i2;
                        while (i6 > 0) {
                            int i7 = i5 + 1;
                            int i8 = i2;
                            CommonUtils.cftleaf(i8, CommonUtils.cfttree(i8, i6, i7, dArr3, i13, i16, dArr4), dArr3, i4 + i6, i16, dArr4);
                            i6 -= i2;
                            i5 = i7;
                        }
                    }
                });
            } else {
                i7 = i11 + 1;
                final int i17 = i5;
                final int i18 = i;
                final double[] dArr5 = dArr;
                final double[] dArr6 = dArr2;
                final int i19 = i3;
                futureArr[i11] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        int i = i13 + i17;
                        int i2 = i18;
                        int i3 = 1;
                        while (i2 > 512) {
                            i2 >>= 2;
                            i3 <<= 2;
                            CommonUtils.cftmdl2(i2, dArr5, i - i2, dArr6, i19 - i2);
                        }
                        CommonUtils.cftleaf(i2, 0, dArr5, i - i2, i19, dArr6);
                        int i4 = i3 >> 1;
                        int i5 = i13 - i2;
                        for (int i6 = i17 - i2; i6 > 0; i6 -= i2) {
                            i4++;
                            int i7 = i2;
                            CommonUtils.cftleaf(i7, CommonUtils.cfttree(i7, i6, i4, dArr5, i13, i19, dArr6), dArr5, i5 + i6, i19, dArr6);
                        }
                    }
                });
            }
            i11 = i7;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }

    public static void cftrec4_th(long j, DoubleLargeArray doubleLargeArray, long j2, long j3, DoubleLargeArray doubleLargeArray2) {
        long j4;
        int i;
        Future[] futureArr;
        int i2;
        Class<CommonUtils> cls = CommonUtils.class;
        int i3 = 1;
        long j5 = j >> 1;
        int i4 = 2;
        if (j >= getThreadsBeginN_1D_FFT_4Threads()) {
            i4 = 4;
            j4 = j >> 2;
        } else {
            j4 = j5;
            i3 = 0;
        }
        int i5 = i4;
        Future[] futureArr2 = new Future[i5];
        int i6 = 0;
        int i7 = 0;
        while (i6 < i5) {
            final long j6 = j2 + (((long) i6) * j4);
            if (i6 != i3) {
                i2 = i7 + 1;
                final long j7 = j4;
                final long j8 = j;
                final DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
                final DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
                futureArr = futureArr2;
                i = i6;
                final long j9 = j3;
                futureArr[i7] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        long j = j6 + j7;
                        long j2 = j8;
                        while (j2 > 512) {
                            long j3 = j2 >> 2;
                            CommonUtils.cftmdl1(j3, doubleLargeArray3, j - j3, doubleLargeArray4, j9 - (j2 >> 3));
                            j2 = j3;
                        }
                        CommonUtils.cftleaf(j2, 1, doubleLargeArray3, j - j2, j9, doubleLargeArray4);
                        long j4 = j6 - j2;
                        long j5 = j7 - j2;
                        long j6 = 0;
                        while (j5 > 0) {
                            long j7 = j6 + 1;
                            long j8 = j2;
                            CommonUtils.cftleaf(j8, CommonUtils.cfttree(j8, j5, j7, doubleLargeArray3, j6, j9, doubleLargeArray4), doubleLargeArray3, j4 + j5, j9, doubleLargeArray4);
                            j5 -= j2;
                            j6 = j7;
                        }
                    }
                });
            } else {
                futureArr = futureArr2;
                i = i6;
                i2 = i7 + 1;
                final long j10 = j4;
                final long j11 = j;
                final DoubleLargeArray doubleLargeArray5 = doubleLargeArray;
                final DoubleLargeArray doubleLargeArray6 = doubleLargeArray2;
                final long j12 = j3;
                futureArr[i7] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        long j = j6 + j10;
                        long j2 = j11;
                        long j3 = 1;
                        while (j2 > 512) {
                            j2 >>= 2;
                            j3 <<= 2;
                            CommonUtils.cftmdl2(j2, doubleLargeArray5, j - j2, doubleLargeArray6, j12 - j2);
                        }
                        CommonUtils.cftleaf(j2, 0, doubleLargeArray5, j - j2, j12, doubleLargeArray6);
                        long j4 = j3 >> 1;
                        long j5 = j6 - j2;
                        for (long j6 = j10 - j2; j6 > 0; j6 -= j2) {
                            j4++;
                            DoubleLargeArray doubleLargeArray = doubleLargeArray5;
                            long j7 = j6;
                            long j8 = j12;
                            DoubleLargeArray doubleLargeArray2 = doubleLargeArray6;
                            long j9 = j2;
                            CommonUtils.cftleaf(j9, CommonUtils.cfttree(j2, j6, j4, doubleLargeArray, j7, j8, doubleLargeArray2), doubleLargeArray5, j5 + j6, j12, doubleLargeArray6);
                        }
                    }
                });
            }
            i7 = i2;
            i6 = i + 1;
            futureArr2 = futureArr;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr2);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }

    public static void cftrec4(int i, double[] dArr, int i2, int i3, double[] dArr2) {
        int i4 = i2 + i;
        int i5 = i;
        while (i5 > 512) {
            int i6 = i5 >> 2;
            cftmdl1(i6, dArr, i4 - i6, dArr2, i3 - (i5 >> 3));
            i5 = i6;
        }
        cftleaf(i5, 1, dArr, i4 - i5, i3, dArr2);
        int i7 = i2 - i5;
        int i8 = i - i5;
        int i9 = 0;
        while (i8 > 0) {
            int i10 = i9 + 1;
            int i11 = i5;
            cftleaf(i11, cfttree(i11, i8, i10, dArr, i2, i3, dArr2), dArr, i7 + i8, i3, dArr2);
            i8 -= i5;
            i9 = i10;
        }
    }

    public static void cftrec4(long j, DoubleLargeArray doubleLargeArray, long j2, long j3, DoubleLargeArray doubleLargeArray2) {
        long j4 = j2 + j;
        long j5 = j;
        while (j5 > 512) {
            long j6 = j5 >> 2;
            cftmdl1(j6, doubleLargeArray, j4 - j6, doubleLargeArray2, j3 - (j5 >> 3));
            j5 = j6;
        }
        cftleaf(j5, 1, doubleLargeArray, j4 - j5, j3, doubleLargeArray2);
        long j7 = j2 - j5;
        long j8 = j - j5;
        long j9 = 0;
        while (j8 > 0) {
            long j10 = j9 + 1;
            DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
            long j11 = j3;
            DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
            cftleaf(j5, cfttree(j5, j8, j10, doubleLargeArray3, j2, j11, doubleLargeArray4), doubleLargeArray3, j7 + j8, j11, doubleLargeArray4);
            j8 -= j5;
            j9 = j10;
        }
    }

    public static int cfttree(int i, int i2, int i3, double[] dArr, int i4, int i5, double[] dArr2) {
        int i6;
        int i7 = i4 - i;
        if ((i3 & 3) != 0) {
            i6 = i3 & 1;
            if (i6 != 0) {
                cftmdl1(i, dArr, i7 + i2, dArr2, i5 - (i >> 1));
            } else {
                cftmdl2(i, dArr, i7 + i2, dArr2, i5 - i);
            }
        } else {
            while ((i3 & 3) == 0) {
                i <<= 2;
                i3 >>= 2;
            }
            i6 = i3 & 1;
            int i8 = i4 + i2;
            if (i6 != 0) {
                while (i > 128) {
                    cftmdl1(i, dArr, i8 - i, dArr2, i5 - (i >> 1));
                    i >>= 2;
                }
            } else {
                while (i > 128) {
                    cftmdl2(i, dArr, i8 - i, dArr2, i5 - i);
                    i >>= 2;
                }
            }
        }
        return i6;
    }

    public static long cfttree(long j, long j2, long j3, DoubleLargeArray doubleLargeArray, long j4, long j5, DoubleLargeArray doubleLargeArray2) {
        long j6;
        long j7 = j4 - j;
        if ((j3 & 3) != 0) {
            j6 = j3 & 1;
            if (j6 != 0) {
                cftmdl1(j, doubleLargeArray, j7 + j2, doubleLargeArray2, j5 - (j >> 1));
            } else {
                cftmdl2(j, doubleLargeArray, j7 + j2, doubleLargeArray2, j5 - j);
            }
        } else {
            long j8 = j;
            long j9 = j3;
            while ((j9 & 3) == 0) {
                j8 <<= 2;
                j9 >>= 2;
            }
            j6 = 1 & j9;
            long j10 = j4 + j2;
            if (j6 != 0) {
                while (j8 > 128) {
                    cftmdl1(j8, doubleLargeArray, j10 - j8, doubleLargeArray2, j5 - (j8 >> 1));
                    j8 >>= 2;
                }
            } else {
                while (j8 > 128) {
                    cftmdl2(j8, doubleLargeArray, j10 - j8, doubleLargeArray2, j5 - j8);
                    j8 >>= 2;
                }
            }
        }
        return j6;
    }

    public static void cftleaf(int i, int i2, double[] dArr, int i3, int i4, double[] dArr2) {
        if (i == 512) {
            int i5 = i4 - 64;
            cftmdl1(128, dArr, i3, dArr2, i5);
            int i6 = i4 - 8;
            cftf161(dArr, i3, dArr2, i6);
            int i7 = i4 - 32;
            cftf162(dArr, i3 + 32, dArr2, i7);
            cftf161(dArr, i3 + 64, dArr2, i6);
            cftf161(dArr, i3 + 96, dArr2, i6);
            int i8 = i3 + 128;
            int i9 = i4 - 128;
            cftmdl2(128, dArr, i8, dArr2, i9);
            cftf161(dArr, i8, dArr2, i6);
            cftf162(dArr, i3 + Opcodes.IF_ICMPNE, dArr2, i7);
            cftf161(dArr, i3 + 192, dArr2, i6);
            cftf162(dArr, i3 + 224, dArr2, i7);
            int i10 = i3 + 256;
            cftmdl1(128, dArr, i10, dArr2, i5);
            cftf161(dArr, i10, dArr2, i6);
            cftf162(dArr, i3 + 288, dArr2, i7);
            cftf161(dArr, i3 + 320, dArr2, i6);
            cftf161(dArr, i3 + 352, dArr2, i6);
            if (i2 != 0) {
                cftmdl1(128, dArr, i3 + RendererCapabilities.MODE_SUPPORT_MASK, dArr2, i5);
                cftf161(dArr, i3 + 480, dArr2, i6);
            } else {
                cftmdl2(128, dArr, i3 + RendererCapabilities.MODE_SUPPORT_MASK, dArr2, i9);
                cftf162(dArr, i3 + 480, dArr2, i7);
            }
            cftf161(dArr, i3 + RendererCapabilities.MODE_SUPPORT_MASK, dArr2, i6);
            cftf162(dArr, i3 + TypedValues.CycleType.TYPE_PATH_ROTATE, dArr2, i7);
            cftf161(dArr, i3 + 448, dArr2, i6);
            return;
        }
        int i11 = i4 - 32;
        cftmdl1(64, dArr, i3, dArr2, i11);
        int i12 = i4 - 8;
        cftf081(dArr, i3, dArr2, i12);
        cftf082(dArr, i3 + 16, dArr2, i12);
        cftf081(dArr, i3 + 32, dArr2, i12);
        cftf081(dArr, i3 + 48, dArr2, i12);
        int i13 = i3 + 64;
        int i14 = i4 - 64;
        cftmdl2(64, dArr, i13, dArr2, i14);
        cftf081(dArr, i13, dArr2, i12);
        cftf082(dArr, i3 + 80, dArr2, i12);
        cftf081(dArr, i3 + 96, dArr2, i12);
        cftf082(dArr, i3 + 112, dArr2, i12);
        int i15 = i3 + 128;
        cftmdl1(64, dArr, i15, dArr2, i11);
        cftf081(dArr, i15, dArr2, i12);
        cftf082(dArr, i3 + 144, dArr2, i12);
        cftf081(dArr, i3 + Opcodes.IF_ICMPNE, dArr2, i12);
        cftf081(dArr, i3 + Opcodes.ARETURN, dArr2, i12);
        if (i2 != 0) {
            cftmdl1(64, dArr, i3 + 192, dArr2, i11);
            cftf081(dArr, i3 + PsExtractor.VIDEO_STREAM_MASK, dArr2, i12);
        } else {
            cftmdl2(64, dArr, i3 + 192, dArr2, i14);
            cftf082(dArr, i3 + PsExtractor.VIDEO_STREAM_MASK, dArr2, i12);
        }
        cftf081(dArr, i3 + 192, dArr2, i12);
        cftf082(dArr, i3 + 208, dArr2, i12);
        cftf081(dArr, i3 + 224, dArr2, i12);
    }

    public static void cftleaf(long j, long j2, DoubleLargeArray doubleLargeArray, long j3, long j4, DoubleLargeArray doubleLargeArray2) {
        if (j == 512) {
            long j5 = j4 - 64;
            cftmdl1(128, doubleLargeArray, j3, doubleLargeArray2, j5);
            long j6 = j4 - 8;
            DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
            DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
            cftf161(doubleLargeArray3, j3, doubleLargeArray4, j6);
            long j7 = j4 - 32;
            cftf162(doubleLargeArray3, j3 + 32, doubleLargeArray4, j7);
            DoubleLargeArray doubleLargeArray5 = doubleLargeArray;
            DoubleLargeArray doubleLargeArray6 = doubleLargeArray2;
            long j8 = j6;
            cftf161(doubleLargeArray5, j3 + 64, doubleLargeArray6, j8);
            cftf161(doubleLargeArray5, j3 + 96, doubleLargeArray6, j8);
            long j9 = j3 + 128;
            long j10 = j4 - 128;
            cftmdl2(128, doubleLargeArray, j9, doubleLargeArray2, j10);
            cftf161(doubleLargeArray5, j9, doubleLargeArray6, j8);
            DoubleLargeArray doubleLargeArray7 = doubleLargeArray;
            DoubleLargeArray doubleLargeArray8 = doubleLargeArray2;
            long j11 = j7;
            cftf162(doubleLargeArray7, j3 + 160, doubleLargeArray8, j11);
            cftf161(doubleLargeArray5, j3 + 192, doubleLargeArray6, j8);
            cftf162(doubleLargeArray7, j3 + 224, doubleLargeArray8, j11);
            long j12 = j3 + 256;
            cftmdl1(128, doubleLargeArray, j12, doubleLargeArray2, j5);
            cftf161(doubleLargeArray, j12, doubleLargeArray6, j8);
            cftf162(doubleLargeArray, j3 + 288, doubleLargeArray2, j7);
            cftf161(doubleLargeArray, j3 + 320, doubleLargeArray6, j8);
            cftf161(doubleLargeArray, j3 + 352, doubleLargeArray6, j8);
            if (j2 != 0) {
                cftmdl1(128, doubleLargeArray, j3 + 384, doubleLargeArray2, j5);
                cftf161(doubleLargeArray, j3 + 480, doubleLargeArray2, j6);
            } else {
                cftmdl2(128, doubleLargeArray, j3 + 384, doubleLargeArray2, j10);
                cftf162(doubleLargeArray, j3 + 480, doubleLargeArray2, j7);
            }
            cftf161(doubleLargeArray, j3 + 384, doubleLargeArray2, j6);
            cftf162(doubleLargeArray, j3 + 416, doubleLargeArray2, j7);
            cftf161(doubleLargeArray, j3 + 448, doubleLargeArray2, j6);
            return;
        }
        long j13 = j4 - 32;
        cftmdl1(64, doubleLargeArray, j3, doubleLargeArray2, j13);
        long j14 = j4 - 8;
        cftf081(doubleLargeArray, j3, doubleLargeArray2, j14);
        DoubleLargeArray doubleLargeArray9 = doubleLargeArray;
        DoubleLargeArray doubleLargeArray10 = doubleLargeArray2;
        long j15 = j14;
        cftf082(doubleLargeArray9, j3 + 16, doubleLargeArray10, j15);
        cftf081(doubleLargeArray9, j3 + 32, doubleLargeArray10, j15);
        cftf081(doubleLargeArray9, j3 + 48, doubleLargeArray10, j15);
        long j16 = j3 + 64;
        long j17 = j4 - 64;
        cftmdl2(64, doubleLargeArray, j16, doubleLargeArray2, j17);
        cftf081(doubleLargeArray9, j16, doubleLargeArray10, j15);
        DoubleLargeArray doubleLargeArray11 = doubleLargeArray;
        cftf082(doubleLargeArray11, j3 + 80, doubleLargeArray10, j15);
        cftf081(doubleLargeArray11, j3 + 96, doubleLargeArray10, j15);
        DoubleLargeArray doubleLargeArray12 = doubleLargeArray;
        cftf082(doubleLargeArray12, j3 + 112, doubleLargeArray10, j15);
        long j18 = j3 + 128;
        cftmdl1(64, doubleLargeArray, j18, doubleLargeArray2, j13);
        cftf081(doubleLargeArray12, j18, doubleLargeArray10, j15);
        DoubleLargeArray doubleLargeArray13 = doubleLargeArray;
        cftf082(doubleLargeArray13, j3 + 144, doubleLargeArray10, j15);
        cftf081(doubleLargeArray13, j3 + 160, doubleLargeArray10, j15);
        cftf081(doubleLargeArray, j3 + 176, doubleLargeArray10, j15);
        if (j2 != 0) {
            cftmdl1(64, doubleLargeArray, j3 + 192, doubleLargeArray2, j13);
            cftf081(doubleLargeArray, j3 + 240, doubleLargeArray2, j14);
        } else {
            cftmdl2(64, doubleLargeArray, j3 + 192, doubleLargeArray2, j17);
            cftf082(doubleLargeArray, j3 + 240, doubleLargeArray2, j14);
        }
        DoubleLargeArray doubleLargeArray14 = doubleLargeArray;
        DoubleLargeArray doubleLargeArray15 = doubleLargeArray2;
        long j19 = j14;
        cftf081(doubleLargeArray14, j3 + 192, doubleLargeArray15, j19);
        cftf082(doubleLargeArray14, j3 + 208, doubleLargeArray15, j19);
        cftf081(doubleLargeArray, j3 + 224, doubleLargeArray2, j14);
    }

    public static void cftmdl1(int i, double[] dArr, int i2, double[] dArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        double d = dArr[i2];
        double d2 = dArr[i9];
        double d3 = d + d2;
        int i11 = i2 + 1;
        double d4 = dArr[i11];
        int i12 = i9 + 1;
        double d5 = dArr[i12];
        double d6 = d4 + d5;
        double d7 = d - d2;
        double d8 = d4 - d5;
        double d9 = dArr[i8];
        double d10 = dArr[i10];
        double d11 = d9 + d10;
        int i13 = i8 + 1;
        double d12 = dArr[i13];
        int i14 = i10 + 1;
        double d13 = dArr[i14];
        double d14 = d12 + d13;
        double d15 = d9 - d10;
        double d16 = d12 - d13;
        dArr[i2] = d3 + d11;
        dArr[i11] = d6 + d14;
        dArr[i8] = d3 - d11;
        dArr[i13] = d6 - d14;
        dArr[i9] = d7 - d16;
        dArr[i12] = d8 + d15;
        dArr[i10] = d7 + d16;
        dArr[i14] = d8 - d15;
        double d17 = dArr2[i3 + 1];
        int i15 = 0;
        for (int i16 = 2; i16 < i4; i16 += 2) {
            i15 += 4;
            int i17 = i3 + i15;
            double d18 = dArr2[i17];
            double d19 = dArr2[i17 + 1];
            double d20 = dArr2[i17 + 2];
            double d21 = dArr2[i17 + 3];
            int i18 = i16 + i5;
            int i19 = i18 + i5;
            int i20 = i19 + i5;
            int i21 = i2 + i18;
            int i22 = i2 + i19;
            int i23 = i2 + i20;
            int i24 = i2 + i16;
            double d22 = dArr[i24];
            double d23 = dArr[i22];
            double d24 = d22 + d23;
            int i25 = i24 + 1;
            double d25 = dArr[i25];
            int i26 = i22 + 1;
            double d26 = dArr[i26];
            double d27 = d25 + d26;
            double d28 = d22 - d23;
            double d29 = d25 - d26;
            double d30 = dArr[i21];
            double d31 = dArr[i23];
            double d32 = d30 + d31;
            int i27 = i21 + 1;
            double d33 = dArr[i27];
            int i28 = i23 + 1;
            double d34 = dArr[i28];
            double d35 = d33 + d34;
            double d36 = d30 - d31;
            double d37 = d33 - d34;
            dArr[i24] = d24 + d32;
            dArr[i25] = d27 + d35;
            dArr[i21] = d24 - d32;
            dArr[i27] = d27 - d35;
            double d38 = d28 - d37;
            double d39 = d29 + d36;
            dArr[i22] = (d18 * d38) - (d19 * d39);
            dArr[i26] = (d39 * d18) + (d38 * d19);
            double d40 = d28 + d37;
            double d41 = d29 - d36;
            dArr[i23] = (d20 * d40) + (d21 * d41);
            dArr[i28] = (d41 * d20) - (d40 * d21);
            int i29 = i5 - i16;
            int i30 = i29 + i5;
            int i31 = i30 + i5;
            int i32 = i31 + i5;
            int i33 = i2 + i29;
            int i34 = i2 + i30;
            int i35 = i2 + i31;
            int i36 = i2 + i32;
            double d42 = dArr[i33];
            double d43 = dArr[i35];
            double d44 = d42 + d43;
            int i37 = i33 + 1;
            double d45 = dArr[i37];
            int i38 = i35 + 1;
            double d46 = dArr[i38];
            double d47 = d45 + d46;
            double d48 = d42 - d43;
            double d49 = d45 - d46;
            double d50 = dArr[i34];
            double d51 = dArr[i36];
            double d52 = d50 + d51;
            int i39 = i34 + 1;
            double d53 = dArr[i39];
            int i40 = i36 + 1;
            double d54 = dArr[i40];
            double d55 = d53 + d54;
            double d56 = d50 - d51;
            double d57 = d53 - d54;
            dArr[i33] = d44 + d52;
            dArr[i37] = d47 + d55;
            dArr[i34] = d44 - d52;
            dArr[i39] = d47 - d55;
            double d58 = d48 - d57;
            double d59 = d49 + d56;
            dArr[i35] = (d19 * d58) - (d18 * d59);
            dArr[i38] = (d19 * d59) + (d18 * d58);
            double d60 = d48 + d57;
            double d61 = d49 - d56;
            dArr[i36] = (d21 * d60) + (d20 * d61);
            dArr[i40] = (d21 * d61) - (d20 * d60);
        }
        int i41 = i4 + i5;
        int i42 = i41 + i5;
        int i43 = i5 + i42;
        int i44 = i2 + i4;
        int i45 = i2 + i41;
        int i46 = i2 + i42;
        int i47 = i2 + i43;
        double d62 = dArr[i44];
        double d63 = dArr[i46];
        double d64 = d62 + d63;
        int i48 = i44 + 1;
        double d65 = dArr[i48];
        int i49 = i46 + 1;
        double d66 = dArr[i49];
        double d67 = d65 + d66;
        double d68 = d62 - d63;
        double d69 = d65 - d66;
        double d70 = dArr[i45];
        double d71 = dArr[i47];
        double d72 = d70 + d71;
        int i50 = i45 + 1;
        double d73 = dArr[i50];
        int i51 = i47 + 1;
        double d74 = dArr[i51];
        double d75 = d73 + d74;
        double d76 = d70 - d71;
        double d77 = d73 - d74;
        dArr[i44] = d64 + d72;
        dArr[i48] = d67 + d75;
        dArr[i45] = d64 - d72;
        dArr[i50] = d67 - d75;
        double d78 = d68 - d77;
        double d79 = d69 + d76;
        dArr[i46] = (d78 - d79) * d17;
        dArr[i49] = (d79 + d78) * d17;
        double d80 = d68 + d77;
        double d81 = d69 - d76;
        double d82 = -d17;
        dArr[i47] = (d80 + d81) * d82;
        dArr[i51] = d82 * (d81 - d80);
    }

    public static void cftmdl1(long j, DoubleLargeArray doubleLargeArray, long j2, DoubleLargeArray doubleLargeArray2, long j3) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j4 = j2;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j8 + j4;
        double d = doubleLargeArray.getDouble(j2) + doubleLargeArray3.getDouble(j10);
        long j12 = j4 + 1;
        long j13 = j6;
        long j14 = j10 + 1;
        double d2 = doubleLargeArray3.getDouble(j12) + doubleLargeArray3.getDouble(j14);
        double d3 = doubleLargeArray.getDouble(j2) - doubleLargeArray3.getDouble(j10);
        double d4 = doubleLargeArray3.getDouble(j12) - doubleLargeArray3.getDouble(j14);
        double d5 = doubleLargeArray3.getDouble(j9) + doubleLargeArray3.getDouble(j11);
        long j15 = j5;
        long j16 = j9 + 1;
        long j17 = j14;
        long j18 = j11 + 1;
        double d6 = doubleLargeArray3.getDouble(j16) + doubleLargeArray3.getDouble(j18);
        double d7 = doubleLargeArray3.getDouble(j9) - doubleLargeArray3.getDouble(j11);
        double d8 = doubleLargeArray3.getDouble(j16) - doubleLargeArray3.getDouble(j18);
        doubleLargeArray3.setDouble(j4, d + d5);
        doubleLargeArray3.setDouble(j12, d2 + d6);
        doubleLargeArray3.setDouble(j9, d - d5);
        doubleLargeArray3.setDouble(j16, d2 - d6);
        doubleLargeArray3.setDouble(j10, d3 - d8);
        doubleLargeArray3.setDouble(j17, d4 + d7);
        doubleLargeArray3.setDouble(j11, d3 + d8);
        doubleLargeArray3.setDouble(j18, d4 - d7);
        double d9 = doubleLargeArray4.getDouble(j3 + 1);
        long j19 = 0;
        long j20 = 2;
        while (j20 < j15) {
            long j21 = j19 + 4;
            long j22 = j3 + j21;
            double d10 = doubleLargeArray4.getDouble(j22);
            double d11 = doubleLargeArray4.getDouble(j22 + 1);
            long j23 = j21;
            double d12 = doubleLargeArray4.getDouble(j22 + 2);
            double d13 = doubleLargeArray4.getDouble(j22 + 3);
            long j24 = j20 + j13;
            long j25 = j24 + j13;
            long j26 = j25 + j13;
            long j27 = j4 + j24;
            double d14 = d13;
            long j28 = j4 + j25;
            double d15 = d12;
            long j29 = j4 + j26;
            double d16 = d11;
            long j30 = j4 + j20;
            double d17 = doubleLargeArray3.getDouble(j30) + doubleLargeArray3.getDouble(j28);
            long j31 = j30 + 1;
            long j32 = j20;
            long j33 = j28 + 1;
            double d18 = doubleLargeArray3.getDouble(j31) + doubleLargeArray3.getDouble(j33);
            double d19 = doubleLargeArray3.getDouble(j30) - doubleLargeArray3.getDouble(j28);
            double d20 = doubleLargeArray3.getDouble(j31) - doubleLargeArray3.getDouble(j33);
            double d21 = doubleLargeArray3.getDouble(j27) + doubleLargeArray3.getDouble(j29);
            long j34 = j33;
            long j35 = j27 + 1;
            long j36 = j29 + 1;
            double d22 = doubleLargeArray3.getDouble(j35) + doubleLargeArray3.getDouble(j36);
            double d23 = doubleLargeArray3.getDouble(j27) - doubleLargeArray3.getDouble(j29);
            double d24 = doubleLargeArray3.getDouble(j35) - doubleLargeArray3.getDouble(j36);
            long j37 = j36;
            doubleLargeArray3.setDouble(j30, d17 + d21);
            doubleLargeArray3.setDouble(j31, d18 + d22);
            doubleLargeArray3.setDouble(j27, d17 - d21);
            doubleLargeArray3.setDouble(j35, d18 - d22);
            double d25 = d19 - d24;
            double d26 = d20 + d23;
            doubleLargeArray3.setDouble(j28, (d10 * d25) - (d16 * d26));
            doubleLargeArray3.setDouble(j34, (d26 * d10) + (d16 * d25));
            double d27 = d19 + d24;
            double d28 = d20 - d23;
            doubleLargeArray3.setDouble(j29, (d15 * d27) + (d14 * d28));
            doubleLargeArray3.setDouble(j37, (d15 * d28) - (d14 * d27));
            long j38 = j13 - j32;
            long j39 = j38 + j13;
            long j40 = j39 + j13;
            long j41 = j40 + j13;
            long j42 = j2 + j38;
            long j43 = j2 + j39;
            long j44 = j2 + j40;
            long j45 = j2 + j41;
            double d29 = doubleLargeArray3.getDouble(j42) + doubleLargeArray3.getDouble(j44);
            long j46 = j42 + 1;
            double d30 = d10;
            long j47 = j44 + 1;
            double d31 = doubleLargeArray3.getDouble(j46) + doubleLargeArray3.getDouble(j47);
            double d32 = doubleLargeArray3.getDouble(j42) - doubleLargeArray3.getDouble(j44);
            double d33 = doubleLargeArray3.getDouble(j46) - doubleLargeArray3.getDouble(j47);
            double d34 = doubleLargeArray3.getDouble(j43) + doubleLargeArray3.getDouble(j45);
            long j48 = j47;
            long j49 = j43 + 1;
            long j50 = j44;
            long j51 = j45 + 1;
            double d35 = doubleLargeArray3.getDouble(j49) + doubleLargeArray3.getDouble(j51);
            double d36 = doubleLargeArray3.getDouble(j43) - doubleLargeArray3.getDouble(j45);
            double d37 = doubleLargeArray3.getDouble(j49) - doubleLargeArray3.getDouble(j51);
            long j52 = j51;
            doubleLargeArray3.setDouble(j42, d29 + d34);
            doubleLargeArray3.setDouble(j46, d31 + d35);
            doubleLargeArray3.setDouble(j43, d29 - d34);
            doubleLargeArray3.setDouble(j49, d31 - d35);
            double d38 = d32 - d37;
            double d39 = d33 + d36;
            doubleLargeArray3.setDouble(j50, (d16 * d38) - (d30 * d39));
            doubleLargeArray3.setDouble(j48, (d16 * d39) + (d30 * d38));
            double d40 = d32 + d37;
            double d41 = d33 - d36;
            doubleLargeArray3.setDouble(j45, (d14 * d40) + (d15 * d41));
            doubleLargeArray3.setDouble(j52, (d14 * d41) - (d15 * d40));
            j20 = j32 + 2;
            j4 = j2;
            doubleLargeArray4 = doubleLargeArray2;
            j19 = j23;
            d9 = d9;
        }
        double d42 = d9;
        long j53 = j15 + j13;
        long j54 = j53 + j13;
        long j55 = j54 + j13;
        long j56 = j2 + j15;
        long j57 = j2 + j53;
        long j58 = j2 + j54;
        long j59 = j2 + j55;
        long j60 = j56 + 1;
        double d43 = doubleLargeArray3.getDouble(j56) + doubleLargeArray3.getDouble(j58);
        long j61 = j58 + 1;
        double d44 = doubleLargeArray3.getDouble(j60) + doubleLargeArray3.getDouble(j61);
        double d45 = doubleLargeArray3.getDouble(j56) - doubleLargeArray3.getDouble(j58);
        double d46 = doubleLargeArray3.getDouble(j60) - doubleLargeArray3.getDouble(j61);
        double d47 = doubleLargeArray3.getDouble(j57) + doubleLargeArray3.getDouble(j59);
        long j62 = j61;
        long j63 = j57 + 1;
        long j64 = j58;
        long j65 = j59 + 1;
        double d48 = doubleLargeArray3.getDouble(j63) + doubleLargeArray3.getDouble(j65);
        double d49 = doubleLargeArray3.getDouble(j57) - doubleLargeArray3.getDouble(j59);
        double d50 = doubleLargeArray3.getDouble(j63) - doubleLargeArray3.getDouble(j65);
        double d51 = d43;
        long j66 = j65;
        doubleLargeArray3.setDouble(j56, d51 + d47);
        doubleLargeArray3.setDouble(j60, d44 + d48);
        doubleLargeArray3.setDouble(j57, d51 - d47);
        doubleLargeArray3.setDouble(j63, d44 - d48);
        double d52 = d45 - d50;
        double d53 = d46 + d49;
        doubleLargeArray3.setDouble(j64, (d52 - d53) * d42);
        doubleLargeArray3.setDouble(j62, d42 * (d53 + d52));
        double d54 = d45 + d50;
        double d55 = d46 - d49;
        double d56 = -d42;
        doubleLargeArray3.setDouble(j59, (d54 + d55) * d56);
        doubleLargeArray3.setDouble(j66, d56 * (d55 - d54));
    }

    public static void cftmdl2(int i, double[] dArr, int i2, double[] dArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        double d = dArr2[i3 + 1];
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        double d2 = dArr[i2];
        int i11 = i9 + 1;
        double d3 = dArr[i11];
        double d4 = d2 - d3;
        int i12 = i2 + 1;
        double d5 = dArr[i12];
        double d6 = dArr[i9];
        double d7 = d5 + d6;
        double d8 = d2 + d3;
        double d9 = d5 - d6;
        double d10 = dArr[i8];
        int i13 = i10 + 1;
        double d11 = dArr[i13];
        double d12 = d10 - d11;
        int i14 = i8 + 1;
        double d13 = dArr[i14];
        double d14 = dArr[i10];
        double d15 = d13 + d14;
        double d16 = d10 + d11;
        double d17 = d13 - d14;
        double d18 = (d12 - d15) * d;
        double d19 = (d15 + d12) * d;
        dArr[i2] = d4 + d18;
        dArr[i12] = d7 + d19;
        dArr[i8] = d4 - d18;
        dArr[i14] = d7 - d19;
        double d20 = (d16 - d17) * d;
        double d21 = d * (d17 + d16);
        dArr[i9] = d8 - d21;
        dArr[i11] = d9 + d20;
        dArr[i10] = d8 + d21;
        dArr[i13] = d9 - d20;
        int i15 = i4 * 4;
        int i16 = 0;
        for (int i17 = 2; i17 < i4; i17 += 2) {
            i16 += 4;
            int i18 = i3 + i16;
            double d22 = dArr2[i18];
            double d23 = dArr2[i18 + 1];
            double d24 = dArr2[i18 + 2];
            double d25 = dArr2[i18 + 3];
            i15 -= 4;
            int i19 = i3 + i15;
            double d26 = dArr2[i19];
            double d27 = dArr2[i19 + 1];
            double d28 = dArr2[i19 + 2];
            double d29 = dArr2[i19 + 3];
            int i20 = i17 + i5;
            int i21 = i20 + i5;
            int i22 = i21 + i5;
            int i23 = i2 + i20;
            int i24 = i2 + i21;
            int i25 = i2 + i22;
            int i26 = i2 + i17;
            double d30 = dArr[i26];
            int i27 = i24 + 1;
            double d31 = dArr[i27];
            double d32 = d30 - d31;
            int i28 = i26 + 1;
            double d33 = dArr[i28];
            double d34 = dArr[i24];
            double d35 = d33 + d34;
            double d36 = d30 + d31;
            double d37 = d33 - d34;
            double d38 = dArr[i23];
            int i29 = i25 + 1;
            double d39 = dArr[i29];
            double d40 = d38 - d39;
            int i30 = i23 + 1;
            double d41 = dArr[i30];
            double d42 = dArr[i25];
            double d43 = d41 + d42;
            double d44 = d38 + d39;
            double d45 = d41 - d42;
            double d46 = (d22 * d32) - (d23 * d35);
            double d47 = (d35 * d22) + (d32 * d23);
            double d48 = (d27 * d40) - (d26 * d43);
            double d49 = (d43 * d27) + (d40 * d26);
            dArr[i26] = d46 + d48;
            dArr[i28] = d47 + d49;
            dArr[i23] = d46 - d48;
            dArr[i30] = d47 - d49;
            double d50 = (d24 * d36) + (d25 * d37);
            double d51 = (d37 * d24) - (d36 * d25);
            double d52 = (d29 * d44) + (d28 * d45);
            double d53 = (d45 * d29) - (d44 * d28);
            dArr[i24] = d50 + d52;
            dArr[i27] = d51 + d53;
            dArr[i25] = d50 - d52;
            dArr[i29] = d51 - d53;
            int i31 = i5 - i17;
            int i32 = i31 + i5;
            int i33 = i32 + i5;
            int i34 = i33 + i5;
            int i35 = i2 + i31;
            int i36 = i2 + i32;
            int i37 = i2 + i33;
            int i38 = i2 + i34;
            double d54 = dArr[i35];
            int i39 = i37 + 1;
            double d55 = dArr[i39];
            double d56 = d54 - d55;
            int i40 = i35 + 1;
            double d57 = dArr[i40];
            double d58 = dArr[i37];
            double d59 = d57 + d58;
            double d60 = d54 + d55;
            double d61 = d57 - d58;
            double d62 = dArr[i36];
            int i41 = i38 + 1;
            double d63 = dArr[i41];
            double d64 = d62 - d63;
            int i42 = i36 + 1;
            double d65 = dArr[i42];
            double d66 = dArr[i38];
            double d67 = d65 + d66;
            double d68 = d62 + d63;
            double d69 = d65 - d66;
            double d70 = (d26 * d56) - (d27 * d59);
            double d71 = (d26 * d59) + (d27 * d56);
            double d72 = (d23 * d64) - (d22 * d67);
            double d73 = (d23 * d67) + (d22 * d64);
            dArr[i35] = d70 + d72;
            dArr[i40] = d71 + d73;
            dArr[i36] = d70 - d72;
            dArr[i42] = d71 - d73;
            double d74 = (d28 * d60) + (d29 * d61);
            double d75 = (d28 * d61) - (d29 * d60);
            double d76 = (d25 * d68) + (d24 * d69);
            double d77 = (d25 * d69) - (d24 * d68);
            dArr[i37] = d74 + d76;
            dArr[i39] = d75 + d77;
            dArr[i38] = d74 - d76;
            dArr[i41] = d75 - d77;
        }
        int i43 = i3 + i5;
        double d78 = dArr2[i43];
        double d79 = dArr2[i43 + 1];
        int i44 = i4 + i5;
        int i45 = i44 + i5;
        int i46 = i5 + i45;
        int i47 = i2 + i4;
        int i48 = i2 + i44;
        int i49 = i2 + i45;
        int i50 = i2 + i46;
        double d80 = dArr[i47];
        int i51 = i49 + 1;
        double d81 = dArr[i51];
        double d82 = d80 - d81;
        int i52 = i47 + 1;
        double d83 = dArr[i52];
        double d84 = dArr[i49];
        double d85 = d83 + d84;
        double d86 = d80 + d81;
        double d87 = d83 - d84;
        double d88 = dArr[i48];
        int i53 = i50 + 1;
        double d89 = dArr[i53];
        double d90 = d88 - d89;
        int i54 = i48 + 1;
        double d91 = dArr[i54];
        double d92 = dArr[i50];
        double d93 = d91 + d92;
        double d94 = d88 + d89;
        double d95 = d91 - d92;
        double d96 = (d78 * d82) - (d79 * d85);
        double d97 = (d85 * d78) + (d82 * d79);
        double d98 = (d79 * d90) - (d78 * d93);
        double d99 = (d93 * d79) + (d90 * d78);
        dArr[i47] = d96 + d98;
        dArr[i52] = d97 + d99;
        dArr[i48] = d96 - d98;
        dArr[i54] = d97 - d99;
        double d100 = (d79 * d86) - (d78 * d87);
        double d101 = (d87 * d79) + (d86 * d78);
        double d102 = (d78 * d94) - (d79 * d95);
        double d103 = (d78 * d95) + (d79 * d94);
        dArr[i49] = d100 - d102;
        dArr[i51] = d101 - d103;
        dArr[i50] = d100 + d102;
        dArr[i53] = d101 + d103;
    }

    public static void cftmdl2(long j, DoubleLargeArray doubleLargeArray, long j2, DoubleLargeArray doubleLargeArray2, long j3) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j4 = j2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        double d = doubleLargeArray2.getDouble(j3 + 1);
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j6;
        long j12 = j4 + j8;
        long j13 = j5;
        long j14 = j10 + 1;
        double d2 = doubleLargeArray.getDouble(j2) - doubleLargeArray3.getDouble(j14);
        double d3 = d;
        long j15 = j4 + 1;
        double d4 = doubleLargeArray3.getDouble(j15) + doubleLargeArray3.getDouble(j10);
        double d5 = doubleLargeArray.getDouble(j2) + doubleLargeArray3.getDouble(j14);
        double d6 = doubleLargeArray3.getDouble(j15) - doubleLargeArray3.getDouble(j10);
        long j16 = j14;
        long j17 = j12 + 1;
        double d7 = doubleLargeArray3.getDouble(j9) - doubleLargeArray3.getDouble(j17);
        long j18 = j10;
        long j19 = j9 + 1;
        double d8 = doubleLargeArray3.getDouble(j19) + doubleLargeArray3.getDouble(j12);
        double d9 = doubleLargeArray3.getDouble(j9) + doubleLargeArray3.getDouble(j17);
        double d10 = doubleLargeArray3.getDouble(j19) - doubleLargeArray3.getDouble(j12);
        double d11 = (d7 - d8) * d3;
        double d12 = d3 * (d8 + d7);
        doubleLargeArray3.setDouble(j4, d2 + d11);
        doubleLargeArray3.setDouble(j15, d4 + d12);
        doubleLargeArray3.setDouble(j9, d2 - d11);
        doubleLargeArray3.setDouble(j19, d4 - d12);
        double d13 = d3 * (d9 - d10);
        double d14 = d3 * (d10 + d9);
        doubleLargeArray3.setDouble(j18, d5 - d14);
        doubleLargeArray3.setDouble(j16, d6 + d13);
        doubleLargeArray3.setDouble(j12, d5 + d14);
        doubleLargeArray3.setDouble(j17, d6 - d13);
        long j20 = 4;
        long j21 = j13 * 4;
        long j22 = 0;
        int i = 2;
        while (true) {
            long j23 = (long) i;
            if (j23 < j13) {
                long j24 = j22 + j20;
                long j25 = j3 + j24;
                DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
                double d15 = doubleLargeArray4.getDouble(j25);
                double d16 = doubleLargeArray4.getDouble(j25 + 1);
                long j26 = j24;
                double d17 = doubleLargeArray4.getDouble(j25 + 2);
                long j27 = j21 - 4;
                double d18 = doubleLargeArray4.getDouble(j25 + 3);
                long j28 = j3 + j27;
                double d19 = doubleLargeArray4.getDouble(j28);
                long j29 = j27;
                double d20 = doubleLargeArray4.getDouble(j28 + 1);
                double d21 = d17;
                long j30 = j23 + j11;
                long j31 = j30 + j11;
                long j32 = j31 + j11;
                double d22 = doubleLargeArray4.getDouble(j28 + 2);
                long j33 = j4 + j30;
                double d23 = doubleLargeArray4.getDouble(j28 + 3);
                long j34 = j4 + j31;
                double d24 = d20;
                long j35 = j4 + j32;
                double d25 = d16;
                long j36 = j4 + j23;
                long j37 = j34 + 1;
                double d26 = doubleLargeArray3.getDouble(j36) - doubleLargeArray3.getDouble(j37);
                int i2 = i;
                long j38 = j36 + 1;
                double d27 = doubleLargeArray3.getDouble(j38) + doubleLargeArray3.getDouble(j34);
                double d28 = doubleLargeArray3.getDouble(j36) + doubleLargeArray3.getDouble(j37);
                double d29 = doubleLargeArray3.getDouble(j38) - doubleLargeArray3.getDouble(j34);
                long j39 = j37;
                long j40 = j35 + 1;
                double d30 = doubleLargeArray3.getDouble(j33) - doubleLargeArray3.getDouble(j40);
                long j41 = j34;
                long j42 = j33 + 1;
                double d31 = doubleLargeArray3.getDouble(j42) + doubleLargeArray3.getDouble(j35);
                double d32 = doubleLargeArray3.getDouble(j33) + doubleLargeArray3.getDouble(j40);
                double d33 = doubleLargeArray3.getDouble(j42) - doubleLargeArray3.getDouble(j35);
                double d34 = (d15 * d26) - (d25 * d27);
                double d35 = (d27 * d15) + (d26 * d25);
                double d36 = (d24 * d30) - (d19 * d31);
                double d37 = (d31 * d24) + (d30 * d19);
                doubleLargeArray3.setDouble(j36, d34 + d36);
                doubleLargeArray3.setDouble(j38, d35 + d37);
                doubleLargeArray3.setDouble(j33, d34 - d36);
                doubleLargeArray3.setDouble(j42, d35 - d37);
                double d38 = (d21 * d28) + (d18 * d29);
                double d39 = (d21 * d29) - (d18 * d28);
                double d40 = (d23 * d32) + (d22 * d33);
                double d41 = (d23 * d33) - (d22 * d32);
                double d42 = d15;
                doubleLargeArray3.setDouble(j41, d38 + d40);
                doubleLargeArray3.setDouble(j39, d39 + d41);
                doubleLargeArray3.setDouble(j35, d38 - d40);
                doubleLargeArray3.setDouble(j40, d39 - d41);
                long j43 = j11 - j23;
                long j44 = j43 + j11;
                long j45 = j44 + j11;
                long j46 = j45 + j11;
                long j47 = j2 + j43;
                long j48 = j2 + j44;
                long j49 = j2 + j45;
                long j50 = j2 + j46;
                long j51 = j49 + 1;
                double d43 = doubleLargeArray3.getDouble(j47) - doubleLargeArray3.getDouble(j51);
                long j52 = j47 + 1;
                double d44 = doubleLargeArray3.getDouble(j52) + doubleLargeArray3.getDouble(j49);
                double d45 = doubleLargeArray3.getDouble(j47) + doubleLargeArray3.getDouble(j51);
                double d46 = doubleLargeArray3.getDouble(j52) - doubleLargeArray3.getDouble(j49);
                long j53 = j51;
                long j54 = j50 + 1;
                double d47 = doubleLargeArray3.getDouble(j48) - doubleLargeArray3.getDouble(j54);
                long j55 = j49;
                long j56 = j48 + 1;
                double d48 = doubleLargeArray3.getDouble(j56) + doubleLargeArray3.getDouble(j50);
                double d49 = doubleLargeArray3.getDouble(j48) + doubleLargeArray3.getDouble(j54);
                double d50 = doubleLargeArray3.getDouble(j56) - doubleLargeArray3.getDouble(j50);
                double d51 = (d19 * d43) - (d24 * d44);
                double d52 = (d19 * d44) + (d43 * d24);
                double d53 = (d25 * d47) - (d42 * d48);
                double d54 = (d48 * d25) + (d42 * d47);
                doubleLargeArray3.setDouble(j47, d51 + d53);
                doubleLargeArray3.setDouble(j52, d52 + d54);
                doubleLargeArray3.setDouble(j48, d51 - d53);
                doubleLargeArray3.setDouble(j56, d52 - d54);
                double d55 = (d22 * d45) + (d23 * d46);
                double d56 = (d22 * d46) - (d23 * d45);
                double d57 = (d18 * d49) + (d21 * d50);
                double d58 = (d18 * d50) - (d21 * d49);
                doubleLargeArray3.setDouble(j55, d55 + d57);
                doubleLargeArray3.setDouble(j53, d56 + d58);
                doubleLargeArray3.setDouble(j50, d55 - d57);
                doubleLargeArray3.setDouble(j54, d56 - d58);
                i = i2 + 2;
                j22 = j26;
                j4 = j2;
                j20 = 4;
                j21 = j29;
            } else {
                long j57 = j3 + j11;
                DoubleLargeArray doubleLargeArray5 = doubleLargeArray2;
                double d59 = doubleLargeArray5.getDouble(j57);
                long j58 = j13 + j11;
                long j59 = j58 + j11;
                long j60 = j59 + j11;
                long j61 = j2 + j13;
                long j62 = j2 + j58;
                long j63 = j2 + j59;
                long j64 = j2 + j60;
                double d60 = doubleLargeArray5.getDouble(j57 + 1);
                long j65 = j63 + 1;
                double d61 = doubleLargeArray3.getDouble(j61) - doubleLargeArray3.getDouble(j65);
                long j66 = j61 + 1;
                double d62 = doubleLargeArray3.getDouble(j66) + doubleLargeArray3.getDouble(j63);
                double d63 = doubleLargeArray3.getDouble(j61) + doubleLargeArray3.getDouble(j65);
                double d64 = doubleLargeArray3.getDouble(j66) - doubleLargeArray3.getDouble(j63);
                long j67 = j65;
                long j68 = j64 + 1;
                double d65 = doubleLargeArray3.getDouble(j62) - doubleLargeArray3.getDouble(j68);
                long j69 = j62 + 1;
                double d66 = doubleLargeArray3.getDouble(j69) + doubleLargeArray3.getDouble(j64);
                double d67 = doubleLargeArray3.getDouble(j62) + doubleLargeArray3.getDouble(j68);
                double d68 = doubleLargeArray3.getDouble(j69) - doubleLargeArray3.getDouble(j64);
                double d69 = d59;
                double d70 = d60;
                double d71 = (d69 * d61) - (d70 * d62);
                double d72 = (d62 * d69) + (d61 * d70);
                double d73 = (d70 * d65) - (d69 * d66);
                double d74 = (d66 * d70) + (d65 * d69);
                long j70 = j68;
                doubleLargeArray3.setDouble(j61, d71 + d73);
                doubleLargeArray3.setDouble(j66, d72 + d74);
                doubleLargeArray3.setDouble(j62, d71 - d73);
                doubleLargeArray3.setDouble(j69, d72 - d74);
                double d75 = (d70 * d63) - (d69 * d64);
                double d76 = (d70 * d64) + (d69 * d63);
                double d77 = (d69 * d67) - (d70 * d68);
                double d78 = (d69 * d68) + (d70 * d67);
                doubleLargeArray3.setDouble(j63, d75 - d77);
                doubleLargeArray3.setDouble(j67, d76 - d78);
                doubleLargeArray3.setDouble(j64, d75 + d77);
                doubleLargeArray3.setDouble(j70, d76 + d78);
                return;
            }
        }
    }

    public static void cftfx41(int i, double[] dArr, int i2, int i3, double[] dArr2) {
        if (i == 128) {
            int i4 = i3 - 8;
            cftf161(dArr, i2, dArr2, i4);
            cftf162(dArr, i2 + 32, dArr2, i3 - 32);
            cftf161(dArr, i2 + 64, dArr2, i4);
            cftf161(dArr, i2 + 96, dArr2, i4);
            return;
        }
        int i5 = i3 - 8;
        cftf081(dArr, i2, dArr2, i5);
        cftf082(dArr, i2 + 16, dArr2, i5);
        cftf081(dArr, i2 + 32, dArr2, i5);
        cftf081(dArr, i2 + 48, dArr2, i5);
    }

    public static void cftfx41(long j, DoubleLargeArray doubleLargeArray, long j2, long j3, DoubleLargeArray doubleLargeArray2) {
        if (j == 128) {
            long j4 = j3 - 8;
            DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
            DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
            cftf161(doubleLargeArray3, j2, doubleLargeArray4, j4);
            cftf162(doubleLargeArray3, j2 + 32, doubleLargeArray4, j3 - 32);
            cftf161(doubleLargeArray, j2 + 64, doubleLargeArray2, j4);
            cftf161(doubleLargeArray, j2 + 96, doubleLargeArray2, j4);
            return;
        }
        long j5 = j3 - 8;
        cftf081(doubleLargeArray, j2, doubleLargeArray2, j5);
        cftf082(doubleLargeArray, j2 + 16, doubleLargeArray2, j5);
        cftf081(doubleLargeArray, j2 + 32, doubleLargeArray2, j5);
        cftf081(doubleLargeArray, j2 + 48, doubleLargeArray2, j5);
    }

    public static void cftf161(double[] dArr, int i, double[] dArr2, int i2) {
        double d = dArr2[i2 + 1];
        double d2 = dArr2[i2 + 2];
        double d3 = dArr2[i2 + 3];
        double d4 = dArr[i];
        int i3 = i + 16;
        double d5 = dArr[i3];
        double d6 = d4 + d5;
        int i4 = i + 1;
        double d7 = dArr[i4];
        int i5 = i + 17;
        double d8 = dArr[i5];
        double d9 = d7 + d8;
        double d10 = d4 - d5;
        double d11 = d7 - d8;
        int i6 = i + 8;
        double d12 = dArr[i6];
        int i7 = i + 24;
        double d13 = dArr[i7];
        double d14 = d12 + d13;
        int i8 = i + 9;
        double d15 = dArr[i8];
        int i9 = i + 25;
        double d16 = dArr[i9];
        double d17 = d15 + d16;
        double d18 = d12 - d13;
        double d19 = d15 - d16;
        double d20 = d6 + d14;
        double d21 = d9 + d17;
        double d22 = d6 - d14;
        double d23 = d9 - d17;
        double d24 = d10 - d19;
        double d25 = d11 + d18;
        double d26 = d10 + d19;
        double d27 = d11 - d18;
        int i10 = i + 2;
        double d28 = dArr[i10];
        int i11 = i + 18;
        double d29 = dArr[i11];
        double d30 = d28 + d29;
        int i12 = i + 3;
        double d31 = dArr[i12];
        int i13 = i + 19;
        double d32 = dArr[i13];
        double d33 = d31 + d32;
        double d34 = d28 - d29;
        double d35 = d31 - d32;
        int i14 = i + 10;
        double d36 = dArr[i14];
        int i15 = i + 26;
        double d37 = dArr[i15];
        double d38 = d36 + d37;
        int i16 = i + 11;
        double d39 = dArr[i16];
        int i17 = i + 27;
        double d40 = dArr[i17];
        double d41 = d39 + d40;
        double d42 = d36 - d37;
        double d43 = d39 - d40;
        double d44 = d30 + d38;
        double d45 = d33 + d41;
        double d46 = d30 - d38;
        double d47 = d33 - d41;
        double d48 = d34 - d43;
        double d49 = d35 + d42;
        double d50 = (d2 * d48) - (d3 * d49);
        double d51 = (d49 * d2) + (d48 * d3);
        double d52 = d34 + d43;
        double d53 = d35 - d42;
        double d54 = (d3 * d52) - (d2 * d53);
        double d55 = (d53 * d3) + (d52 * d2);
        int i18 = i + 4;
        double d56 = dArr[i18];
        int i19 = i + 20;
        double d57 = dArr[i19];
        double d58 = d56 + d57;
        int i20 = i + 5;
        double d59 = dArr[i20];
        int i21 = i + 21;
        double d60 = dArr[i21];
        double d61 = d59 + d60;
        double d62 = d56 - d57;
        double d63 = d59 - d60;
        int i22 = i + 12;
        double d64 = dArr[i22];
        int i23 = i + 28;
        double d65 = dArr[i23];
        double d66 = d64 + d65;
        int i24 = i + 13;
        double d67 = dArr[i24];
        int i25 = i + 29;
        double d68 = dArr[i25];
        double d69 = d67 + d68;
        double d70 = d64 - d65;
        double d71 = d67 - d68;
        double d72 = d58 + d66;
        double d73 = d61 + d69;
        double d74 = d58 - d66;
        double d75 = d61 - d69;
        double d76 = d62 - d71;
        double d77 = d63 + d70;
        double d78 = (d76 - d77) * d;
        double d79 = (d77 + d76) * d;
        double d80 = d62 + d71;
        double d81 = d63 - d70;
        double d82 = (d80 + d81) * d;
        double d83 = (d81 - d80) * d;
        int i26 = i + 6;
        double d84 = dArr[i26];
        int i27 = i + 22;
        double d85 = dArr[i27];
        double d86 = d84 + d85;
        int i28 = i + 7;
        double d87 = dArr[i28];
        int i29 = i + 23;
        double d88 = dArr[i29];
        double d89 = d87 + d88;
        double d90 = d84 - d85;
        double d91 = d87 - d88;
        int i30 = i + 14;
        double d92 = dArr[i30];
        int i31 = i + 30;
        double d93 = dArr[i31];
        double d94 = d92 + d93;
        int i32 = i + 15;
        double d95 = dArr[i32];
        int i33 = i + 31;
        double d96 = dArr[i33];
        double d97 = d95 + d96;
        double d98 = d92 - d93;
        double d99 = d95 - d96;
        double d100 = d86 + d94;
        double d101 = d89 + d97;
        double d102 = d86 - d94;
        double d103 = d89 - d97;
        double d104 = d90 - d99;
        double d105 = d91 + d98;
        double d106 = (d3 * d104) - (d2 * d105);
        double d107 = (d105 * d3) + (d104 * d2);
        double d108 = d90 + d99;
        double d109 = d91 - d98;
        double d110 = (d2 * d108) - (d3 * d109);
        double d111 = (d2 * d109) + (d3 * d108);
        double d112 = d26 - d82;
        double d113 = d27 - d83;
        double d114 = d26 + d82;
        double d115 = d27 + d83;
        double d116 = d54 - d110;
        double d117 = d55 - d111;
        double d118 = d54 + d110;
        double d119 = d55 + d111;
        dArr[i7] = d112 + d116;
        dArr[i9] = d113 + d117;
        dArr[i15] = d112 - d116;
        dArr[i17] = d113 - d117;
        dArr[i23] = d114 - d119;
        dArr[i25] = d115 + d118;
        dArr[i31] = d114 + d119;
        dArr[i33] = d115 - d118;
        double d120 = d24 + d78;
        double d121 = d25 + d79;
        double d122 = d24 - d78;
        double d123 = d25 - d79;
        double d124 = d50 + d106;
        double d125 = d51 + d107;
        double d126 = d50 - d106;
        double d127 = d51 - d107;
        dArr[i3] = d120 + d124;
        dArr[i5] = d121 + d125;
        dArr[i11] = d120 - d124;
        dArr[i13] = d121 - d125;
        dArr[i19] = d122 - d127;
        dArr[i21] = d123 + d126;
        dArr[i27] = d122 + d127;
        dArr[i29] = d123 - d126;
        double d128 = d46 - d103;
        double d129 = d47 + d102;
        double d130 = (d128 - d129) * d;
        double d131 = (d129 + d128) * d;
        double d132 = d46 + d103;
        double d133 = d47 - d102;
        double d134 = (d132 - d133) * d;
        double d135 = d * (d133 + d132);
        double d136 = d22 - d75;
        double d137 = d23 + d74;
        double d138 = d22 + d75;
        double d139 = d23 - d74;
        dArr[i6] = d136 + d130;
        dArr[i8] = d137 + d131;
        dArr[i14] = d136 - d130;
        dArr[i16] = d137 - d131;
        dArr[i22] = d138 - d135;
        dArr[i24] = d139 + d134;
        dArr[i30] = d138 + d135;
        dArr[i32] = d139 - d134;
        double d140 = d20 + d72;
        double d141 = d21 + d73;
        double d142 = d20 - d72;
        double d143 = d21 - d73;
        double d144 = d44 + d100;
        double d145 = d45 + d101;
        double d146 = d44 - d100;
        double d147 = d45 - d101;
        dArr[i] = d140 + d144;
        dArr[i4] = d141 + d145;
        dArr[i10] = d140 - d144;
        dArr[i12] = d141 - d145;
        dArr[i18] = d142 - d147;
        dArr[i20] = d143 + d146;
        dArr[i26] = d142 + d147;
        dArr[i28] = d143 - d146;
    }

    public static void cftf161(DoubleLargeArray doubleLargeArray, long j, DoubleLargeArray doubleLargeArray2, long j2) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j3 = j;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        double d = doubleLargeArray4.getDouble(j2 + 1);
        double d2 = doubleLargeArray4.getDouble(j2 + 2);
        double d3 = doubleLargeArray4.getDouble(j2 + 3);
        long j4 = j3 + 16;
        double d4 = doubleLargeArray.getDouble(j) + doubleLargeArray3.getDouble(j4);
        long j5 = j3 + 1;
        long j6 = j3 + 17;
        double d5 = doubleLargeArray3.getDouble(j5) + doubleLargeArray3.getDouble(j6);
        double d6 = doubleLargeArray.getDouble(j) - doubleLargeArray3.getDouble(j4);
        double d7 = doubleLargeArray3.getDouble(j5) - doubleLargeArray3.getDouble(j6);
        long j7 = j5;
        long j8 = j3 + 8;
        long j9 = j6;
        long j10 = j3 + 24;
        double d8 = doubleLargeArray3.getDouble(j8) + doubleLargeArray3.getDouble(j10);
        long j11 = j4;
        long j12 = j3 + 9;
        double d9 = d;
        long j13 = j3 + 25;
        double d10 = doubleLargeArray3.getDouble(j12) + doubleLargeArray3.getDouble(j13);
        double d11 = doubleLargeArray3.getDouble(j8) - doubleLargeArray3.getDouble(j10);
        double d12 = doubleLargeArray3.getDouble(j12) - doubleLargeArray3.getDouble(j13);
        double d13 = d4 + d8;
        double d14 = d5 + d10;
        double d15 = d4 - d8;
        double d16 = d5 - d10;
        double d17 = d6 - d12;
        double d18 = d7 + d11;
        double d19 = d6 + d12;
        double d20 = d7 - d11;
        long j14 = j12;
        long j15 = j3 + 2;
        long j16 = j8;
        long j17 = j3 + 18;
        double d21 = doubleLargeArray3.getDouble(j15) + doubleLargeArray3.getDouble(j17);
        long j18 = j13;
        long j19 = j3 + 3;
        long j20 = j3 + 19;
        double d22 = doubleLargeArray3.getDouble(j19) + doubleLargeArray3.getDouble(j20);
        double d23 = doubleLargeArray3.getDouble(j15) - doubleLargeArray3.getDouble(j17);
        double d24 = doubleLargeArray3.getDouble(j19) - doubleLargeArray3.getDouble(j20);
        long j21 = j19;
        long j22 = j3 + 10;
        long j23 = j15;
        long j24 = j3 + 26;
        double d25 = doubleLargeArray3.getDouble(j22) + doubleLargeArray3.getDouble(j24);
        long j25 = j20;
        long j26 = j3 + 11;
        long j27 = j17;
        long j28 = j3 + 27;
        double d26 = doubleLargeArray3.getDouble(j26) + doubleLargeArray3.getDouble(j28);
        double d27 = doubleLargeArray3.getDouble(j22) - doubleLargeArray3.getDouble(j24);
        double d28 = doubleLargeArray3.getDouble(j26) - doubleLargeArray3.getDouble(j28);
        double d29 = d21 + d25;
        double d30 = d22 + d26;
        double d31 = d21 - d25;
        double d32 = d22 - d26;
        double d33 = d23 - d28;
        double d34 = d24 + d27;
        double d35 = (d2 * d33) - (d3 * d34);
        double d36 = (d34 * d2) + (d33 * d3);
        double d37 = d23 + d28;
        double d38 = d24 - d27;
        double d39 = (d3 * d37) - (d2 * d38);
        double d40 = (d38 * d3) + (d37 * d2);
        long j29 = j26;
        long j30 = j3 + 4;
        long j31 = j22;
        long j32 = j3 + 20;
        double d41 = doubleLargeArray3.getDouble(j30) + doubleLargeArray3.getDouble(j32);
        long j33 = j28;
        long j34 = j3 + 5;
        long j35 = j24;
        long j36 = j3 + 21;
        double d42 = doubleLargeArray3.getDouble(j34) + doubleLargeArray3.getDouble(j36);
        double d43 = doubleLargeArray3.getDouble(j30) - doubleLargeArray3.getDouble(j32);
        double d44 = doubleLargeArray3.getDouble(j34) - doubleLargeArray3.getDouble(j36);
        long j37 = j34;
        long j38 = j3 + 12;
        long j39 = j30;
        long j40 = j3 + 28;
        double d45 = doubleLargeArray3.getDouble(j38) + doubleLargeArray3.getDouble(j40);
        long j41 = j36;
        long j42 = j3 + 13;
        long j43 = j32;
        long j44 = j3 + 29;
        double d46 = doubleLargeArray3.getDouble(j42) + doubleLargeArray3.getDouble(j44);
        double d47 = doubleLargeArray3.getDouble(j38) - doubleLargeArray3.getDouble(j40);
        double d48 = doubleLargeArray3.getDouble(j42) - doubleLargeArray3.getDouble(j44);
        double d49 = d41 + d45;
        double d50 = d42 + d46;
        double d51 = d41 - d45;
        double d52 = d42 - d46;
        double d53 = d43 - d48;
        double d54 = d44 + d47;
        double d55 = (d53 - d54) * d9;
        double d56 = d9 * (d54 + d53);
        double d57 = d43 + d48;
        double d58 = d44 - d47;
        double d59 = (d57 + d58) * d9;
        double d60 = d9 * (d58 - d57);
        long j45 = j42;
        long j46 = j3 + 6;
        long j47 = j38;
        long j48 = j3 + 22;
        double d61 = doubleLargeArray3.getDouble(j46) + doubleLargeArray3.getDouble(j48);
        long j49 = j44;
        long j50 = j3 + 7;
        long j51 = j40;
        long j52 = j3 + 23;
        double d62 = doubleLargeArray3.getDouble(j50) + doubleLargeArray3.getDouble(j52);
        double d63 = doubleLargeArray3.getDouble(j46) - doubleLargeArray3.getDouble(j48);
        double d64 = doubleLargeArray3.getDouble(j50) - doubleLargeArray3.getDouble(j52);
        long j53 = j50;
        long j54 = j3 + 14;
        long j55 = j46;
        long j56 = j3 + 30;
        double d65 = doubleLargeArray3.getDouble(j54) + doubleLargeArray3.getDouble(j56);
        long j57 = j52;
        long j58 = j3 + 15;
        long j59 = j48;
        long j60 = j3 + 31;
        double d66 = doubleLargeArray3.getDouble(j58) + doubleLargeArray3.getDouble(j60);
        double d67 = doubleLargeArray3.getDouble(j54) - doubleLargeArray3.getDouble(j56);
        double d68 = doubleLargeArray3.getDouble(j58) - doubleLargeArray3.getDouble(j60);
        double d69 = d61 + d65;
        double d70 = d62 + d66;
        double d71 = d61 - d65;
        double d72 = d62 - d66;
        double d73 = d63 - d68;
        double d74 = d64 + d67;
        double d75 = (d3 * d73) - (d2 * d74);
        double d76 = (d74 * d3) + (d73 * d2);
        double d77 = d63 + d68;
        double d78 = d64 - d67;
        double d79 = (d2 * d77) - (d3 * d78);
        double d80 = (d2 * d78) + (d3 * d77);
        double d81 = d19 - d59;
        double d82 = d20 - d60;
        double d83 = d19 + d59;
        double d84 = d20 + d60;
        double d85 = d39 - d79;
        double d86 = d40 - d80;
        double d87 = d39 + d79;
        double d88 = d40 + d80;
        doubleLargeArray3.setDouble(j10, d81 + d85);
        doubleLargeArray3.setDouble(j18, d82 + d86);
        doubleLargeArray3.setDouble(j35, d81 - d85);
        doubleLargeArray3.setDouble(j33, d82 - d86);
        doubleLargeArray3.setDouble(j51, d83 - d88);
        doubleLargeArray3.setDouble(j49, d84 + d87);
        doubleLargeArray3.setDouble(j56, d83 + d88);
        doubleLargeArray3.setDouble(j60, d84 - d87);
        double d89 = d17 + d55;
        double d90 = d18 + d56;
        double d91 = d17 - d55;
        double d92 = d18 - d56;
        double d93 = d35 + d75;
        double d94 = d36 + d76;
        double d95 = d35 - d75;
        double d96 = d36 - d76;
        long j61 = j58;
        doubleLargeArray3.setDouble(j11, d89 + d93);
        doubleLargeArray3.setDouble(j9, d90 + d94);
        doubleLargeArray3.setDouble(j27, d89 - d93);
        doubleLargeArray3.setDouble(j25, d90 - d94);
        doubleLargeArray3.setDouble(j43, d91 - d96);
        doubleLargeArray3.setDouble(j41, d92 + d95);
        doubleLargeArray3.setDouble(j59, d91 + d96);
        doubleLargeArray3.setDouble(j57, d92 - d95);
        double d97 = d31 - d72;
        double d98 = d32 + d71;
        double d99 = (d97 - d98) * d9;
        double d100 = d9 * (d98 + d97);
        double d101 = d31 + d72;
        double d102 = d32 - d71;
        double d103 = d9 * (d102 + d101);
        double d104 = d15 - d52;
        double d105 = d16 + d51;
        double d106 = d15 + d52;
        double d107 = d16 - d51;
        long j62 = j54;
        double d108 = (d101 - d102) * d9;
        doubleLargeArray3.setDouble(j16, d104 + d99);
        doubleLargeArray3.setDouble(j14, d105 + d100);
        doubleLargeArray3.setDouble(j31, d104 - d99);
        doubleLargeArray3.setDouble(j29, d105 - d100);
        doubleLargeArray3.setDouble(j47, d106 - d103);
        doubleLargeArray3.setDouble(j45, d107 + d108);
        doubleLargeArray3.setDouble(j62, d106 + d103);
        doubleLargeArray3.setDouble(j61, d107 - d108);
        double d109 = d13 + d49;
        double d110 = d14 + d50;
        double d111 = d13 - d49;
        double d112 = d14 - d50;
        double d113 = d29 + d69;
        double d114 = d30 + d70;
        double d115 = d29 - d69;
        double d116 = d30 - d70;
        doubleLargeArray3.setDouble(j, d109 + d113);
        doubleLargeArray3.setDouble(j7, d110 + d114);
        doubleLargeArray3.setDouble(j23, d109 - d113);
        doubleLargeArray3.setDouble(j21, d110 - d114);
        doubleLargeArray3.setDouble(j39, d111 - d116);
        doubleLargeArray3.setDouble(j37, d112 + d115);
        doubleLargeArray3.setDouble(j55, d111 + d116);
        doubleLargeArray3.setDouble(j53, d112 - d115);
    }

    public static void cftf162(double[] dArr, int i, double[] dArr2, int i2) {
        double d = dArr2[i2 + 1];
        double d2 = dArr2[i2 + 4];
        double d3 = dArr2[i2 + 5];
        double d4 = dArr2[i2 + 6];
        double d5 = -dArr2[i2 + 7];
        double d6 = dArr2[i2 + 8];
        double d7 = dArr2[i2 + 9];
        double d8 = dArr[i];
        int i3 = i + 17;
        double d9 = dArr[i3];
        double d10 = d8 - d9;
        int i4 = i + 1;
        double d11 = dArr[i4];
        int i5 = i + 16;
        double d12 = dArr[i5];
        double d13 = d11 + d12;
        int i6 = i + 8;
        double d14 = dArr[i6];
        int i7 = i + 25;
        double d15 = dArr[i7];
        double d16 = d14 - d15;
        int i8 = i + 9;
        double d17 = dArr[i8];
        int i9 = i + 24;
        double d18 = dArr[i9];
        double d19 = d17 + d18;
        double d20 = (d16 - d19) * d;
        double d21 = (d19 + d16) * d;
        double d22 = d10 + d20;
        double d23 = d13 + d21;
        double d24 = d10 - d20;
        double d25 = d13 - d21;
        double d26 = d8 + d9;
        double d27 = d11 - d12;
        double d28 = d14 + d15;
        double d29 = d17 - d18;
        double d30 = (d28 - d29) * d;
        double d31 = (d29 + d28) * d;
        double d32 = d26 - d31;
        double d33 = d27 + d30;
        double d34 = d26 + d31;
        double d35 = d27 - d30;
        int i10 = i + 2;
        double d36 = dArr[i10];
        int i11 = i + 19;
        double d37 = dArr[i11];
        double d38 = d36 - d37;
        int i12 = i + 3;
        double d39 = dArr[i12];
        int i13 = i + 18;
        double d40 = dArr[i13];
        double d41 = d39 + d40;
        double d42 = (d2 * d38) - (d3 * d41);
        double d43 = (d41 * d2) + (d38 * d3);
        int i14 = i + 10;
        double d44 = dArr[i14];
        int i15 = i + 27;
        double d45 = dArr[i15];
        double d46 = d44 - d45;
        int i16 = i + 11;
        double d47 = dArr[i16];
        int i17 = i + 26;
        double d48 = dArr[i17];
        double d49 = d47 + d48;
        double d50 = (d5 * d46) - (d4 * d49);
        double d51 = (d49 * d5) + (d46 * d4);
        double d52 = d42 + d50;
        double d53 = d43 + d51;
        double d54 = d42 - d50;
        double d55 = d43 - d51;
        double d56 = d36 + d37;
        double d57 = d39 - d40;
        double d58 = (d4 * d56) - (d5 * d57);
        double d59 = (d57 * d4) + (d56 * d5);
        double d60 = d44 + d45;
        double d61 = d47 - d48;
        double d62 = (d2 * d60) + (d3 * d61);
        double d63 = (d61 * d2) - (d60 * d3);
        double d64 = d58 - d62;
        double d65 = d59 - d63;
        double d66 = d58 + d62;
        double d67 = d59 + d63;
        int i18 = i + 4;
        double d68 = dArr[i18];
        int i19 = i + 21;
        double d69 = dArr[i19];
        double d70 = d68 - d69;
        int i20 = i + 5;
        double d71 = dArr[i20];
        int i21 = i + 20;
        double d72 = dArr[i21];
        double d73 = d71 + d72;
        double d74 = (d6 * d70) - (d7 * d73);
        double d75 = (d73 * d6) + (d70 * d7);
        int i22 = i + 12;
        double d76 = dArr[i22];
        int i23 = i + 29;
        double d77 = dArr[i23];
        double d78 = d76 - d77;
        int i24 = i + 13;
        double d79 = dArr[i24];
        int i25 = i + 28;
        double d80 = dArr[i25];
        double d81 = d79 + d80;
        double d82 = (d7 * d78) - (d6 * d81);
        double d83 = (d81 * d7) + (d78 * d6);
        double d84 = d74 + d82;
        double d85 = d75 + d83;
        double d86 = d74 - d82;
        double d87 = d75 - d83;
        double d88 = d68 + d69;
        double d89 = d71 - d72;
        double d90 = (d7 * d88) - (d6 * d89);
        double d91 = (d89 * d7) + (d88 * d6);
        double d92 = d76 + d77;
        double d93 = d79 - d80;
        double d94 = (d6 * d92) - (d7 * d93);
        double d95 = (d6 * d93) + (d7 * d92);
        double d96 = d90 - d94;
        double d97 = d91 - d95;
        double d98 = d90 + d94;
        double d99 = d91 + d95;
        int i26 = i + 6;
        double d100 = dArr[i26];
        int i27 = i + 23;
        double d101 = dArr[i27];
        double d102 = d100 - d101;
        int i28 = i + 7;
        double d103 = dArr[i28];
        int i29 = i + 22;
        double d104 = dArr[i29];
        double d105 = d103 + d104;
        double d106 = (d4 * d102) - (d5 * d105);
        double d107 = (d105 * d4) + (d102 * d5);
        int i30 = i + 14;
        double d108 = dArr[i30];
        int i31 = i + 31;
        double d109 = dArr[i31];
        double d110 = d108 - d109;
        int i32 = i + 15;
        double d111 = dArr[i32];
        int i33 = i + 30;
        double d112 = dArr[i33];
        double d113 = d111 + d112;
        double d114 = (d3 * d110) - (d2 * d113);
        double d115 = (d113 * d3) + (d110 * d2);
        double d116 = d106 + d114;
        double d117 = d107 + d115;
        double d118 = d106 - d114;
        double d119 = d107 - d115;
        double d120 = d100 + d101;
        double d121 = d103 - d104;
        double d122 = (d3 * d120) + (d2 * d121);
        double d123 = (d3 * d121) - (d2 * d120);
        double d124 = d108 + d109;
        double d125 = d111 - d112;
        double d126 = (d5 * d124) - (d4 * d125);
        double d127 = (d5 * d125) + (d4 * d124);
        double d128 = d122 + d126;
        double d129 = d123 + d127;
        double d130 = d122 - d126;
        double d131 = d123 - d127;
        double d132 = d22 + d84;
        double d133 = d23 + d85;
        double d134 = d52 + d116;
        double d135 = d53 + d117;
        dArr[i] = d132 + d134;
        dArr[i4] = d133 + d135;
        dArr[i10] = d132 - d134;
        dArr[i12] = d133 - d135;
        double d136 = d22 - d84;
        double d137 = d23 - d85;
        double d138 = d52 - d116;
        double d139 = d53 - d117;
        dArr[i18] = d136 - d139;
        dArr[i20] = d137 + d138;
        dArr[i26] = d136 + d139;
        dArr[i28] = d137 - d138;
        double d140 = d24 - d87;
        double d141 = d25 + d86;
        double d142 = d54 - d119;
        double d143 = d55 + d118;
        double d144 = (d142 - d143) * d;
        double d145 = (d143 + d142) * d;
        dArr[i6] = d140 + d144;
        dArr[i8] = d141 + d145;
        dArr[i14] = d140 - d144;
        dArr[i16] = d141 - d145;
        double d146 = d24 + d87;
        double d147 = d25 - d86;
        double d148 = d54 + d119;
        double d149 = d55 - d118;
        double d150 = (d148 - d149) * d;
        double d151 = (d149 + d148) * d;
        dArr[i22] = d146 - d151;
        dArr[i24] = d147 + d150;
        dArr[i30] = d146 + d151;
        dArr[i32] = d147 - d150;
        double d152 = d32 + d96;
        double d153 = d33 + d97;
        double d154 = d64 - d128;
        double d155 = d65 - d129;
        dArr[i5] = d152 + d154;
        dArr[i3] = d153 + d155;
        dArr[i13] = d152 - d154;
        dArr[i11] = d153 - d155;
        double d156 = d32 - d96;
        double d157 = d33 - d97;
        double d158 = d64 + d128;
        double d159 = d65 + d129;
        dArr[i21] = d156 - d159;
        dArr[i19] = d157 + d158;
        dArr[i29] = d156 + d159;
        dArr[i27] = d157 - d158;
        double d160 = d34 - d99;
        double d161 = d35 + d98;
        double d162 = d66 + d131;
        double d163 = d67 - d130;
        double d164 = (d162 - d163) * d;
        double d165 = (d163 + d162) * d;
        dArr[i9] = d160 + d164;
        dArr[i7] = d161 + d165;
        dArr[i17] = d160 - d164;
        dArr[i15] = d161 - d165;
        double d166 = d34 + d99;
        double d167 = d35 - d98;
        double d168 = d66 - d131;
        double d169 = d67 + d130;
        double d170 = (d168 - d169) * d;
        double d171 = d * (d169 + d168);
        dArr[i25] = d166 - d171;
        dArr[i23] = d167 + d170;
        dArr[i33] = d166 + d171;
        dArr[i31] = d167 - d170;
    }

    public static void cftf162(DoubleLargeArray doubleLargeArray, long j, DoubleLargeArray doubleLargeArray2, long j2) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j3 = j;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        double d = doubleLargeArray4.getDouble(j2 + 1);
        double d2 = doubleLargeArray4.getDouble(j2 + 4);
        double d3 = doubleLargeArray4.getDouble(j2 + 5);
        double d4 = doubleLargeArray4.getDouble(j2 + 6);
        double d5 = doubleLargeArray4.getDouble(j2 + 8);
        double d6 = doubleLargeArray4.getDouble(j2 + 9);
        long j4 = j3 + 17;
        double d7 = doubleLargeArray.getDouble(j) - doubleLargeArray3.getDouble(j4);
        double d8 = d4;
        long j5 = j3 + 1;
        double d9 = -doubleLargeArray4.getDouble(j2 + 7);
        long j6 = j3 + 16;
        double d10 = doubleLargeArray3.getDouble(j5) + doubleLargeArray3.getDouble(j6);
        double d11 = d3;
        long j7 = j3 + 8;
        double d12 = d2;
        long j8 = j3 + 25;
        double d13 = doubleLargeArray3.getDouble(j7) - doubleLargeArray3.getDouble(j8);
        long j9 = j8;
        long j10 = j3 + 9;
        double d14 = doubleLargeArray3.getDouble(j10);
        long j11 = j10;
        long j12 = j3 + 24;
        double d15 = d14 + doubleLargeArray3.getDouble(j12);
        double d16 = (d13 - d15) * d;
        double d17 = (d15 + d13) * d;
        double d18 = d7 + d16;
        double d19 = d10 + d17;
        double d20 = d7 - d16;
        double d21 = d10 - d17;
        double d22 = doubleLargeArray.getDouble(j) + doubleLargeArray3.getDouble(j4);
        double d23 = doubleLargeArray3.getDouble(j5) - doubleLargeArray3.getDouble(j6);
        long j13 = j4;
        long j14 = j9;
        double d24 = doubleLargeArray3.getDouble(j7) + doubleLargeArray3.getDouble(j14);
        long j15 = j14;
        long j16 = j11;
        double d25 = doubleLargeArray3.getDouble(j16) - doubleLargeArray3.getDouble(j12);
        double d26 = (d24 - d25) * d;
        double d27 = (d25 + d24) * d;
        double d28 = d22 - d27;
        double d29 = d23 + d26;
        double d30 = d22 + d27;
        double d31 = d23 - d26;
        long j17 = j12;
        long j18 = j3 + 2;
        long j19 = j6;
        long j20 = j3 + 19;
        double d32 = doubleLargeArray3.getDouble(j18) - doubleLargeArray3.getDouble(j20);
        long j21 = j16;
        long j22 = j3 + 3;
        long j23 = j7;
        long j24 = j3 + 18;
        double d33 = doubleLargeArray3.getDouble(j22) + doubleLargeArray3.getDouble(j24);
        double d34 = (d12 * d32) - (d11 * d33);
        double d35 = (d33 * d12) + (d32 * d11);
        double d36 = d;
        long j25 = j3 + 10;
        long j26 = j5;
        long j27 = j3 + 27;
        double d37 = doubleLargeArray3.getDouble(j25) - doubleLargeArray3.getDouble(j27);
        long j28 = j27;
        long j29 = j3 + 11;
        double d38 = doubleLargeArray3.getDouble(j29);
        long j30 = j29;
        long j31 = j3 + 26;
        double d39 = d38 + doubleLargeArray3.getDouble(j31);
        double d40 = (d9 * d37) - (d8 * d39);
        double d41 = (d39 * d9) + (d37 * d8);
        double d42 = d34 + d40;
        double d43 = d35 + d41;
        double d44 = d34 - d40;
        double d45 = d35 - d41;
        double d46 = doubleLargeArray3.getDouble(j18) + doubleLargeArray3.getDouble(j20);
        double d47 = doubleLargeArray3.getDouble(j22) - doubleLargeArray3.getDouble(j24);
        double d48 = (d8 * d46) - (d9 * d47);
        double d49 = (d47 * d8) + (d46 * d9);
        long j32 = j28;
        double d50 = doubleLargeArray3.getDouble(j25) + doubleLargeArray3.getDouble(j32);
        long j33 = j32;
        long j34 = j30;
        double d51 = doubleLargeArray3.getDouble(j34) - doubleLargeArray3.getDouble(j31);
        double d52 = (d12 * d50) + (d11 * d51);
        double d53 = (d51 * d12) - (d50 * d11);
        double d54 = d48 - d52;
        double d55 = d49 - d53;
        double d56 = d48 + d52;
        double d57 = d49 + d53;
        long j35 = j31;
        long j36 = j3 + 4;
        long j37 = j24;
        long j38 = j3 + 21;
        double d58 = doubleLargeArray3.getDouble(j36) - doubleLargeArray3.getDouble(j38);
        long j39 = j34;
        long j40 = j3 + 5;
        long j41 = j25;
        long j42 = j3 + 20;
        double d59 = doubleLargeArray3.getDouble(j40) + doubleLargeArray3.getDouble(j42);
        double d60 = d6;
        double d61 = (d5 * d58) - (d60 * d59);
        double d62 = (d59 * d5) + (d58 * d60);
        long j43 = j22;
        long j44 = j3 + 12;
        long j45 = j3 + 29;
        double d63 = doubleLargeArray3.getDouble(j44) - doubleLargeArray3.getDouble(j45);
        long j46 = j45;
        long j47 = j3 + 13;
        double d64 = doubleLargeArray3.getDouble(j47);
        long j48 = j47;
        long j49 = j3 + 28;
        double d65 = d64 + doubleLargeArray3.getDouble(j49);
        double d66 = (d60 * d63) - (d5 * d65);
        double d67 = (d65 * d60) + (d63 * d5);
        double d68 = d61 + d66;
        double d69 = d62 + d67;
        double d70 = d61 - d66;
        double d71 = d62 - d67;
        double d72 = doubleLargeArray3.getDouble(j36) + doubleLargeArray3.getDouble(j38);
        double d73 = doubleLargeArray3.getDouble(j40) - doubleLargeArray3.getDouble(j42);
        double d74 = (d60 * d72) - (d5 * d73);
        double d75 = (d73 * d60) + (d72 * d5);
        long j50 = j38;
        long j51 = j46;
        double d76 = doubleLargeArray3.getDouble(j44) + doubleLargeArray3.getDouble(j51);
        long j52 = j51;
        long j53 = j48;
        double d77 = doubleLargeArray3.getDouble(j53) - doubleLargeArray3.getDouble(j49);
        double d78 = (d5 * d76) - (d60 * d77);
        double d79 = (d5 * d77) + (d60 * d76);
        double d80 = d74 - d78;
        double d81 = d75 - d79;
        double d82 = d74 + d78;
        double d83 = d75 + d79;
        long j54 = j49;
        long j55 = j3 + 6;
        long j56 = j42;
        long j57 = j3 + 23;
        double d84 = doubleLargeArray3.getDouble(j55) - doubleLargeArray3.getDouble(j57);
        long j58 = j53;
        long j59 = j3 + 7;
        long j60 = j44;
        long j61 = j3 + 22;
        double d85 = doubleLargeArray3.getDouble(j59) + doubleLargeArray3.getDouble(j61);
        double d86 = (d8 * d84) - (d9 * d85);
        double d87 = (d85 * d8) + (d84 * d9);
        long j62 = j40;
        long j63 = j3 + 14;
        long j64 = j3 + 31;
        double d88 = doubleLargeArray3.getDouble(j63) - doubleLargeArray3.getDouble(j64);
        long j65 = j64;
        long j66 = j3 + 15;
        double d89 = doubleLargeArray3.getDouble(j66);
        long j67 = j66;
        long j68 = j3 + 30;
        double d90 = d89 + doubleLargeArray3.getDouble(j68);
        double d91 = (d11 * d88) - (d12 * d90);
        double d92 = (d90 * d11) + (d88 * d12);
        double d93 = d86 + d91;
        double d94 = d87 + d92;
        double d95 = d86 - d91;
        double d96 = d87 - d92;
        double d97 = doubleLargeArray3.getDouble(j55) + doubleLargeArray3.getDouble(j57);
        double d98 = doubleLargeArray3.getDouble(j59) - doubleLargeArray3.getDouble(j61);
        double d99 = (d11 * d97) + (d12 * d98);
        double d100 = (d11 * d98) - (d12 * d97);
        long j69 = j57;
        long j70 = j65;
        double d101 = doubleLargeArray3.getDouble(j63) + doubleLargeArray3.getDouble(j70);
        long j71 = j70;
        long j72 = j67;
        double d102 = doubleLargeArray3.getDouble(j72) - doubleLargeArray3.getDouble(j68);
        double d103 = (d9 * d101) - (d8 * d102);
        double d104 = (d9 * d102) + (d8 * d101);
        double d105 = d99 + d103;
        double d106 = d100 + d104;
        double d107 = d99 - d103;
        double d108 = d100 - d104;
        double d109 = d18 + d68;
        double d110 = d19 + d69;
        double d111 = d42 + d93;
        double d112 = d43 + d94;
        long j73 = j68;
        doubleLargeArray3.setDouble(j3, d109 + d111);
        doubleLargeArray3.setDouble(j26, d110 + d112);
        doubleLargeArray3.setDouble(j18, d109 - d111);
        doubleLargeArray3.setDouble(j43, d110 - d112);
        double d113 = d18 - d68;
        double d114 = d19 - d69;
        double d115 = d42 - d93;
        double d116 = d43 - d94;
        doubleLargeArray3.setDouble(j36, d113 - d116);
        doubleLargeArray3.setDouble(j62, d114 + d115);
        doubleLargeArray3.setDouble(j55, d113 + d116);
        doubleLargeArray3.setDouble(j59, d114 - d115);
        double d117 = d20 - d71;
        double d118 = d21 + d70;
        double d119 = d44 - d96;
        double d120 = d45 + d95;
        double d121 = (d119 - d120) * d36;
        double d122 = d36 * (d120 + d119);
        long j74 = j61;
        doubleLargeArray3.setDouble(j23, d117 + d121);
        doubleLargeArray3.setDouble(j21, d118 + d122);
        doubleLargeArray3.setDouble(j41, d117 - d121);
        doubleLargeArray3.setDouble(j39, d118 - d122);
        double d123 = d20 + d71;
        double d124 = d21 - d70;
        double d125 = d44 + d96;
        double d126 = d45 - d95;
        double d127 = (d125 - d126) * d36;
        double d128 = d36 * (d126 + d125);
        doubleLargeArray3.setDouble(j60, d123 - d128);
        doubleLargeArray3.setDouble(j58, d124 + d127);
        doubleLargeArray3.setDouble(j63, d123 + d128);
        doubleLargeArray3.setDouble(j72, d124 - d127);
        double d129 = d28 + d80;
        double d130 = d29 + d81;
        double d131 = d54 - d105;
        double d132 = d55 - d106;
        doubleLargeArray3.setDouble(j19, d129 + d131);
        doubleLargeArray3.setDouble(j13, d130 + d132);
        doubleLargeArray3.setDouble(j37, d129 - d131);
        doubleLargeArray3.setDouble(j20, d130 - d132);
        double d133 = d28 - d80;
        double d134 = d29 - d81;
        double d135 = d54 + d105;
        double d136 = d55 + d106;
        doubleLargeArray3.setDouble(j56, d133 - d136);
        doubleLargeArray3.setDouble(j50, d134 + d135);
        doubleLargeArray3.setDouble(j74, d133 + d136);
        doubleLargeArray3.setDouble(j69, d134 - d135);
        double d137 = d30 - d83;
        double d138 = d31 + d82;
        double d139 = d56 + d108;
        double d140 = d57 - d107;
        double d141 = (d139 - d140) * d36;
        double d142 = d36 * (d140 + d139);
        doubleLargeArray3.setDouble(j17, d137 + d141);
        doubleLargeArray3.setDouble(j15, d138 + d142);
        doubleLargeArray3.setDouble(j35, d137 - d141);
        doubleLargeArray3.setDouble(j33, d138 - d142);
        double d143 = d30 + d83;
        double d144 = d31 - d82;
        double d145 = d56 - d108;
        double d146 = d57 + d107;
        double d147 = d36 * (d145 - d146);
        double d148 = d36 * (d146 + d145);
        doubleLargeArray3.setDouble(j54, d143 - d148);
        doubleLargeArray3.setDouble(j52, d144 + d147);
        doubleLargeArray3.setDouble(j73, d143 + d148);
        doubleLargeArray3.setDouble(j71, d144 - d147);
    }

    public static void cftf081(double[] dArr, int i, double[] dArr2, int i2) {
        double d = dArr2[i2 + 1];
        double d2 = dArr[i];
        int i3 = i + 8;
        double d3 = dArr[i3];
        double d4 = d2 + d3;
        int i4 = i + 1;
        double d5 = dArr[i4];
        int i5 = i + 9;
        double d6 = dArr[i5];
        double d7 = d5 + d6;
        double d8 = d2 - d3;
        double d9 = d5 - d6;
        int i6 = i + 4;
        double d10 = dArr[i6];
        int i7 = i + 12;
        double d11 = dArr[i7];
        double d12 = d10 + d11;
        int i8 = i + 5;
        double d13 = dArr[i8];
        int i9 = i + 13;
        double d14 = dArr[i9];
        double d15 = d13 + d14;
        double d16 = d10 - d11;
        double d17 = d13 - d14;
        double d18 = d4 + d12;
        double d19 = d7 + d15;
        double d20 = d4 - d12;
        double d21 = d7 - d15;
        double d22 = d8 - d17;
        double d23 = d9 + d16;
        double d24 = d8 + d17;
        double d25 = d9 - d16;
        int i10 = i + 2;
        double d26 = dArr[i10];
        int i11 = i + 10;
        double d27 = dArr[i11];
        double d28 = d26 + d27;
        int i12 = i + 3;
        double d29 = dArr[i12];
        int i13 = i + 11;
        double d30 = dArr[i13];
        double d31 = d29 + d30;
        double d32 = d26 - d27;
        double d33 = d29 - d30;
        int i14 = i + 6;
        double d34 = dArr[i14];
        int i15 = i + 14;
        double d35 = dArr[i15];
        double d36 = d34 + d35;
        int i16 = i + 7;
        double d37 = dArr[i16];
        int i17 = i + 15;
        double d38 = dArr[i17];
        double d39 = d37 + d38;
        double d40 = d34 - d35;
        double d41 = d37 - d38;
        double d42 = d28 + d36;
        double d43 = d31 + d39;
        double d44 = d28 - d36;
        double d45 = d31 - d39;
        double d46 = d32 - d41;
        double d47 = d33 + d40;
        double d48 = d32 + d41;
        double d49 = d33 - d40;
        double d50 = (d46 - d47) * d;
        double d51 = (d46 + d47) * d;
        double d52 = (d48 - d49) * d;
        double d53 = d * (d48 + d49);
        dArr[i3] = d22 + d50;
        dArr[i5] = d23 + d51;
        dArr[i11] = d22 - d50;
        dArr[i13] = d23 - d51;
        dArr[i7] = d24 - d53;
        dArr[i9] = d25 + d52;
        dArr[i15] = d24 + d53;
        dArr[i17] = d25 - d52;
        dArr[i] = d18 + d42;
        dArr[i4] = d19 + d43;
        dArr[i10] = d18 - d42;
        dArr[i12] = d19 - d43;
        dArr[i6] = d20 - d45;
        dArr[i8] = d21 + d44;
        dArr[i14] = d20 + d45;
        dArr[i16] = d21 - d44;
    }

    public static void cftf081(DoubleLargeArray doubleLargeArray, long j, DoubleLargeArray doubleLargeArray2, long j2) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j3 = j;
        double d = doubleLargeArray2.getDouble(j2 + 1);
        long j4 = 8 + j3;
        double d2 = doubleLargeArray.getDouble(j) + doubleLargeArray3.getDouble(j4);
        long j5 = 1 + j3;
        long j6 = 9 + j3;
        double d3 = doubleLargeArray3.getDouble(j5) + doubleLargeArray3.getDouble(j6);
        double d4 = doubleLargeArray.getDouble(j) - doubleLargeArray3.getDouble(j4);
        double d5 = doubleLargeArray3.getDouble(j5) - doubleLargeArray3.getDouble(j6);
        long j7 = j5;
        long j8 = j3 + 4;
        long j9 = j6;
        long j10 = j3 + 12;
        double d6 = doubleLargeArray3.getDouble(j8) + doubleLargeArray3.getDouble(j10);
        long j11 = j4;
        long j12 = j3 + 5;
        double d7 = d;
        long j13 = j3 + 13;
        double d8 = doubleLargeArray3.getDouble(j12) + doubleLargeArray3.getDouble(j13);
        double d9 = doubleLargeArray3.getDouble(j8) - doubleLargeArray3.getDouble(j10);
        double d10 = doubleLargeArray3.getDouble(j12) - doubleLargeArray3.getDouble(j13);
        double d11 = d2 + d6;
        double d12 = d3 + d8;
        double d13 = d2 - d6;
        double d14 = d3 - d8;
        double d15 = d4 - d10;
        double d16 = d5 + d9;
        double d17 = d4 + d10;
        double d18 = d5 - d9;
        long j14 = j12;
        long j15 = j3 + 2;
        double d19 = d14;
        long j16 = j3 + 10;
        double d20 = doubleLargeArray3.getDouble(j15) + doubleLargeArray3.getDouble(j16);
        long j17 = j8;
        long j18 = j3 + 3;
        double d21 = d13;
        long j19 = j3 + 11;
        double d22 = doubleLargeArray3.getDouble(j18) + doubleLargeArray3.getDouble(j19);
        double d23 = doubleLargeArray3.getDouble(j15) - doubleLargeArray3.getDouble(j16);
        double d24 = doubleLargeArray3.getDouble(j18) - doubleLargeArray3.getDouble(j19);
        long j20 = j18;
        long j21 = j3 + 6;
        long j22 = j15;
        long j23 = j3 + 14;
        double d25 = doubleLargeArray3.getDouble(j21) + doubleLargeArray3.getDouble(j23);
        long j24 = j13;
        long j25 = j3 + 7;
        long j26 = j10;
        long j27 = j3 + 15;
        double d26 = doubleLargeArray3.getDouble(j25) + doubleLargeArray3.getDouble(j27);
        double d27 = doubleLargeArray3.getDouble(j21) - doubleLargeArray3.getDouble(j23);
        double d28 = doubleLargeArray3.getDouble(j25) - doubleLargeArray3.getDouble(j27);
        double d29 = d20 + d25;
        double d30 = d22 + d26;
        double d31 = d20 - d25;
        double d32 = d22 - d26;
        double d33 = d23 - d28;
        double d34 = d24 + d27;
        double d35 = d23 + d28;
        double d36 = d24 - d27;
        double d37 = (d33 - d34) * d7;
        double d38 = (d33 + d34) * d7;
        double d39 = (d35 - d36) * d7;
        double d40 = d7 * (d35 + d36);
        long j28 = j25;
        long j29 = j21;
        doubleLargeArray3.setDouble(j11, d15 + d37);
        doubleLargeArray3.setDouble(j9, d16 + d38);
        doubleLargeArray3.setDouble(j16, d15 - d37);
        doubleLargeArray3.setDouble(j19, d16 - d38);
        doubleLargeArray3.setDouble(j26, d17 - d40);
        doubleLargeArray3.setDouble(j24, d18 + d39);
        doubleLargeArray3.setDouble(j23, d17 + d40);
        doubleLargeArray3.setDouble(j27, d18 - d39);
        doubleLargeArray3.setDouble(j3, d11 + d29);
        doubleLargeArray3.setDouble(j7, d12 + d30);
        doubleLargeArray3.setDouble(j22, d11 - d29);
        doubleLargeArray3.setDouble(j20, d12 - d30);
        doubleLargeArray3.setDouble(j17, d21 - d32);
        doubleLargeArray3.setDouble(j14, d19 + d31);
        doubleLargeArray3.setDouble(j29, d21 + d32);
        doubleLargeArray3.setDouble(j28, d19 - d31);
    }

    public static void cftf082(double[] dArr, int i, double[] dArr2, int i2) {
        double d = dArr2[i2 + 1];
        double d2 = dArr2[i2 + 2];
        double d3 = dArr2[i2 + 3];
        double d4 = dArr[i];
        int i3 = i + 9;
        double d5 = dArr[i3];
        double d6 = d4 - d5;
        int i4 = i + 1;
        double d7 = dArr[i4];
        int i5 = i + 8;
        double d8 = dArr[i5];
        double d9 = d7 + d8;
        double d10 = d4 + d5;
        double d11 = d7 - d8;
        int i6 = i + 4;
        double d12 = dArr[i6];
        int i7 = i + 13;
        double d13 = dArr[i7];
        double d14 = d12 - d13;
        int i8 = i + 5;
        double d15 = dArr[i8];
        int i9 = i + 12;
        double d16 = dArr[i9];
        double d17 = d15 + d16;
        double d18 = (d14 - d17) * d;
        double d19 = (d17 + d14) * d;
        double d20 = d12 + d13;
        double d21 = d15 - d16;
        double d22 = (d20 - d21) * d;
        double d23 = d * (d21 + d20);
        int i10 = i + 2;
        double d24 = dArr[i10];
        int i11 = i + 11;
        double d25 = dArr[i11];
        double d26 = d24 - d25;
        int i12 = i + 3;
        double d27 = dArr[i12];
        int i13 = i + 10;
        double d28 = dArr[i13];
        double d29 = d27 + d28;
        double d30 = (d2 * d26) - (d3 * d29);
        double d31 = (d29 * d2) + (d26 * d3);
        double d32 = d24 + d25;
        double d33 = d27 - d28;
        double d34 = (d3 * d32) - (d2 * d33);
        double d35 = (d33 * d3) + (d32 * d2);
        int i14 = i + 6;
        double d36 = dArr[i14];
        int i15 = i + 15;
        double d37 = dArr[i15];
        double d38 = d36 - d37;
        int i16 = i + 7;
        double d39 = dArr[i16];
        int i17 = i + 14;
        double d40 = dArr[i17];
        double d41 = d39 + d40;
        double d42 = (d3 * d38) - (d2 * d41);
        double d43 = (d41 * d3) + (d38 * d2);
        double d44 = d36 + d37;
        double d45 = d39 - d40;
        double d46 = (d2 * d44) - (d3 * d45);
        double d47 = (d2 * d45) + (d3 * d44);
        double d48 = d6 + d18;
        double d49 = d9 + d19;
        double d50 = d30 + d42;
        double d51 = d31 + d43;
        dArr[i] = d48 + d50;
        dArr[i4] = d49 + d51;
        dArr[i10] = d48 - d50;
        dArr[i12] = d49 - d51;
        double d52 = d6 - d18;
        double d53 = d9 - d19;
        double d54 = d30 - d42;
        double d55 = d31 - d43;
        dArr[i6] = d52 - d55;
        dArr[i8] = d53 + d54;
        dArr[i14] = d52 + d55;
        dArr[i16] = d53 - d54;
        double d56 = d10 - d23;
        double d57 = d11 + d22;
        double d58 = d34 - d46;
        double d59 = d35 - d47;
        dArr[i5] = d56 + d58;
        dArr[i3] = d57 + d59;
        dArr[i13] = d56 - d58;
        dArr[i11] = d57 - d59;
        double d60 = d10 + d23;
        double d61 = d11 - d22;
        double d62 = d34 + d46;
        double d63 = d35 + d47;
        dArr[i9] = d60 - d63;
        dArr[i7] = d61 + d62;
        dArr[i17] = d60 + d63;
        dArr[i15] = d61 - d62;
    }

    public static void cftf082(DoubleLargeArray doubleLargeArray, long j, DoubleLargeArray doubleLargeArray2, long j2) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        long j3 = j;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        double d = doubleLargeArray4.getDouble(j2 + 1);
        double d2 = doubleLargeArray4.getDouble(j2 + 2);
        double d3 = doubleLargeArray4.getDouble(j2 + 3);
        long j4 = j3 + 9;
        double d4 = doubleLargeArray.getDouble(j) - doubleLargeArray3.getDouble(j4);
        long j5 = j3 + 1;
        long j6 = j3 + 8;
        double d5 = doubleLargeArray3.getDouble(j5) + doubleLargeArray3.getDouble(j6);
        double d6 = doubleLargeArray.getDouble(j) + doubleLargeArray3.getDouble(j4);
        double d7 = doubleLargeArray3.getDouble(j5) - doubleLargeArray3.getDouble(j6);
        long j7 = j4;
        long j8 = j3 + 4;
        long j9 = j6;
        long j10 = j3 + 13;
        double d8 = doubleLargeArray3.getDouble(j8) - doubleLargeArray3.getDouble(j10);
        long j11 = j5;
        long j12 = j3 + 5;
        double d9 = d3;
        long j13 = j3 + 12;
        double d10 = doubleLargeArray3.getDouble(j12) + doubleLargeArray3.getDouble(j13);
        double d11 = (d8 - d10) * d;
        double d12 = (d10 + d8) * d;
        double d13 = doubleLargeArray3.getDouble(j8) + doubleLargeArray3.getDouble(j10);
        double d14 = doubleLargeArray3.getDouble(j12) - doubleLargeArray3.getDouble(j13);
        double d15 = (d13 - d14) * d;
        double d16 = d * (d14 + d13);
        long j14 = j10;
        long j15 = j3 + 2;
        long j16 = j13;
        long j17 = j3 + 11;
        double d17 = doubleLargeArray3.getDouble(j15) - doubleLargeArray3.getDouble(j17);
        double d18 = d16;
        long j18 = j3 + 3;
        long j19 = j12;
        long j20 = j3 + 10;
        double d19 = doubleLargeArray3.getDouble(j18) + doubleLargeArray3.getDouble(j20);
        double d20 = (d2 * d17) - (d9 * d19);
        double d21 = (d19 * d2) + (d17 * d9);
        double d22 = doubleLargeArray3.getDouble(j15) + doubleLargeArray3.getDouble(j17);
        double d23 = doubleLargeArray3.getDouble(j18) - doubleLargeArray3.getDouble(j20);
        double d24 = (d9 * d22) - (d2 * d23);
        double d25 = (d23 * d9) + (d22 * d2);
        long j21 = j17;
        long j22 = j3 + 6;
        long j23 = j20;
        long j24 = j3 + 15;
        double d26 = doubleLargeArray3.getDouble(j22) - doubleLargeArray3.getDouble(j24);
        long j25 = j8;
        long j26 = j3 + 7;
        long j27 = j18;
        long j28 = j3 + 14;
        double d27 = doubleLargeArray3.getDouble(j26) + doubleLargeArray3.getDouble(j28);
        double d28 = (d9 * d26) - (d2 * d27);
        double d29 = (d27 * d9) + (d26 * d2);
        double d30 = doubleLargeArray3.getDouble(j22) + doubleLargeArray3.getDouble(j24);
        double d31 = doubleLargeArray3.getDouble(j26) - doubleLargeArray3.getDouble(j28);
        double d32 = (d2 * d30) - (d9 * d31);
        double d33 = (d2 * d31) + (d30 * d9);
        double d34 = d4 + d11;
        double d35 = d5 + d12;
        double d36 = d20 + d28;
        double d37 = d21 + d29;
        long j29 = j24;
        doubleLargeArray3.setDouble(j3, d34 + d36);
        doubleLargeArray3.setDouble(j11, d35 + d37);
        doubleLargeArray3.setDouble(j15, d34 - d36);
        doubleLargeArray3.setDouble(j27, d35 - d37);
        double d38 = d4 - d11;
        double d39 = d5 - d12;
        double d40 = d20 - d28;
        double d41 = d21 - d29;
        doubleLargeArray3.setDouble(j25, d38 - d41);
        doubleLargeArray3.setDouble(j19, d39 + d40);
        doubleLargeArray3.setDouble(j22, d38 + d41);
        doubleLargeArray3.setDouble(j26, d39 - d40);
        double d42 = d6 - d18;
        double d43 = d7 + d15;
        double d44 = d24 - d32;
        double d45 = d25 - d33;
        long j30 = j28;
        doubleLargeArray3.setDouble(j9, d42 + d44);
        doubleLargeArray3.setDouble(j7, d43 + d45);
        doubleLargeArray3.setDouble(j23, d42 - d44);
        doubleLargeArray3.setDouble(j21, d43 - d45);
        double d46 = d6 + d18;
        double d47 = d7 - d15;
        double d48 = d24 + d32;
        double d49 = d25 + d33;
        doubleLargeArray3.setDouble(j16, d46 - d49);
        doubleLargeArray3.setDouble(j14, d47 + d48);
        doubleLargeArray3.setDouble(j30, d46 + d49);
        doubleLargeArray3.setDouble(j29, d47 - d48);
    }

    public static void cftf040(double[] dArr, int i) {
        double d = dArr[i];
        int i2 = i + 4;
        double d2 = dArr[i2];
        double d3 = d + d2;
        int i3 = i + 1;
        double d4 = dArr[i3];
        int i4 = i + 5;
        double d5 = dArr[i4];
        double d6 = d4 + d5;
        double d7 = d - d2;
        double d8 = d4 - d5;
        int i5 = i + 2;
        double d9 = dArr[i5];
        int i6 = i + 6;
        double d10 = dArr[i6];
        double d11 = d9 + d10;
        int i7 = i + 3;
        double d12 = dArr[i7];
        int i8 = i + 7;
        double d13 = dArr[i8];
        double d14 = d12 + d13;
        double d15 = d9 - d10;
        double d16 = d12 - d13;
        dArr[i] = d3 + d11;
        dArr[i3] = d6 + d14;
        dArr[i5] = d7 - d16;
        dArr[i7] = d8 + d15;
        dArr[i2] = d3 - d11;
        dArr[i4] = d6 - d14;
        dArr[i6] = d7 + d16;
        dArr[i8] = d8 - d15;
    }

    public static void cftf040(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j;
        long j3 = 4 + j2;
        double d = doubleLargeArray.getDouble(j) + doubleLargeArray2.getDouble(j3);
        long j4 = 1 + j2;
        long j5 = 5 + j2;
        double d2 = doubleLargeArray2.getDouble(j4) + doubleLargeArray2.getDouble(j5);
        double d3 = doubleLargeArray.getDouble(j) - doubleLargeArray2.getDouble(j3);
        double d4 = doubleLargeArray2.getDouble(j4) - doubleLargeArray2.getDouble(j5);
        long j6 = j5;
        long j7 = j2 + 2;
        long j8 = j3;
        long j9 = j2 + 6;
        double d5 = doubleLargeArray2.getDouble(j7) + doubleLargeArray2.getDouble(j9);
        double d6 = d3;
        long j10 = j2 + 3;
        long j11 = j4;
        long j12 = j2 + 7;
        double d7 = doubleLargeArray2.getDouble(j10) + doubleLargeArray2.getDouble(j12);
        double d8 = doubleLargeArray2.getDouble(j7) - doubleLargeArray2.getDouble(j9);
        double d9 = doubleLargeArray2.getDouble(j10) - doubleLargeArray2.getDouble(j12);
        long j13 = j12;
        doubleLargeArray2.setDouble(j2, d + d5);
        doubleLargeArray2.setDouble(j11, d2 + d7);
        doubleLargeArray2.setDouble(j7, d6 - d9);
        doubleLargeArray2.setDouble(j10, d4 + d8);
        doubleLargeArray2.setDouble(j8, d - d5);
        doubleLargeArray2.setDouble(j6, d2 - d7);
        doubleLargeArray2.setDouble(j9, d6 + d9);
        doubleLargeArray2.setDouble(j13, d4 - d8);
    }

    public static void cftb040(double[] dArr, int i) {
        double d = dArr[i];
        int i2 = i + 4;
        double d2 = dArr[i2];
        double d3 = d + d2;
        int i3 = i + 1;
        double d4 = dArr[i3];
        int i4 = i + 5;
        double d5 = dArr[i4];
        double d6 = d4 + d5;
        double d7 = d - d2;
        double d8 = d4 - d5;
        int i5 = i + 2;
        double d9 = dArr[i5];
        int i6 = i + 6;
        double d10 = dArr[i6];
        double d11 = d9 + d10;
        int i7 = i + 3;
        double d12 = dArr[i7];
        int i8 = i + 7;
        double d13 = dArr[i8];
        double d14 = d12 + d13;
        double d15 = d9 - d10;
        double d16 = d12 - d13;
        dArr[i] = d3 + d11;
        dArr[i3] = d6 + d14;
        dArr[i5] = d7 + d16;
        dArr[i7] = d8 - d15;
        dArr[i2] = d3 - d11;
        dArr[i4] = d6 - d14;
        dArr[i6] = d7 - d16;
        dArr[i8] = d8 + d15;
    }

    public static void cftb040(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j;
        long j3 = 4 + j2;
        double d = doubleLargeArray.getDouble(j) + doubleLargeArray2.getDouble(j3);
        long j4 = 1 + j2;
        long j5 = 5 + j2;
        double d2 = doubleLargeArray2.getDouble(j4) + doubleLargeArray2.getDouble(j5);
        double d3 = doubleLargeArray.getDouble(j) - doubleLargeArray2.getDouble(j3);
        double d4 = doubleLargeArray2.getDouble(j4) - doubleLargeArray2.getDouble(j5);
        long j6 = j5;
        long j7 = j2 + 2;
        long j8 = j3;
        long j9 = j2 + 6;
        double d5 = doubleLargeArray2.getDouble(j7) + doubleLargeArray2.getDouble(j9);
        double d6 = d3;
        long j10 = j2 + 3;
        long j11 = j4;
        long j12 = j2 + 7;
        double d7 = doubleLargeArray2.getDouble(j10) + doubleLargeArray2.getDouble(j12);
        double d8 = doubleLargeArray2.getDouble(j7) - doubleLargeArray2.getDouble(j9);
        double d9 = doubleLargeArray2.getDouble(j10) - doubleLargeArray2.getDouble(j12);
        long j13 = j12;
        doubleLargeArray2.setDouble(j2, d + d5);
        doubleLargeArray2.setDouble(j11, d2 + d7);
        doubleLargeArray2.setDouble(j7, d6 + d9);
        doubleLargeArray2.setDouble(j10, d4 - d8);
        doubleLargeArray2.setDouble(j8, d - d5);
        doubleLargeArray2.setDouble(j6, d2 - d7);
        doubleLargeArray2.setDouble(j9, d6 - d9);
        doubleLargeArray2.setDouble(j13, d4 + d8);
    }

    public static void cftx020(double[] dArr, int i) {
        double d = dArr[i];
        int i2 = i + 2;
        double d2 = dArr[i2];
        int i3 = i + 1;
        int i4 = i + 3;
        dArr[i] = d + d2;
        dArr[i3] = dArr[i3] + dArr[i4];
        dArr[i2] = d - d2;
        dArr[i4] = (-dArr[i3]) + dArr[i4];
    }

    public static void cftx020(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j;
        long j3 = 2 + j2;
        double d = doubleLargeArray.getDouble(j) - doubleLargeArray2.getDouble(j3);
        long j4 = 1 + j2;
        long j5 = 3 + j2;
        double d2 = (-doubleLargeArray2.getDouble(j4)) + doubleLargeArray2.getDouble(j5);
        doubleLargeArray2.setDouble(j2, doubleLargeArray.getDouble(j) + doubleLargeArray2.getDouble(j3));
        doubleLargeArray2.setDouble(j4, doubleLargeArray2.getDouble(j4) + doubleLargeArray2.getDouble(j5));
        doubleLargeArray2.setDouble(j3, d);
        doubleLargeArray2.setDouble(j5, d2);
    }

    public static void cftxb020(double[] dArr, int i) {
        double d = dArr[i];
        int i2 = i + 2;
        double d2 = dArr[i2];
        int i3 = i + 1;
        int i4 = i + 3;
        dArr[i] = d + d2;
        dArr[i3] = dArr[i3] + dArr[i4];
        dArr[i2] = d - d2;
        dArr[i4] = dArr[i3] - dArr[i4];
    }

    public static void cftxb020(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j;
        long j3 = 2 + j2;
        double d = doubleLargeArray.getDouble(j) - doubleLargeArray2.getDouble(j3);
        long j4 = 1 + j2;
        long j5 = 3 + j2;
        double d2 = doubleLargeArray2.getDouble(j4) - doubleLargeArray2.getDouble(j5);
        doubleLargeArray2.setDouble(j2, doubleLargeArray.getDouble(j) + doubleLargeArray2.getDouble(j3));
        doubleLargeArray2.setDouble(j4, doubleLargeArray2.getDouble(j4) + doubleLargeArray2.getDouble(j5));
        doubleLargeArray2.setDouble(j3, d);
        doubleLargeArray2.setDouble(j5, d2);
    }

    public static void cftxc020(double[] dArr, int i) {
        double d = dArr[i];
        int i2 = i + 2;
        double d2 = dArr[i2];
        int i3 = i + 1;
        int i4 = i + 3;
        dArr[i] = d + d2;
        dArr[i3] = dArr[i3] - dArr[i4];
        dArr[i2] = d - d2;
        dArr[i4] = dArr[i3] + dArr[i4];
    }

    public static void cftxc020(DoubleLargeArray doubleLargeArray, long j) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        long j2 = j;
        long j3 = 2 + j2;
        double d = doubleLargeArray.getDouble(j) - doubleLargeArray2.getDouble(j3);
        long j4 = 1 + j2;
        long j5 = 3 + j2;
        double d2 = doubleLargeArray2.getDouble(j4) + doubleLargeArray2.getDouble(j5);
        doubleLargeArray2.setDouble(j2, doubleLargeArray.getDouble(j) + doubleLargeArray2.getDouble(j3));
        doubleLargeArray2.setDouble(j4, doubleLargeArray2.getDouble(j4) - doubleLargeArray2.getDouble(j5));
        doubleLargeArray2.setDouble(j3, d);
        doubleLargeArray2.setDouble(j5, d2);
    }

    public static void rftfsub(int i, double[] dArr, int i2, int i3, double[] dArr2, int i4) {
        int i5 = i >> 1;
        int i6 = (i3 * 2) / i5;
        int i7 = 0;
        for (int i8 = 2; i8 < i5; i8 += 2) {
            i7 += i6;
            double d = 0.5d - dArr2[(i4 + i3) - i7];
            double d2 = dArr2[i4 + i7];
            int i9 = i2 + i8;
            int i10 = i2 + (i - i8);
            double d3 = dArr[i9];
            double d4 = d3 - dArr[i10];
            int i11 = i9 + 1;
            int i12 = i10 + 1;
            double d5 = dArr[i11] + dArr[i12];
            double d6 = (d * d4) - (d2 * d5);
            double d7 = (d * d5) + (d2 * d4);
            dArr[i9] = d3 - d6;
            dArr[i11] = d7 - dArr[i11];
            dArr[i10] = dArr[i10] + d6;
            dArr[i12] = d7 - dArr[i12];
        }
        int i13 = i2 + i5 + 1;
        dArr[i13] = -dArr[i13];
    }

    public static void rftfsub(long j, DoubleLargeArray doubleLargeArray, long j2, long j3, DoubleLargeArray doubleLargeArray2, long j4) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        long j5 = j >> 1;
        long j6 = (j3 * 2) / j5;
        long j7 = 0;
        long j8 = 2;
        while (j8 < j5) {
            long j9 = j7 + j6;
            double d = 0.5d - doubleLargeArray4.getDouble((j4 + j3) - j9);
            double d2 = doubleLargeArray4.getDouble(j4 + j9);
            long j10 = j2 + j8;
            long j11 = j6;
            long j12 = j2 + (j - j8);
            double d3 = doubleLargeArray3.getDouble(j10) - doubleLargeArray3.getDouble(j12);
            long j13 = j9;
            long j14 = j10 + 1;
            long j15 = j12 + 1;
            double d4 = doubleLargeArray3.getDouble(j14) + doubleLargeArray3.getDouble(j15);
            double d5 = (d * d3) - (d2 * d4);
            double d6 = (d * d4) + (d2 * d3);
            doubleLargeArray3.setDouble(j10, doubleLargeArray3.getDouble(j10) - d5);
            doubleLargeArray3.setDouble(j14, d6 - doubleLargeArray3.getDouble(j14));
            doubleLargeArray3.setDouble(j12, doubleLargeArray3.getDouble(j12) + d5);
            doubleLargeArray3.setDouble(j15, d6 - doubleLargeArray3.getDouble(j15));
            j8 += 2;
            j6 = j11;
            j7 = j13;
            j5 = j5;
            doubleLargeArray4 = doubleLargeArray2;
        }
        long j16 = j2 + j5 + 1;
        doubleLargeArray3.setDouble(j16, -doubleLargeArray3.getDouble(j16));
    }

    public static void rftbsub(int i, double[] dArr, int i2, int i3, double[] dArr2, int i4) {
        int i5 = i >> 1;
        int i6 = (i3 * 2) / i5;
        int i7 = 0;
        for (int i8 = 2; i8 < i5; i8 += 2) {
            i7 += i6;
            double d = 0.5d - dArr2[(i4 + i3) - i7];
            double d2 = dArr2[i4 + i7];
            int i9 = i2 + i8;
            int i10 = i2 + (i - i8);
            double d3 = dArr[i9];
            double d4 = d3 - dArr[i10];
            int i11 = i9 + 1;
            int i12 = i10 + 1;
            double d5 = dArr[i11] + dArr[i12];
            double d6 = (d * d4) - (d2 * d5);
            double d7 = (d * d5) + (d2 * d4);
            dArr[i9] = d3 - d6;
            dArr[i11] = dArr[i11] - d7;
            dArr[i10] = dArr[i10] + d6;
            dArr[i12] = dArr[i12] - d7;
        }
    }

    public static void rftbsub(long j, DoubleLargeArray doubleLargeArray, long j2, long j3, DoubleLargeArray doubleLargeArray2, long j4) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        long j5 = j >> 1;
        long j6 = (j3 * 2) / j5;
        long j7 = 0;
        long j8 = 2;
        while (j8 < j5) {
            j7 += j6;
            double d = 0.5d - doubleLargeArray4.getDouble((j4 + j3) - j7);
            double d2 = doubleLargeArray4.getDouble(j4 + j7);
            long j9 = j2 + j8;
            long j10 = j2 + (j - j8);
            double d3 = doubleLargeArray3.getDouble(j9) - doubleLargeArray3.getDouble(j10);
            long j11 = j9 + 1;
            long j12 = j6;
            long j13 = j10 + 1;
            double d4 = doubleLargeArray3.getDouble(j11) + doubleLargeArray3.getDouble(j13);
            double d5 = (d * d3) - (d2 * d4);
            double d6 = (d * d4) + (d2 * d3);
            doubleLargeArray3.setDouble(j9, doubleLargeArray3.getDouble(j9) - d5);
            doubleLargeArray3.setDouble(j11, doubleLargeArray3.getDouble(j11) - d6);
            doubleLargeArray3.setDouble(j10, doubleLargeArray3.getDouble(j10) + d5);
            doubleLargeArray3.setDouble(j13, doubleLargeArray3.getDouble(j13) - d6);
            j8 += 2;
            j5 = j5;
            j6 = j12;
            doubleLargeArray4 = doubleLargeArray2;
        }
    }

    public static void dctsub(int i, double[] dArr, int i2, int i3, double[] dArr2, int i4) {
        int i5 = i >> 1;
        int i6 = i3 / i;
        int i7 = 0;
        for (int i8 = 1; i8 < i5; i8++) {
            i7 += i6;
            int i9 = i2 + i8;
            int i10 = i2 + (i - i8);
            double d = dArr2[i4 + i7];
            double d2 = dArr2[(i4 + i3) - i7];
            double d3 = d - d2;
            double d4 = d + d2;
            double d5 = dArr[i9];
            double d6 = dArr[i10];
            dArr[i9] = (d3 * d5) + (d4 * d6);
            dArr[i10] = (d4 * d5) - (d3 * d6);
        }
        int i11 = i2 + i5;
        dArr[i11] = dArr[i11] * dArr2[i4];
    }

    public static void dctsub(long j, DoubleLargeArray doubleLargeArray, long j2, long j3, DoubleLargeArray doubleLargeArray2, long j4) {
        DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
        DoubleLargeArray doubleLargeArray4 = doubleLargeArray2;
        long j5 = j >> 1;
        long j6 = j3 / j;
        long j7 = 0;
        long j8 = 1;
        while (j8 < j5) {
            j7 += j6;
            long j9 = j4 + j7;
            long j10 = j2 + j8;
            long j11 = j2 + (j - j8);
            long j12 = j6;
            long j13 = (j4 + j3) - j7;
            double d = doubleLargeArray4.getDouble(j9) - doubleLargeArray4.getDouble(j13);
            double d2 = doubleLargeArray4.getDouble(j9) + doubleLargeArray4.getDouble(j13);
            double d3 = (doubleLargeArray3.getDouble(j10) * d2) - (doubleLargeArray3.getDouble(j11) * d);
            doubleLargeArray3.setDouble(j10, (d * doubleLargeArray3.getDouble(j10)) + (d2 * doubleLargeArray3.getDouble(j11)));
            doubleLargeArray3.setDouble(j11, d3);
            j8++;
            j6 = j12;
        }
        long j14 = j2 + j5;
        doubleLargeArray3.setDouble(j14, doubleLargeArray3.getDouble(j14) * doubleLargeArray2.getDouble(j4));
    }

    public static void cftfsub(int i, float[] fArr, int i2, int[] iArr, int i3, float[] fArr2) {
        if (i > 8) {
            if (i > 32) {
                cftf1st(i, fArr, i2, fArr2, i3 - (i >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && ((long) i) >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(i, fArr, i2, i3, fArr2);
                } else if (i > 512) {
                    cftrec4(i, fArr, i2, i3, fArr2);
                } else if (i > 128) {
                    cftleaf(i, 1, fArr, i2, i3, fArr2);
                } else {
                    cftfx41(i, fArr, i2, i3, fArr2);
                }
                bitrv2(i, iArr, fArr, i2);
            } else if (i == 32) {
                cftf161(fArr, i2, fArr2, i3 - 8);
                bitrv216(fArr, i2);
            } else {
                cftf081(fArr, i2, fArr2, 0);
                bitrv208(fArr, i2);
            }
        } else if (i == 8) {
            cftf040(fArr, i2);
        } else if (i == 4) {
            cftxb020(fArr, i2);
        }
    }

    public static void cftfsub(long j, FloatLargeArray floatLargeArray, long j2, LongLargeArray longLargeArray, long j3, FloatLargeArray floatLargeArray2) {
        int i = (j > 8 ? 1 : (j == 8 ? 0 : -1));
        if (i > 0) {
            int i2 = (j > 32 ? 1 : (j == 32 ? 0 : -1));
            if (i2 > 0) {
                cftf1st(j, floatLargeArray, j2, floatLargeArray2, j3 - (j >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && j >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(j, floatLargeArray, j2, j3, floatLargeArray2);
                } else if (j > 512) {
                    cftrec4(j, floatLargeArray, j2, j3, floatLargeArray2);
                } else if (j > 128) {
                    cftleaf(j, 1, floatLargeArray, j2, j3, floatLargeArray2);
                } else {
                    cftfx41(j, floatLargeArray, j2, j3, floatLargeArray2);
                }
                bitrv2l(j, longLargeArray, floatLargeArray, j2);
            } else if (i2 == 0) {
                cftf161(floatLargeArray, j2, floatLargeArray2, j3 - 8);
                bitrv216(floatLargeArray, j2);
            } else {
                cftf081(floatLargeArray, j2, floatLargeArray2, 0);
                bitrv208(floatLargeArray, j2);
            }
        } else if (i == 0) {
            cftf040(floatLargeArray, j2);
        } else if (j == 4) {
            cftxb020(floatLargeArray, j2);
        }
    }

    public static void cftbsub(int i, float[] fArr, int i2, int[] iArr, int i3, float[] fArr2) {
        if (i > 8) {
            if (i > 32) {
                cftb1st(i, fArr, i2, fArr2, i3 - (i >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && ((long) i) >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(i, fArr, i2, i3, fArr2);
                } else if (i > 512) {
                    cftrec4(i, fArr, i2, i3, fArr2);
                } else if (i > 128) {
                    cftleaf(i, 1, fArr, i2, i3, fArr2);
                } else {
                    cftfx41(i, fArr, i2, i3, fArr2);
                }
                bitrv2conj(i, iArr, fArr, i2);
            } else if (i == 32) {
                cftf161(fArr, i2, fArr2, i3 - 8);
                bitrv216neg(fArr, i2);
            } else {
                cftf081(fArr, i2, fArr2, 0);
                bitrv208neg(fArr, i2);
            }
        } else if (i == 8) {
            cftb040(fArr, i2);
        } else if (i == 4) {
            cftxb020(fArr, i2);
        }
    }

    public static void cftbsub(long j, FloatLargeArray floatLargeArray, long j2, LongLargeArray longLargeArray, long j3, FloatLargeArray floatLargeArray2) {
        int i = (j > 8 ? 1 : (j == 8 ? 0 : -1));
        if (i > 0) {
            int i2 = (j > 32 ? 1 : (j == 32 ? 0 : -1));
            if (i2 > 0) {
                cftb1st(j, floatLargeArray, j2, floatLargeArray2, j3 - (j >> 2));
                if (ConcurrencyUtils.getNumberOfThreads() > 1 && j >= getThreadsBeginN_1D_FFT_2Threads()) {
                    cftrec4_th(j, floatLargeArray, j2, j3, floatLargeArray2);
                } else if (j > 512) {
                    cftrec4(j, floatLargeArray, j2, j3, floatLargeArray2);
                } else if (j > 128) {
                    cftleaf(j, 1, floatLargeArray, j2, j3, floatLargeArray2);
                } else {
                    cftfx41(j, floatLargeArray, j2, j3, floatLargeArray2);
                }
                bitrv2conj(j, longLargeArray, floatLargeArray, j2);
            } else if (i2 == 0) {
                cftf161(floatLargeArray, j2, floatLargeArray2, j3 - 8);
                bitrv216neg(floatLargeArray, j2);
            } else {
                cftf081(floatLargeArray, j2, floatLargeArray2, 0);
                bitrv208neg(floatLargeArray, j2);
            }
        } else if (i == 0) {
            cftb040(floatLargeArray, j2);
        } else if (j == 4) {
            cftxb020(floatLargeArray, j2);
        }
    }

    public static void bitrv2(int i, int[] iArr, float[] fArr, int i2) {
        int i3 = i >> 2;
        int i4 = 1;
        while (i3 > 8) {
            i4 <<= 1;
            i3 >>= 2;
        }
        int i5 = i >> 1;
        int i6 = i4 * 4;
        if (i3 == 8) {
            for (int i7 = 0; i7 < i4; i7++) {
                int i8 = i7 * 4;
                for (int i9 = 0; i9 < i7; i9++) {
                    int i10 = (i9 * 4) + (iArr[i4 + i7] * 2);
                    int i11 = (iArr[i4 + i9] * 2) + i8;
                    int i12 = i2 + i10;
                    int i13 = i2 + i11;
                    int i14 = fArr[i12];
                    int i15 = i12 + 1;
                    int i16 = fArr[i15];
                    int i17 = fArr[i13];
                    int i18 = i13 + 1;
                    int i19 = fArr[i18];
                    fArr[i12] = i17;
                    fArr[i15] = i19;
                    fArr[i13] = i14;
                    fArr[i18] = i16;
                    int i20 = i10 + i6;
                    int i21 = i4 * 8;
                    int i22 = i11 + i21;
                    int i23 = i2 + i20;
                    int i24 = i2 + i22;
                    int i25 = fArr[i23];
                    int i26 = i23 + 1;
                    int i27 = fArr[i26];
                    int i28 = fArr[i24];
                    int i29 = i24 + 1;
                    int i30 = fArr[i29];
                    fArr[i23] = i28;
                    fArr[i26] = i30;
                    fArr[i24] = i25;
                    fArr[i29] = i27;
                    int i31 = i20 + i6;
                    int i32 = i22 - i6;
                    int i33 = i2 + i31;
                    int i34 = i2 + i32;
                    int i35 = fArr[i33];
                    int i36 = i33 + 1;
                    int i37 = fArr[i36];
                    int i38 = fArr[i34];
                    int i39 = i34 + 1;
                    int i40 = fArr[i39];
                    fArr[i33] = i38;
                    fArr[i36] = i40;
                    fArr[i34] = i35;
                    fArr[i39] = i37;
                    int i41 = i31 + i6;
                    int i42 = i32 + i21;
                    int i43 = i2 + i41;
                    int i44 = i2 + i42;
                    int i45 = fArr[i43];
                    int i46 = i43 + 1;
                    int i47 = fArr[i46];
                    int i48 = fArr[i44];
                    int i49 = i44 + 1;
                    int i50 = fArr[i49];
                    fArr[i43] = i48;
                    fArr[i46] = i50;
                    fArr[i44] = i45;
                    fArr[i49] = i47;
                    int i51 = i41 + i5;
                    int i52 = i42 + 2;
                    int i53 = i2 + i51;
                    int i54 = i2 + i52;
                    int i55 = fArr[i53];
                    int i56 = i53 + 1;
                    int i57 = fArr[i56];
                    int i58 = fArr[i54];
                    int i59 = i54 + 1;
                    int i60 = fArr[i59];
                    fArr[i53] = i58;
                    fArr[i56] = i60;
                    fArr[i54] = i55;
                    fArr[i59] = i57;
                    int i61 = i51 - i6;
                    int i62 = i52 - i21;
                    int i63 = i2 + i61;
                    int i64 = i2 + i62;
                    int i65 = fArr[i63];
                    int i66 = i63 + 1;
                    int i67 = fArr[i66];
                    int i68 = fArr[i64];
                    int i69 = i64 + 1;
                    int i70 = fArr[i69];
                    fArr[i63] = i68;
                    fArr[i66] = i70;
                    fArr[i64] = i65;
                    fArr[i69] = i67;
                    int i71 = i61 - i6;
                    int i72 = i62 + i6;
                    int i73 = i2 + i71;
                    int i74 = i2 + i72;
                    int i75 = fArr[i73];
                    int i76 = i73 + 1;
                    int i77 = fArr[i76];
                    int i78 = fArr[i74];
                    int i79 = i74 + 1;
                    int i80 = fArr[i79];
                    fArr[i73] = i78;
                    fArr[i76] = i80;
                    fArr[i74] = i75;
                    fArr[i79] = i77;
                    int i81 = i71 - i6;
                    int i82 = i72 - i21;
                    int i83 = i2 + i81;
                    int i84 = i2 + i82;
                    int i85 = fArr[i83];
                    int i86 = i83 + 1;
                    int i87 = fArr[i86];
                    int i88 = fArr[i84];
                    int i89 = i84 + 1;
                    int i90 = fArr[i89];
                    fArr[i83] = i88;
                    fArr[i86] = i90;
                    fArr[i84] = i85;
                    fArr[i89] = i87;
                    int i91 = i81 + 2;
                    int i92 = i82 + i5;
                    int i93 = i2 + i91;
                    int i94 = i2 + i92;
                    int i95 = fArr[i93];
                    int i96 = i93 + 1;
                    int i97 = fArr[i96];
                    int i98 = fArr[i94];
                    int i99 = i94 + 1;
                    int i100 = fArr[i99];
                    fArr[i93] = i98;
                    fArr[i96] = i100;
                    fArr[i94] = i95;
                    fArr[i99] = i97;
                    int i101 = i91 + i6;
                    int i102 = i92 + i21;
                    int i103 = i2 + i101;
                    int i104 = i2 + i102;
                    int i105 = fArr[i103];
                    int i106 = i103 + 1;
                    int i107 = fArr[i106];
                    int i108 = fArr[i104];
                    int i109 = i104 + 1;
                    int i110 = fArr[i109];
                    fArr[i103] = i108;
                    fArr[i106] = i110;
                    fArr[i104] = i105;
                    fArr[i109] = i107;
                    int i111 = i101 + i6;
                    int i112 = i102 - i6;
                    int i113 = i2 + i111;
                    int i114 = i2 + i112;
                    int i115 = fArr[i113];
                    int i116 = i113 + 1;
                    int i117 = fArr[i116];
                    int i118 = fArr[i114];
                    int i119 = i114 + 1;
                    int i120 = fArr[i119];
                    fArr[i113] = i118;
                    fArr[i116] = i120;
                    fArr[i114] = i115;
                    fArr[i119] = i117;
                    int i121 = i111 + i6;
                    int i122 = i112 + i21;
                    int i123 = i2 + i121;
                    int i124 = i2 + i122;
                    int i125 = fArr[i123];
                    int i126 = i123 + 1;
                    int i127 = fArr[i126];
                    int i128 = fArr[i124];
                    int i129 = i124 + 1;
                    int i130 = fArr[i129];
                    fArr[i123] = i128;
                    fArr[i126] = i130;
                    fArr[i124] = i125;
                    fArr[i129] = i127;
                    int i131 = i121 - i5;
                    int i132 = i122 - 2;
                    int i133 = i2 + i131;
                    int i134 = i2 + i132;
                    int i135 = fArr[i133];
                    int i136 = i133 + 1;
                    int i137 = fArr[i136];
                    int i138 = fArr[i134];
                    int i139 = i134 + 1;
                    int i140 = fArr[i139];
                    fArr[i133] = i138;
                    fArr[i136] = i140;
                    fArr[i134] = i135;
                    fArr[i139] = i137;
                    int i141 = i131 - i6;
                    int i142 = i132 - i21;
                    int i143 = i2 + i141;
                    int i144 = i2 + i142;
                    int i145 = fArr[i143];
                    int i146 = i143 + 1;
                    int i147 = fArr[i146];
                    int i148 = fArr[i144];
                    int i149 = i144 + 1;
                    int i150 = fArr[i149];
                    fArr[i143] = i148;
                    fArr[i146] = i150;
                    fArr[i144] = i145;
                    fArr[i149] = i147;
                    int i151 = i141 - i6;
                    int i152 = i142 + i6;
                    int i153 = i2 + i151;
                    int i154 = i2 + i152;
                    int i155 = fArr[i153];
                    int i156 = i153 + 1;
                    int i157 = fArr[i156];
                    int i158 = fArr[i154];
                    int i159 = i154 + 1;
                    int i160 = fArr[i159];
                    fArr[i153] = i158;
                    fArr[i156] = i160;
                    fArr[i154] = i155;
                    fArr[i159] = i157;
                    int i161 = i2 + (i151 - i6);
                    int i162 = i2 + (i152 - i21);
                    int i163 = fArr[i161];
                    int i164 = i161 + 1;
                    int i165 = fArr[i164];
                    int i166 = fArr[i162];
                    int i167 = i162 + 1;
                    int i168 = fArr[i167];
                    fArr[i161] = i166;
                    fArr[i164] = i168;
                    fArr[i162] = i163;
                    fArr[i167] = i165;
                }
                int i169 = i8 + (iArr[i4 + i7] * 2);
                int i170 = i169 + 2;
                int i171 = i169 + i5;
                int i172 = i2 + i170;
                int i173 = i2 + i171;
                int i174 = fArr[i172];
                int i175 = i172 + 1;
                int i176 = fArr[i175];
                int i177 = fArr[i173];
                int i178 = i173 + 1;
                int i179 = fArr[i178];
                fArr[i172] = i177;
                fArr[i175] = i179;
                fArr[i173] = i174;
                fArr[i178] = i176;
                int i180 = i170 + i6;
                int i181 = i4 * 8;
                int i182 = i171 + i181;
                int i183 = i2 + i180;
                int i184 = i2 + i182;
                int i185 = fArr[i183];
                int i186 = i183 + 1;
                int i187 = fArr[i186];
                int i188 = fArr[i184];
                int i189 = i184 + 1;
                int i190 = fArr[i189];
                fArr[i183] = i188;
                fArr[i186] = i190;
                fArr[i184] = i185;
                fArr[i189] = i187;
                int i191 = i180 + i6;
                int i192 = i182 - i6;
                int i193 = i2 + i191;
                int i194 = i2 + i192;
                int i195 = fArr[i193];
                int i196 = i193 + 1;
                int i197 = fArr[i196];
                int i198 = fArr[i194];
                int i199 = i194 + 1;
                int i200 = fArr[i199];
                fArr[i193] = i198;
                fArr[i196] = i200;
                fArr[i194] = i195;
                fArr[i199] = i197;
                int i201 = i191 - 2;
                int i202 = i192 - i5;
                int i203 = i2 + i201;
                int i204 = i2 + i202;
                int i205 = fArr[i203];
                int i206 = i203 + 1;
                int i207 = fArr[i206];
                int i208 = fArr[i204];
                int i209 = i204 + 1;
                int i210 = fArr[i209];
                fArr[i203] = i208;
                fArr[i206] = i210;
                fArr[i204] = i205;
                fArr[i209] = i207;
                int i211 = i5 + 2;
                int i212 = i201 + i211;
                int i213 = i202 + i211;
                int i214 = i2 + i212;
                int i215 = i2 + i213;
                int i216 = fArr[i214];
                int i217 = i214 + 1;
                int i218 = fArr[i217];
                int i219 = fArr[i215];
                int i220 = i215 + 1;
                int i221 = fArr[i220];
                fArr[i214] = i219;
                fArr[i217] = i221;
                fArr[i215] = i216;
                fArr[i220] = i218;
                int i222 = i2 + (i212 - (i5 - i6));
                int i223 = i2 + i213 + (i181 - 2);
                int i224 = fArr[i222];
                int i225 = i222 + 1;
                int i226 = fArr[i225];
                int i227 = fArr[i223];
                int i228 = i223 + 1;
                int i229 = fArr[i228];
                fArr[i222] = i227;
                fArr[i225] = i229;
                fArr[i223] = i224;
                fArr[i228] = i226;
            }
            return;
        }
        for (int i230 = 0; i230 < i4; i230++) {
            int i231 = i230 * 4;
            for (int i232 = 0; i232 < i230; i232++) {
                int i233 = (i232 * 4) + iArr[i4 + i230];
                int i234 = iArr[i4 + i232] + i231;
                int i235 = i2 + i233;
                int i236 = i2 + i234;
                int i237 = fArr[i235];
                int i238 = i235 + 1;
                int i239 = fArr[i238];
                int i240 = fArr[i236];
                int i241 = i236 + 1;
                int i242 = fArr[i241];
                fArr[i235] = i240;
                fArr[i238] = i242;
                fArr[i236] = i237;
                fArr[i241] = i239;
                int i243 = i233 + i6;
                int i244 = i234 + i6;
                int i245 = i2 + i243;
                int i246 = i2 + i244;
                int i247 = fArr[i245];
                int i248 = i245 + 1;
                int i249 = fArr[i248];
                int i250 = fArr[i246];
                int i251 = i246 + 1;
                int i252 = fArr[i251];
                fArr[i245] = i250;
                fArr[i248] = i252;
                fArr[i246] = i247;
                fArr[i251] = i249;
                int i253 = i243 + i5;
                int i254 = i244 + 2;
                int i255 = i2 + i253;
                int i256 = i2 + i254;
                int i257 = fArr[i255];
                int i258 = i255 + 1;
                int i259 = fArr[i258];
                int i260 = fArr[i256];
                int i261 = i256 + 1;
                int i262 = fArr[i261];
                fArr[i255] = i260;
                fArr[i258] = i262;
                fArr[i256] = i257;
                fArr[i261] = i259;
                int i263 = i253 - i6;
                int i264 = i254 - i6;
                int i265 = i2 + i263;
                int i266 = i2 + i264;
                int i267 = fArr[i265];
                int i268 = i265 + 1;
                int i269 = fArr[i268];
                int i270 = fArr[i266];
                int i271 = i266 + 1;
                int i272 = fArr[i271];
                fArr[i265] = i270;
                fArr[i268] = i272;
                fArr[i266] = i267;
                fArr[i271] = i269;
                int i273 = i263 + 2;
                int i274 = i264 + i5;
                int i275 = i2 + i273;
                int i276 = i2 + i274;
                int i277 = fArr[i275];
                int i278 = i275 + 1;
                int i279 = fArr[i278];
                int i280 = fArr[i276];
                int i281 = i276 + 1;
                int i282 = fArr[i281];
                fArr[i275] = i280;
                fArr[i278] = i282;
                fArr[i276] = i277;
                fArr[i281] = i279;
                int i283 = i273 + i6;
                int i284 = i274 + i6;
                int i285 = i2 + i283;
                int i286 = i2 + i284;
                int i287 = fArr[i285];
                int i288 = i285 + 1;
                int i289 = fArr[i288];
                int i290 = fArr[i286];
                int i291 = i286 + 1;
                int i292 = fArr[i291];
                fArr[i285] = i290;
                fArr[i288] = i292;
                fArr[i286] = i287;
                fArr[i291] = i289;
                int i293 = i283 - i5;
                int i294 = i284 - 2;
                int i295 = i2 + i293;
                int i296 = i2 + i294;
                int i297 = fArr[i295];
                int i298 = i295 + 1;
                int i299 = fArr[i298];
                int i300 = fArr[i296];
                int i301 = i296 + 1;
                int i302 = fArr[i301];
                fArr[i295] = i300;
                fArr[i298] = i302;
                fArr[i296] = i297;
                fArr[i301] = i299;
                int i303 = i2 + (i293 - i6);
                int i304 = i2 + (i294 - i6);
                int i305 = fArr[i303];
                int i306 = i303 + 1;
                int i307 = fArr[i306];
                int i308 = fArr[i304];
                int i309 = i304 + 1;
                int i310 = fArr[i309];
                fArr[i303] = i308;
                fArr[i306] = i310;
                fArr[i304] = i305;
                fArr[i309] = i307;
            }
            int i311 = i231 + iArr[i4 + i230];
            int i312 = i311 + 2;
            int i313 = i311 + i5;
            int i314 = i2 + i312;
            int i315 = i2 + i313;
            int i316 = fArr[i314];
            int i317 = i314 + 1;
            int i318 = fArr[i317];
            int i319 = fArr[i315];
            int i320 = i315 + 1;
            int i321 = fArr[i320];
            fArr[i314] = i319;
            fArr[i317] = i321;
            fArr[i315] = i316;
            fArr[i320] = i318;
            int i322 = i2 + i312 + i6;
            int i323 = i2 + i313 + i6;
            int i324 = fArr[i322];
            int i325 = i322 + 1;
            int i326 = fArr[i325];
            int i327 = fArr[i323];
            int i328 = i323 + 1;
            int i329 = fArr[i328];
            fArr[i322] = i327;
            fArr[i325] = i329;
            fArr[i323] = i324;
            fArr[i328] = i326;
        }
    }

    public static void bitrv2l(long j, LongLargeArray longLargeArray, FloatLargeArray floatLargeArray, long j2) {
        int i;
        LongLargeArray longLargeArray2 = longLargeArray;
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j3 = j >> 2;
        long j4 = 1;
        long j5 = 1;
        while (true) {
            i = (j3 > 8 ? 1 : (j3 == 8 ? 0 : -1));
            if (i <= 0) {
                break;
            }
            j5 <<= 1;
            j3 >>= 2;
        }
        long j6 = j >> 1;
        long j7 = 4;
        long j8 = j5 * 4;
        if (i == 0) {
            long j9 = 0;
            while (j9 < j5) {
                long j10 = j9 * j7;
                long j11 = 0;
                while (j11 < j9) {
                    long j12 = (j11 * j7) + (longLargeArray2.getLong(j5 + j9) * 2);
                    long j13 = j10 + (longLargeArray2.getLong(j5 + j11) * 2);
                    long j14 = j2 + j12;
                    long j15 = j6;
                    long j16 = j2 + j13;
                    float f = floatLargeArray2.getFloat(j14);
                    long j17 = j13;
                    long j18 = j14 + j4;
                    float f2 = floatLargeArray2.getFloat(j18);
                    float f3 = floatLargeArray2.getFloat(j16);
                    long j19 = j5;
                    long j20 = j16 + j4;
                    float f4 = floatLargeArray2.getFloat(j20);
                    floatLargeArray2.setFloat(j14, f3);
                    floatLargeArray2.setFloat(j18, f4);
                    floatLargeArray2.setFloat(j16, f);
                    floatLargeArray2.setFloat(j20, f2);
                    long j21 = j12 + j8;
                    long j22 = j19 * 8;
                    long j23 = j17 + j22;
                    long j24 = j2 + j21;
                    long j25 = j2 + j23;
                    float f5 = floatLargeArray2.getFloat(j24);
                    long j26 = j22;
                    long j27 = j24 + 1;
                    float f6 = floatLargeArray2.getFloat(j27);
                    float f7 = floatLargeArray2.getFloat(j25);
                    long j28 = j23;
                    long j29 = j25 + 1;
                    float f8 = floatLargeArray2.getFloat(j29);
                    floatLargeArray2.setFloat(j24, f7);
                    floatLargeArray2.setFloat(j27, f8);
                    floatLargeArray2.setFloat(j25, f5);
                    floatLargeArray2.setFloat(j29, f6);
                    long j30 = j21 + j8;
                    long j31 = j28 - j8;
                    long j32 = j2 + j30;
                    long j33 = j2 + j31;
                    float f9 = floatLargeArray2.getFloat(j32);
                    long j34 = j32 + 1;
                    float f10 = floatLargeArray2.getFloat(j34);
                    float f11 = floatLargeArray2.getFloat(j33);
                    long j35 = j31;
                    long j36 = j33 + 1;
                    float f12 = floatLargeArray2.getFloat(j36);
                    floatLargeArray2.setFloat(j32, f11);
                    floatLargeArray2.setFloat(j34, f12);
                    floatLargeArray2.setFloat(j33, f9);
                    floatLargeArray2.setFloat(j36, f10);
                    long j37 = j30 + j8;
                    long j38 = j35 + j26;
                    long j39 = j2 + j37;
                    long j40 = j2 + j38;
                    float f13 = floatLargeArray2.getFloat(j39);
                    long j41 = j39 + 1;
                    float f14 = floatLargeArray2.getFloat(j41);
                    float f15 = floatLargeArray2.getFloat(j40);
                    long j42 = j8;
                    long j43 = j40 + 1;
                    float f16 = floatLargeArray2.getFloat(j43);
                    floatLargeArray2.setFloat(j39, f15);
                    floatLargeArray2.setFloat(j41, f16);
                    floatLargeArray2.setFloat(j40, f13);
                    floatLargeArray2.setFloat(j43, f14);
                    long j44 = j37 + j15;
                    long j45 = j38 + 2;
                    long j46 = j2 + j44;
                    long j47 = j2 + j45;
                    float f17 = floatLargeArray2.getFloat(j46);
                    long j48 = j46 + 1;
                    float f18 = floatLargeArray2.getFloat(j48);
                    float f19 = floatLargeArray2.getFloat(j47);
                    long j49 = j47 + 1;
                    float f20 = floatLargeArray2.getFloat(j49);
                    floatLargeArray2.setFloat(j46, f19);
                    floatLargeArray2.setFloat(j48, f20);
                    floatLargeArray2.setFloat(j47, f17);
                    floatLargeArray2.setFloat(j49, f18);
                    long j50 = j44 - j42;
                    long j51 = j45 - j26;
                    long j52 = j2 + j50;
                    long j53 = j2 + j51;
                    float f21 = floatLargeArray2.getFloat(j52);
                    long j54 = j52 + 1;
                    float f22 = floatLargeArray2.getFloat(j54);
                    float f23 = floatLargeArray2.getFloat(j53);
                    long j55 = j53 + 1;
                    float f24 = floatLargeArray2.getFloat(j55);
                    floatLargeArray2.setFloat(j52, f23);
                    floatLargeArray2.setFloat(j54, f24);
                    floatLargeArray2.setFloat(j53, f21);
                    floatLargeArray2.setFloat(j55, f22);
                    long j56 = j50 - j42;
                    long j57 = j51 + j42;
                    long j58 = j2 + j56;
                    long j59 = j2 + j57;
                    float f25 = floatLargeArray2.getFloat(j58);
                    long j60 = j58 + 1;
                    float f26 = floatLargeArray2.getFloat(j60);
                    float f27 = floatLargeArray2.getFloat(j59);
                    long j61 = j59 + 1;
                    float f28 = floatLargeArray2.getFloat(j61);
                    floatLargeArray2.setFloat(j58, f27);
                    floatLargeArray2.setFloat(j60, f28);
                    floatLargeArray2.setFloat(j59, f25);
                    floatLargeArray2.setFloat(j61, f26);
                    long j62 = j56 - j42;
                    long j63 = j57 - j26;
                    long j64 = j2 + j62;
                    long j65 = j2 + j63;
                    float f29 = floatLargeArray2.getFloat(j64);
                    long j66 = j64 + 1;
                    float f30 = floatLargeArray2.getFloat(j66);
                    float f31 = floatLargeArray2.getFloat(j65);
                    long j67 = j65 + 1;
                    float f32 = floatLargeArray2.getFloat(j67);
                    floatLargeArray2.setFloat(j64, f31);
                    floatLargeArray2.setFloat(j66, f32);
                    floatLargeArray2.setFloat(j65, f29);
                    floatLargeArray2.setFloat(j67, f30);
                    long j68 = j62 + 2;
                    long j69 = j63 + j15;
                    long j70 = j2 + j68;
                    long j71 = j2 + j69;
                    float f33 = floatLargeArray2.getFloat(j70);
                    long j72 = j70 + 1;
                    float f34 = floatLargeArray2.getFloat(j72);
                    float f35 = floatLargeArray2.getFloat(j71);
                    long j73 = j71 + 1;
                    float f36 = floatLargeArray2.getFloat(j73);
                    floatLargeArray2.setFloat(j70, f35);
                    floatLargeArray2.setFloat(j72, f36);
                    floatLargeArray2.setFloat(j71, f33);
                    floatLargeArray2.setFloat(j73, f34);
                    long j74 = j68 + j42;
                    long j75 = j69 + j26;
                    long j76 = j2 + j74;
                    long j77 = j2 + j75;
                    float f37 = floatLargeArray2.getFloat(j76);
                    long j78 = j76 + 1;
                    float f38 = floatLargeArray2.getFloat(j78);
                    float f39 = floatLargeArray2.getFloat(j77);
                    long j79 = j77 + 1;
                    float f40 = floatLargeArray2.getFloat(j79);
                    floatLargeArray2.setFloat(j76, f39);
                    floatLargeArray2.setFloat(j78, f40);
                    floatLargeArray2.setFloat(j77, f37);
                    floatLargeArray2.setFloat(j79, f38);
                    long j80 = j74 + j42;
                    long j81 = j75 - j42;
                    long j82 = j2 + j80;
                    long j83 = j2 + j81;
                    float f41 = floatLargeArray2.getFloat(j82);
                    long j84 = j82 + 1;
                    float f42 = floatLargeArray2.getFloat(j84);
                    float f43 = floatLargeArray2.getFloat(j83);
                    long j85 = j83 + 1;
                    float f44 = floatLargeArray2.getFloat(j85);
                    floatLargeArray2.setFloat(j82, f43);
                    floatLargeArray2.setFloat(j84, f44);
                    floatLargeArray2.setFloat(j83, f41);
                    floatLargeArray2.setFloat(j85, f42);
                    long j86 = j80 + j42;
                    long j87 = j81 + j26;
                    long j88 = j2 + j86;
                    long j89 = j2 + j87;
                    float f45 = floatLargeArray2.getFloat(j88);
                    long j90 = j88 + 1;
                    float f46 = floatLargeArray2.getFloat(j90);
                    float f47 = floatLargeArray2.getFloat(j89);
                    long j91 = j89 + 1;
                    float f48 = floatLargeArray2.getFloat(j91);
                    floatLargeArray2.setFloat(j88, f47);
                    floatLargeArray2.setFloat(j90, f48);
                    floatLargeArray2.setFloat(j89, f45);
                    floatLargeArray2.setFloat(j91, f46);
                    long j92 = j86 - j15;
                    long j93 = j87 - 2;
                    long j94 = j2 + j92;
                    long j95 = j2 + j93;
                    float f49 = floatLargeArray2.getFloat(j94);
                    long j96 = j94 + 1;
                    float f50 = floatLargeArray2.getFloat(j96);
                    float f51 = floatLargeArray2.getFloat(j95);
                    long j97 = j95 + 1;
                    float f52 = floatLargeArray2.getFloat(j97);
                    floatLargeArray2.setFloat(j94, f51);
                    floatLargeArray2.setFloat(j96, f52);
                    floatLargeArray2.setFloat(j95, f49);
                    floatLargeArray2.setFloat(j97, f50);
                    long j98 = j92 - j42;
                    long j99 = j93 - j26;
                    long j100 = j2 + j98;
                    long j101 = j2 + j99;
                    float f53 = floatLargeArray2.getFloat(j100);
                    long j102 = j100 + 1;
                    float f54 = floatLargeArray2.getFloat(j102);
                    float f55 = floatLargeArray2.getFloat(j101);
                    long j103 = j101 + 1;
                    float f56 = floatLargeArray2.getFloat(j103);
                    floatLargeArray2.setFloat(j100, f55);
                    floatLargeArray2.setFloat(j102, f56);
                    floatLargeArray2.setFloat(j101, f53);
                    floatLargeArray2.setFloat(j103, f54);
                    long j104 = j98 - j42;
                    long j105 = j99 + j42;
                    long j106 = j2 + j104;
                    long j107 = j2 + j105;
                    float f57 = floatLargeArray2.getFloat(j106);
                    long j108 = j106 + 1;
                    float f58 = floatLargeArray2.getFloat(j108);
                    float f59 = floatLargeArray2.getFloat(j107);
                    long j109 = j107 + 1;
                    float f60 = floatLargeArray2.getFloat(j109);
                    floatLargeArray2.setFloat(j106, f59);
                    floatLargeArray2.setFloat(j108, f60);
                    floatLargeArray2.setFloat(j107, f57);
                    floatLargeArray2.setFloat(j109, f58);
                    long j110 = j2 + (j104 - j42);
                    long j111 = j2 + (j105 - j26);
                    float f61 = floatLargeArray2.getFloat(j110);
                    long j112 = j110 + 1;
                    float f62 = floatLargeArray2.getFloat(j112);
                    float f63 = floatLargeArray2.getFloat(j111);
                    long j113 = j111 + 1;
                    float f64 = floatLargeArray2.getFloat(j113);
                    floatLargeArray2.setFloat(j110, f63);
                    floatLargeArray2.setFloat(j112, f64);
                    floatLargeArray2.setFloat(j111, f61);
                    floatLargeArray2.setFloat(j113, f62);
                    j11++;
                    longLargeArray2 = longLargeArray;
                    j4 = 1;
                    j6 = j15;
                    j5 = j19;
                    j8 = j42;
                    j7 = 4;
                }
                long j114 = j6;
                long j115 = j5;
                long j116 = j8;
                long j117 = j4;
                long j118 = j10 + (longLargeArray.getLong(j115 + j9) * 2);
                long j119 = j118 + 2;
                long j120 = j118 + j114;
                long j121 = j2 + j119;
                long j122 = j2 + j120;
                float f65 = floatLargeArray2.getFloat(j121);
                long j123 = j121 + j117;
                float f66 = floatLargeArray2.getFloat(j123);
                float f67 = floatLargeArray2.getFloat(j122);
                long j124 = j119;
                long j125 = j122 + j117;
                float f68 = floatLargeArray2.getFloat(j125);
                floatLargeArray2.setFloat(j121, f67);
                floatLargeArray2.setFloat(j123, f68);
                floatLargeArray2.setFloat(j122, f65);
                floatLargeArray2.setFloat(j125, f66);
                long j126 = j124 + j116;
                long j127 = j115 * 8;
                long j128 = j120 + j127;
                long j129 = j2 + j126;
                long j130 = j2 + j128;
                float f69 = floatLargeArray2.getFloat(j129);
                long j131 = j129 + 1;
                float f70 = floatLargeArray2.getFloat(j131);
                float f71 = floatLargeArray2.getFloat(j130);
                long j132 = j127;
                long j133 = j130 + 1;
                float f72 = floatLargeArray2.getFloat(j133);
                floatLargeArray2.setFloat(j129, f71);
                floatLargeArray2.setFloat(j131, f72);
                floatLargeArray2.setFloat(j130, f69);
                floatLargeArray2.setFloat(j133, f70);
                long j134 = j126 + j116;
                long j135 = j128 - j116;
                long j136 = j2 + j134;
                long j137 = j2 + j135;
                float f73 = floatLargeArray2.getFloat(j136);
                long j138 = j136 + 1;
                float f74 = floatLargeArray2.getFloat(j138);
                float f75 = floatLargeArray2.getFloat(j137);
                long j139 = j137 + 1;
                float f76 = floatLargeArray2.getFloat(j139);
                floatLargeArray2.setFloat(j136, f75);
                floatLargeArray2.setFloat(j138, f76);
                floatLargeArray2.setFloat(j137, f73);
                floatLargeArray2.setFloat(j139, f74);
                long j140 = j134 - 2;
                long j141 = j135 - j114;
                long j142 = j2 + j140;
                long j143 = j2 + j141;
                float f77 = floatLargeArray2.getFloat(j142);
                long j144 = j142 + 1;
                float f78 = floatLargeArray2.getFloat(j144);
                float f79 = floatLargeArray2.getFloat(j143);
                long j145 = j143 + 1;
                float f80 = floatLargeArray2.getFloat(j145);
                floatLargeArray2.setFloat(j142, f79);
                floatLargeArray2.setFloat(j144, f80);
                floatLargeArray2.setFloat(j143, f77);
                floatLargeArray2.setFloat(j145, f78);
                long j146 = j114 + 2;
                long j147 = j140 + j146;
                long j148 = j141 + j146;
                long j149 = j2 + j147;
                long j150 = j2 + j148;
                float f81 = floatLargeArray2.getFloat(j149);
                long j151 = j149 + 1;
                float f82 = floatLargeArray2.getFloat(j151);
                float f83 = floatLargeArray2.getFloat(j150);
                long j152 = j150 + 1;
                float f84 = floatLargeArray2.getFloat(j152);
                floatLargeArray2.setFloat(j149, f83);
                floatLargeArray2.setFloat(j151, f84);
                floatLargeArray2.setFloat(j150, f81);
                floatLargeArray2.setFloat(j152, f82);
                long j153 = j2 + (j147 - (j114 - j116));
                long j154 = j2 + j148 + (j132 - 2);
                float f85 = floatLargeArray2.getFloat(j153);
                long j155 = j153 + 1;
                float f86 = floatLargeArray2.getFloat(j155);
                float f87 = floatLargeArray2.getFloat(j154);
                long j156 = j154 + 1;
                float f88 = floatLargeArray2.getFloat(j156);
                floatLargeArray2.setFloat(j153, f87);
                floatLargeArray2.setFloat(j155, f88);
                floatLargeArray2.setFloat(j154, f85);
                floatLargeArray2.setFloat(j156, f86);
                j9++;
                longLargeArray2 = longLargeArray;
                j4 = 1;
                j6 = j114;
                j5 = j115;
                j8 = j116;
                j7 = 4;
            }
            return;
        }
        long j157 = j6;
        long j158 = j5;
        long j159 = j8;
        long j160 = 0;
        while (j160 < j158) {
            long j161 = 4;
            long j162 = j160 * 4;
            long j163 = 0;
            while (j163 < j160) {
                LongLargeArray longLargeArray3 = longLargeArray;
                long j164 = (j163 * j161) + longLargeArray3.getLong(j158 + j160);
                long j165 = longLargeArray3.getLong(j158 + j163) + j162;
                long j166 = j2 + j164;
                long j167 = j2 + j165;
                long j168 = j162;
                float f89 = floatLargeArray2.getFloat(j166);
                long j169 = j160;
                long j170 = j166 + 1;
                float f90 = floatLargeArray2.getFloat(j170);
                float f91 = floatLargeArray2.getFloat(j167);
                long j171 = j163;
                long j172 = j167 + 1;
                long j173 = j165;
                float f92 = floatLargeArray2.getFloat(j172);
                floatLargeArray2.setFloat(j166, f91);
                floatLargeArray2.setFloat(j170, f92);
                floatLargeArray2.setFloat(j167, f89);
                floatLargeArray2.setFloat(j172, f90);
                long j174 = j164 + j159;
                long j175 = j173 + j159;
                long j176 = j2 + j174;
                long j177 = j2 + j175;
                float f93 = floatLargeArray2.getFloat(j176);
                long j178 = j176 + 1;
                float f94 = floatLargeArray2.getFloat(j178);
                float f95 = floatLargeArray2.getFloat(j177);
                long j179 = j177 + 1;
                long j180 = j175;
                float f96 = floatLargeArray2.getFloat(j179);
                floatLargeArray2.setFloat(j176, f95);
                floatLargeArray2.setFloat(j178, f96);
                floatLargeArray2.setFloat(j177, f93);
                floatLargeArray2.setFloat(j179, f94);
                long j181 = j174 + j157;
                long j182 = j180 + 2;
                long j183 = j2 + j181;
                long j184 = j2 + j182;
                float f97 = floatLargeArray2.getFloat(j183);
                long j185 = j183 + 1;
                float f98 = floatLargeArray2.getFloat(j185);
                float f99 = floatLargeArray2.getFloat(j184);
                long j186 = j184 + 1;
                long j187 = j182;
                float f100 = floatLargeArray2.getFloat(j186);
                floatLargeArray2.setFloat(j183, f99);
                floatLargeArray2.setFloat(j185, f100);
                floatLargeArray2.setFloat(j184, f97);
                floatLargeArray2.setFloat(j186, f98);
                long j188 = j181 - j159;
                long j189 = j187 - j159;
                long j190 = j2 + j188;
                long j191 = j2 + j189;
                float f101 = floatLargeArray2.getFloat(j190);
                long j192 = j190 + 1;
                float f102 = floatLargeArray2.getFloat(j192);
                float f103 = floatLargeArray2.getFloat(j191);
                long j193 = j191 + 1;
                long j194 = j189;
                float f104 = floatLargeArray2.getFloat(j193);
                floatLargeArray2.setFloat(j190, f103);
                floatLargeArray2.setFloat(j192, f104);
                floatLargeArray2.setFloat(j191, f101);
                floatLargeArray2.setFloat(j193, f102);
                long j195 = j188 + 2;
                long j196 = j194 + j157;
                long j197 = j2 + j195;
                long j198 = j2 + j196;
                float f105 = floatLargeArray2.getFloat(j197);
                long j199 = j197 + 1;
                float f106 = floatLargeArray2.getFloat(j199);
                float f107 = floatLargeArray2.getFloat(j198);
                long j200 = j198 + 1;
                long j201 = j196;
                float f108 = floatLargeArray2.getFloat(j200);
                floatLargeArray2.setFloat(j197, f107);
                floatLargeArray2.setFloat(j199, f108);
                floatLargeArray2.setFloat(j198, f105);
                floatLargeArray2.setFloat(j200, f106);
                long j202 = j195 + j159;
                long j203 = j201 + j159;
                long j204 = j2 + j202;
                long j205 = j2 + j203;
                float f109 = floatLargeArray2.getFloat(j204);
                long j206 = j204 + 1;
                float f110 = floatLargeArray2.getFloat(j206);
                float f111 = floatLargeArray2.getFloat(j205);
                long j207 = j205 + 1;
                long j208 = j203;
                float f112 = floatLargeArray2.getFloat(j207);
                floatLargeArray2.setFloat(j204, f111);
                floatLargeArray2.setFloat(j206, f112);
                floatLargeArray2.setFloat(j205, f109);
                floatLargeArray2.setFloat(j207, f110);
                long j209 = j202 - j157;
                long j210 = j208 - 2;
                long j211 = j2 + j209;
                long j212 = j2 + j210;
                float f113 = floatLargeArray2.getFloat(j211);
                long j213 = j211 + 1;
                float f114 = floatLargeArray2.getFloat(j213);
                float f115 = floatLargeArray2.getFloat(j212);
                long j214 = j212 + 1;
                long j215 = j210;
                float f116 = floatLargeArray2.getFloat(j214);
                floatLargeArray2.setFloat(j211, f115);
                floatLargeArray2.setFloat(j213, f116);
                floatLargeArray2.setFloat(j212, f113);
                floatLargeArray2.setFloat(j214, f114);
                long j216 = j2 + (j209 - j159);
                long j217 = j2 + (j215 - j159);
                float f117 = floatLargeArray2.getFloat(j216);
                long j218 = j216 + 1;
                float f118 = floatLargeArray2.getFloat(j218);
                float f119 = floatLargeArray2.getFloat(j217);
                long j219 = j217 + 1;
                float f120 = floatLargeArray2.getFloat(j219);
                floatLargeArray2.setFloat(j216, f119);
                floatLargeArray2.setFloat(j218, f120);
                floatLargeArray2.setFloat(j217, f117);
                floatLargeArray2.setFloat(j219, f118);
                j163 = j171 + 1;
                j162 = j168;
                j160 = j169;
                j161 = 4;
            }
            long j220 = j160;
            long j221 = j162 + longLargeArray.getLong(j158 + j220);
            long j222 = j221 + 2;
            long j223 = j221 + j157;
            long j224 = j2 + j222;
            long j225 = j2 + j223;
            float f121 = floatLargeArray2.getFloat(j224);
            long j226 = j224 + 1;
            float f122 = floatLargeArray2.getFloat(j226);
            float f123 = floatLargeArray2.getFloat(j225);
            long j227 = j223;
            long j228 = j225 + 1;
            float f124 = floatLargeArray2.getFloat(j228);
            floatLargeArray2.setFloat(j224, f123);
            floatLargeArray2.setFloat(j226, f124);
            floatLargeArray2.setFloat(j225, f121);
            floatLargeArray2.setFloat(j228, f122);
            long j229 = j2 + j222 + j159;
            long j230 = j2 + j227 + j159;
            float f125 = floatLargeArray2.getFloat(j229);
            long j231 = j229 + 1;
            float f126 = floatLargeArray2.getFloat(j231);
            float f127 = floatLargeArray2.getFloat(j230);
            long j232 = j230 + 1;
            float f128 = floatLargeArray2.getFloat(j232);
            floatLargeArray2.setFloat(j229, f127);
            floatLargeArray2.setFloat(j231, f128);
            floatLargeArray2.setFloat(j230, f125);
            floatLargeArray2.setFloat(j232, f126);
            j160 = j220 + 1;
        }
    }

    public static void bitrv2conj(int i, int[] iArr, float[] fArr, int i2) {
        int i3 = i >> 2;
        int i4 = 1;
        while (i3 > 8) {
            i4 <<= 1;
            i3 >>= 2;
        }
        int i5 = i >> 1;
        int i6 = i4 * 4;
        if (i3 == 8) {
            for (int i7 = 0; i7 < i4; i7++) {
                int i8 = i7 * 4;
                int i9 = 0;
                while (i9 < i7) {
                    int i10 = (i9 * 4) + (iArr[i4 + i7] * 2);
                    int i11 = (iArr[i4 + i9] * 2) + i8;
                    int i12 = i2 + i10;
                    int i13 = i2 + i11;
                    float f = fArr[i12];
                    int i14 = i12 + 1;
                    int i15 = i13 + 1;
                    fArr[i12] = fArr[i13];
                    fArr[i14] = -fArr[i15];
                    fArr[i13] = f;
                    fArr[i15] = -fArr[i14];
                    int i16 = i10 + i6;
                    int i17 = i4 * 8;
                    int i18 = i11 + i17;
                    int i19 = i2 + i16;
                    int i20 = i2 + i18;
                    float f2 = fArr[i19];
                    int i21 = i19 + 1;
                    int i22 = i20 + 1;
                    int i23 = i8;
                    fArr[i19] = fArr[i20];
                    fArr[i21] = -fArr[i22];
                    fArr[i20] = f2;
                    fArr[i22] = -fArr[i21];
                    int i24 = i16 + i6;
                    int i25 = i18 - i6;
                    int i26 = i2 + i24;
                    int i27 = i2 + i25;
                    float f3 = fArr[i26];
                    int i28 = i26 + 1;
                    int i29 = i27 + 1;
                    fArr[i26] = fArr[i27];
                    fArr[i28] = -fArr[i29];
                    fArr[i27] = f3;
                    fArr[i29] = -fArr[i28];
                    int i30 = i24 + i6;
                    int i31 = i25 + i17;
                    int i32 = i2 + i30;
                    int i33 = i2 + i31;
                    float f4 = fArr[i32];
                    int i34 = i32 + 1;
                    int i35 = i33 + 1;
                    fArr[i32] = fArr[i33];
                    fArr[i34] = -fArr[i35];
                    fArr[i33] = f4;
                    fArr[i35] = -fArr[i34];
                    int i36 = i30 + i5;
                    int i37 = i31 + 2;
                    int i38 = i2 + i36;
                    int i39 = i2 + i37;
                    float f5 = fArr[i38];
                    int i40 = i38 + 1;
                    int i41 = i39 + 1;
                    fArr[i38] = fArr[i39];
                    fArr[i40] = -fArr[i41];
                    fArr[i39] = f5;
                    fArr[i41] = -fArr[i40];
                    int i42 = i36 - i6;
                    int i43 = i37 - i17;
                    int i44 = i2 + i42;
                    int i45 = i2 + i43;
                    float f6 = fArr[i44];
                    int i46 = i44 + 1;
                    int i47 = i45 + 1;
                    fArr[i44] = fArr[i45];
                    fArr[i46] = -fArr[i47];
                    fArr[i45] = f6;
                    fArr[i47] = -fArr[i46];
                    int i48 = i42 - i6;
                    int i49 = i43 + i6;
                    int i50 = i2 + i48;
                    int i51 = i2 + i49;
                    int i52 = fArr[i50];
                    int i53 = i50 + 1;
                    int i54 = i51 + 1;
                    fArr[i50] = fArr[i51];
                    fArr[i53] = -fArr[i54];
                    fArr[i51] = i52;
                    fArr[i54] = -fArr[i53];
                    int i55 = i48 - i6;
                    int i56 = i49 - i17;
                    int i57 = i2 + i55;
                    int i58 = i2 + i56;
                    int i59 = fArr[i57];
                    int i60 = i57 + 1;
                    int i61 = i58 + 1;
                    fArr[i57] = fArr[i58];
                    fArr[i60] = -fArr[i61];
                    fArr[i58] = i59;
                    fArr[i61] = -fArr[i60];
                    int i62 = i55 + 2;
                    int i63 = i56 + i5;
                    int i64 = i2 + i62;
                    int i65 = i2 + i63;
                    int i66 = fArr[i64];
                    int i67 = i64 + 1;
                    int i68 = i65 + 1;
                    fArr[i64] = fArr[i65];
                    fArr[i67] = -fArr[i68];
                    fArr[i65] = i66;
                    fArr[i68] = -fArr[i67];
                    int i69 = i62 + i6;
                    int i70 = i63 + i17;
                    int i71 = i2 + i69;
                    int i72 = i2 + i70;
                    int i73 = fArr[i71];
                    int i74 = i71 + 1;
                    int i75 = i72 + 1;
                    fArr[i71] = fArr[i72];
                    fArr[i74] = -fArr[i75];
                    fArr[i72] = i73;
                    fArr[i75] = -fArr[i74];
                    int i76 = i69 + i6;
                    int i77 = i70 - i6;
                    int i78 = i2 + i76;
                    int i79 = i2 + i77;
                    int i80 = fArr[i78];
                    int i81 = i78 + 1;
                    int i82 = i79 + 1;
                    fArr[i78] = fArr[i79];
                    fArr[i81] = -fArr[i82];
                    fArr[i79] = i80;
                    fArr[i82] = -fArr[i81];
                    int i83 = i76 + i6;
                    int i84 = i77 + i17;
                    int i85 = i2 + i83;
                    int i86 = i2 + i84;
                    int i87 = fArr[i85];
                    int i88 = i85 + 1;
                    int i89 = i86 + 1;
                    fArr[i85] = fArr[i86];
                    fArr[i88] = -fArr[i89];
                    fArr[i86] = i87;
                    fArr[i89] = -fArr[i88];
                    int i90 = i83 - i5;
                    int i91 = i84 - 2;
                    int i92 = i2 + i90;
                    int i93 = i2 + i91;
                    int i94 = fArr[i92];
                    int i95 = i92 + 1;
                    int i96 = i93 + 1;
                    fArr[i92] = fArr[i93];
                    fArr[i95] = -fArr[i96];
                    fArr[i93] = i94;
                    fArr[i96] = -fArr[i95];
                    int i97 = i90 - i6;
                    int i98 = i91 - i17;
                    int i99 = i2 + i97;
                    int i100 = i2 + i98;
                    int i101 = fArr[i99];
                    int i102 = i99 + 1;
                    int i103 = i100 + 1;
                    fArr[i99] = fArr[i100];
                    fArr[i102] = -fArr[i103];
                    fArr[i100] = i101;
                    fArr[i103] = -fArr[i102];
                    int i104 = i97 - i6;
                    int i105 = i98 + i6;
                    int i106 = i2 + i104;
                    int i107 = i2 + i105;
                    int i108 = fArr[i106];
                    int i109 = i106 + 1;
                    int i110 = i107 + 1;
                    fArr[i106] = fArr[i107];
                    fArr[i109] = -fArr[i110];
                    fArr[i107] = i108;
                    fArr[i110] = -fArr[i109];
                    int i111 = i2 + (i104 - i6);
                    int i112 = i2 + (i105 - i17);
                    int i113 = fArr[i111];
                    int i114 = i111 + 1;
                    int i115 = i112 + 1;
                    fArr[i111] = fArr[i112];
                    fArr[i114] = -fArr[i115];
                    fArr[i112] = i113;
                    fArr[i115] = -fArr[i114];
                    i9++;
                    i8 = i23;
                }
                int i116 = i8 + (iArr[i4 + i7] * 2);
                int i117 = i116 + 2;
                int i118 = i116 + i5;
                int i119 = i2 + i117;
                int i120 = i2 + i118;
                int i121 = i119 - 1;
                fArr[i121] = -fArr[i121];
                float f7 = fArr[i119];
                int i122 = i119 + 1;
                int i123 = i120 + 1;
                fArr[i119] = fArr[i120];
                fArr[i122] = -fArr[i123];
                fArr[i120] = f7;
                fArr[i123] = -fArr[i122];
                int i124 = i120 + 3;
                fArr[i124] = -fArr[i124];
                int i125 = i117 + i6;
                int i126 = i4 * 8;
                int i127 = i118 + i126;
                int i128 = i2 + i125;
                int i129 = i2 + i127;
                float f8 = fArr[i128];
                int i130 = i128 + 1;
                int i131 = i129 + 1;
                fArr[i128] = fArr[i129];
                fArr[i130] = -fArr[i131];
                fArr[i129] = f8;
                fArr[i131] = -fArr[i130];
                int i132 = i125 + i6;
                int i133 = i127 - i6;
                int i134 = i2 + i132;
                int i135 = i2 + i133;
                float f9 = fArr[i134];
                int i136 = i134 + 1;
                int i137 = i135 + 1;
                fArr[i134] = fArr[i135];
                fArr[i136] = -fArr[i137];
                fArr[i135] = f9;
                fArr[i137] = -fArr[i136];
                int i138 = i132 - 2;
                int i139 = i133 - i5;
                int i140 = i2 + i138;
                int i141 = i2 + i139;
                float f10 = fArr[i140];
                int i142 = i140 + 1;
                int i143 = i141 + 1;
                fArr[i140] = fArr[i141];
                fArr[i142] = -fArr[i143];
                fArr[i141] = f10;
                fArr[i143] = -fArr[i142];
                int i144 = i5 + 2;
                int i145 = i138 + i144;
                int i146 = i139 + i144;
                int i147 = i2 + i145;
                int i148 = i2 + i146;
                float f11 = fArr[i147];
                int i149 = i147 + 1;
                int i150 = i148 + 1;
                fArr[i147] = fArr[i148];
                fArr[i149] = -fArr[i150];
                fArr[i148] = f11;
                fArr[i150] = -fArr[i149];
                int i151 = i2 + (i145 - (i5 - i6));
                int i152 = i2 + i146 + (i126 - 2);
                int i153 = i151 - 1;
                fArr[i153] = -fArr[i153];
                float f12 = fArr[i151];
                int i154 = i151 + 1;
                int i155 = i152 + 1;
                fArr[i151] = fArr[i152];
                fArr[i154] = -fArr[i155];
                fArr[i152] = f12;
                fArr[i155] = -fArr[i154];
                int i156 = i152 + 3;
                fArr[i156] = -fArr[i156];
            }
            return;
        }
        for (int i157 = 0; i157 < i4; i157++) {
            int i158 = i157 * 4;
            for (int i159 = 0; i159 < i157; i159++) {
                int i160 = (i159 * 4) + iArr[i4 + i157];
                int i161 = iArr[i4 + i159] + i158;
                int i162 = i2 + i160;
                int i163 = i2 + i161;
                float f13 = fArr[i162];
                int i164 = i162 + 1;
                int i165 = i163 + 1;
                fArr[i162] = fArr[i163];
                fArr[i164] = -fArr[i165];
                fArr[i163] = f13;
                fArr[i165] = -fArr[i164];
                int i166 = i160 + i6;
                int i167 = i161 + i6;
                int i168 = i2 + i166;
                int i169 = i2 + i167;
                float f14 = fArr[i168];
                int i170 = i168 + 1;
                int i171 = i169 + 1;
                fArr[i168] = fArr[i169];
                fArr[i170] = -fArr[i171];
                fArr[i169] = f14;
                fArr[i171] = -fArr[i170];
                int i172 = i166 + i5;
                int i173 = i167 + 2;
                int i174 = i2 + i172;
                int i175 = i2 + i173;
                float f15 = fArr[i174];
                int i176 = i174 + 1;
                int i177 = i175 + 1;
                fArr[i174] = fArr[i175];
                fArr[i176] = -fArr[i177];
                fArr[i175] = f15;
                fArr[i177] = -fArr[i176];
                int i178 = i172 - i6;
                int i179 = i173 - i6;
                int i180 = i2 + i178;
                int i181 = i2 + i179;
                float f16 = fArr[i180];
                int i182 = i180 + 1;
                int i183 = i181 + 1;
                fArr[i180] = fArr[i181];
                fArr[i182] = -fArr[i183];
                fArr[i181] = f16;
                fArr[i183] = -fArr[i182];
                int i184 = i178 + 2;
                int i185 = i179 + i5;
                int i186 = i2 + i184;
                int i187 = i2 + i185;
                float f17 = fArr[i186];
                int i188 = i186 + 1;
                int i189 = i187 + 1;
                fArr[i186] = fArr[i187];
                fArr[i188] = -fArr[i189];
                fArr[i187] = f17;
                fArr[i189] = -fArr[i188];
                int i190 = i184 + i6;
                int i191 = i185 + i6;
                int i192 = i2 + i190;
                int i193 = i2 + i191;
                float f18 = fArr[i192];
                int i194 = i192 + 1;
                int i195 = i193 + 1;
                fArr[i192] = fArr[i193];
                fArr[i194] = -fArr[i195];
                fArr[i193] = f18;
                fArr[i195] = -fArr[i194];
                int i196 = i190 - i5;
                int i197 = i191 - 2;
                int i198 = i2 + i196;
                int i199 = i2 + i197;
                float f19 = fArr[i198];
                int i200 = i198 + 1;
                int i201 = i199 + 1;
                fArr[i198] = fArr[i199];
                fArr[i200] = -fArr[i201];
                fArr[i199] = f19;
                fArr[i201] = -fArr[i200];
                int i202 = i2 + (i196 - i6);
                int i203 = i2 + (i197 - i6);
                float f20 = fArr[i202];
                int i204 = i202 + 1;
                int i205 = i203 + 1;
                fArr[i202] = fArr[i203];
                fArr[i204] = -fArr[i205];
                fArr[i203] = f20;
                fArr[i205] = -fArr[i204];
            }
            int i206 = i158 + iArr[i4 + i157];
            int i207 = i206 + 2;
            int i208 = i206 + i5;
            int i209 = i2 + i207;
            int i210 = i2 + i208;
            int i211 = i209 - 1;
            fArr[i211] = -fArr[i211];
            float f21 = fArr[i209];
            int i212 = i209 + 1;
            int i213 = i210 + 1;
            fArr[i209] = fArr[i210];
            fArr[i212] = -fArr[i213];
            fArr[i210] = f21;
            fArr[i213] = -fArr[i212];
            int i214 = i210 + 3;
            fArr[i214] = -fArr[i214];
            int i215 = i2 + i207 + i6;
            int i216 = i2 + i208 + i6;
            int i217 = i215 - 1;
            fArr[i217] = -fArr[i217];
            float f22 = fArr[i215];
            int i218 = i215 + 1;
            int i219 = i216 + 1;
            fArr[i215] = fArr[i216];
            fArr[i218] = -fArr[i219];
            fArr[i216] = f22;
            fArr[i219] = -fArr[i218];
            int i220 = i216 + 3;
            fArr[i220] = -fArr[i220];
        }
    }

    public static void bitrv2conj(long j, LongLargeArray longLargeArray, FloatLargeArray floatLargeArray, long j2) {
        int i;
        LongLargeArray longLargeArray2 = longLargeArray;
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j3 = j >> 2;
        long j4 = 1;
        long j5 = 1;
        while (true) {
            i = (j3 > 8 ? 1 : (j3 == 8 ? 0 : -1));
            if (i <= 0) {
                break;
            }
            j5 <<= 1;
            j3 >>= 2;
        }
        long j6 = j >> 1;
        long j7 = 4;
        long j8 = j5 * 4;
        if (i == 0) {
            long j9 = 0;
            while (j9 < j5) {
                long j10 = j9 * j7;
                long j11 = 0;
                while (j11 < j9) {
                    long j12 = (j11 * j7) + (longLargeArray2.getLong(j5 + j9) * 2);
                    long j13 = j10 + (longLargeArray2.getLong(j5 + j11) * 2);
                    long j14 = j2 + j12;
                    long j15 = j6;
                    long j16 = j2 + j13;
                    float f = floatLargeArray2.getFloat(j14);
                    long j17 = j13;
                    long j18 = j14 + j4;
                    long j19 = j5;
                    long j20 = j16 + j4;
                    floatLargeArray2.setFloat(j14, floatLargeArray2.getFloat(j16));
                    floatLargeArray2.setFloat(j18, -floatLargeArray2.getFloat(j20));
                    floatLargeArray2.setFloat(j16, f);
                    floatLargeArray2.setFloat(j20, -floatLargeArray2.getFloat(j18));
                    long j21 = j12 + j8;
                    long j22 = j19 * 8;
                    long j23 = j17 + j22;
                    long j24 = j2 + j21;
                    long j25 = j2 + j23;
                    float f2 = floatLargeArray2.getFloat(j24);
                    long j26 = j22;
                    long j27 = j24 + 1;
                    long j28 = j23;
                    long j29 = j25 + 1;
                    floatLargeArray2.setFloat(j24, floatLargeArray2.getFloat(j25));
                    floatLargeArray2.setFloat(j27, -floatLargeArray2.getFloat(j29));
                    floatLargeArray2.setFloat(j25, f2);
                    floatLargeArray2.setFloat(j29, -floatLargeArray2.getFloat(j27));
                    long j30 = j21 + j8;
                    long j31 = j28 - j8;
                    long j32 = j2 + j30;
                    long j33 = j2 + j31;
                    float f3 = floatLargeArray2.getFloat(j32);
                    long j34 = j32 + 1;
                    long j35 = j31;
                    long j36 = j33 + 1;
                    floatLargeArray2.setFloat(j32, floatLargeArray2.getFloat(j33));
                    floatLargeArray2.setFloat(j34, -floatLargeArray2.getFloat(j36));
                    floatLargeArray2.setFloat(j33, f3);
                    floatLargeArray2.setFloat(j36, -floatLargeArray2.getFloat(j34));
                    long j37 = j30 + j8;
                    long j38 = j35 + j26;
                    long j39 = j2 + j37;
                    long j40 = j2 + j38;
                    float f4 = floatLargeArray2.getFloat(j39);
                    long j41 = j39 + 1;
                    long j42 = j8;
                    long j43 = j40 + 1;
                    floatLargeArray2.setFloat(j39, floatLargeArray2.getFloat(j40));
                    floatLargeArray2.setFloat(j41, -floatLargeArray2.getFloat(j43));
                    floatLargeArray2.setFloat(j40, f4);
                    floatLargeArray2.setFloat(j43, -floatLargeArray2.getFloat(j41));
                    long j44 = j37 + j15;
                    long j45 = j38 + 2;
                    long j46 = j2 + j44;
                    long j47 = j2 + j45;
                    float f5 = floatLargeArray2.getFloat(j46);
                    long j48 = j46 + 1;
                    long j49 = j47 + 1;
                    floatLargeArray2.setFloat(j46, floatLargeArray2.getFloat(j47));
                    floatLargeArray2.setFloat(j48, -floatLargeArray2.getFloat(j49));
                    floatLargeArray2.setFloat(j47, f5);
                    floatLargeArray2.setFloat(j49, -floatLargeArray2.getFloat(j48));
                    long j50 = j44 - j42;
                    long j51 = j45 - j26;
                    long j52 = j2 + j50;
                    long j53 = j2 + j51;
                    float f6 = floatLargeArray2.getFloat(j52);
                    long j54 = j52 + 1;
                    long j55 = j53 + 1;
                    floatLargeArray2.setFloat(j52, floatLargeArray2.getFloat(j53));
                    floatLargeArray2.setFloat(j54, -floatLargeArray2.getFloat(j55));
                    floatLargeArray2.setFloat(j53, f6);
                    floatLargeArray2.setFloat(j55, -floatLargeArray2.getFloat(j54));
                    long j56 = j50 - j42;
                    long j57 = j51 + j42;
                    long j58 = j2 + j56;
                    long j59 = j2 + j57;
                    float f7 = floatLargeArray2.getFloat(j58);
                    long j60 = j58 + 1;
                    long j61 = j59 + 1;
                    floatLargeArray2.setFloat(j58, floatLargeArray2.getFloat(j59));
                    floatLargeArray2.setFloat(j60, -floatLargeArray2.getFloat(j61));
                    floatLargeArray2.setFloat(j59, f7);
                    floatLargeArray2.setFloat(j61, -floatLargeArray2.getFloat(j60));
                    long j62 = j56 - j42;
                    long j63 = j57 - j26;
                    long j64 = j2 + j62;
                    long j65 = j2 + j63;
                    float f8 = floatLargeArray2.getFloat(j64);
                    long j66 = j64 + 1;
                    long j67 = j65 + 1;
                    floatLargeArray2.setFloat(j64, floatLargeArray2.getFloat(j65));
                    floatLargeArray2.setFloat(j66, -floatLargeArray2.getFloat(j67));
                    floatLargeArray2.setFloat(j65, f8);
                    floatLargeArray2.setFloat(j67, -floatLargeArray2.getFloat(j66));
                    long j68 = j62 + 2;
                    long j69 = j63 + j15;
                    long j70 = j2 + j68;
                    long j71 = j2 + j69;
                    float f9 = floatLargeArray2.getFloat(j70);
                    long j72 = j70 + 1;
                    long j73 = j71 + 1;
                    floatLargeArray2.setFloat(j70, floatLargeArray2.getFloat(j71));
                    floatLargeArray2.setFloat(j72, -floatLargeArray2.getFloat(j73));
                    floatLargeArray2.setFloat(j71, f9);
                    floatLargeArray2.setFloat(j73, -floatLargeArray2.getFloat(j72));
                    long j74 = j68 + j42;
                    long j75 = j69 + j26;
                    long j76 = j2 + j74;
                    long j77 = j2 + j75;
                    float f10 = floatLargeArray2.getFloat(j76);
                    long j78 = j76 + 1;
                    long j79 = j77 + 1;
                    floatLargeArray2.setFloat(j76, floatLargeArray2.getFloat(j77));
                    floatLargeArray2.setFloat(j78, -floatLargeArray2.getFloat(j79));
                    floatLargeArray2.setFloat(j77, f10);
                    floatLargeArray2.setFloat(j79, -floatLargeArray2.getFloat(j78));
                    long j80 = j74 + j42;
                    long j81 = j75 - j42;
                    long j82 = j2 + j80;
                    long j83 = j2 + j81;
                    float f11 = floatLargeArray2.getFloat(j82);
                    long j84 = j82 + 1;
                    long j85 = j83 + 1;
                    floatLargeArray2.setFloat(j82, floatLargeArray2.getFloat(j83));
                    floatLargeArray2.setFloat(j84, -floatLargeArray2.getFloat(j85));
                    floatLargeArray2.setFloat(j83, f11);
                    floatLargeArray2.setFloat(j85, -floatLargeArray2.getFloat(j84));
                    long j86 = j80 + j42;
                    long j87 = j81 + j26;
                    long j88 = j2 + j86;
                    long j89 = j2 + j87;
                    float f12 = floatLargeArray2.getFloat(j88);
                    long j90 = j88 + 1;
                    long j91 = j89 + 1;
                    floatLargeArray2.setFloat(j88, floatLargeArray2.getFloat(j89));
                    floatLargeArray2.setFloat(j90, -floatLargeArray2.getFloat(j91));
                    floatLargeArray2.setFloat(j89, f12);
                    floatLargeArray2.setFloat(j91, -floatLargeArray2.getFloat(j90));
                    long j92 = j86 - j15;
                    long j93 = j87 - 2;
                    long j94 = j2 + j92;
                    long j95 = j2 + j93;
                    float f13 = floatLargeArray2.getFloat(j94);
                    long j96 = j94 + 1;
                    long j97 = j95 + 1;
                    floatLargeArray2.setFloat(j94, floatLargeArray2.getFloat(j95));
                    floatLargeArray2.setFloat(j96, -floatLargeArray2.getFloat(j97));
                    floatLargeArray2.setFloat(j95, f13);
                    floatLargeArray2.setFloat(j97, -floatLargeArray2.getFloat(j96));
                    long j98 = j92 - j42;
                    long j99 = j93 - j26;
                    long j100 = j2 + j98;
                    long j101 = j2 + j99;
                    float f14 = floatLargeArray2.getFloat(j100);
                    long j102 = j100 + 1;
                    long j103 = j101 + 1;
                    floatLargeArray2.setFloat(j100, floatLargeArray2.getFloat(j101));
                    floatLargeArray2.setFloat(j102, -floatLargeArray2.getFloat(j103));
                    floatLargeArray2.setFloat(j101, f14);
                    floatLargeArray2.setFloat(j103, -floatLargeArray2.getFloat(j102));
                    long j104 = j98 - j42;
                    long j105 = j99 + j42;
                    long j106 = j2 + j104;
                    long j107 = j2 + j105;
                    float f15 = floatLargeArray2.getFloat(j106);
                    long j108 = j106 + 1;
                    long j109 = j107 + 1;
                    floatLargeArray2.setFloat(j106, floatLargeArray2.getFloat(j107));
                    floatLargeArray2.setFloat(j108, -floatLargeArray2.getFloat(j109));
                    floatLargeArray2.setFloat(j107, f15);
                    floatLargeArray2.setFloat(j109, -floatLargeArray2.getFloat(j108));
                    long j110 = j2 + (j104 - j42);
                    long j111 = j2 + (j105 - j26);
                    float f16 = floatLargeArray2.getFloat(j110);
                    long j112 = j110 + 1;
                    long j113 = j111 + 1;
                    floatLargeArray2.setFloat(j110, floatLargeArray2.getFloat(j111));
                    floatLargeArray2.setFloat(j112, -floatLargeArray2.getFloat(j113));
                    floatLargeArray2.setFloat(j111, f16);
                    floatLargeArray2.setFloat(j113, -floatLargeArray2.getFloat(j112));
                    j11++;
                    longLargeArray2 = longLargeArray;
                    j4 = 1;
                    j6 = j15;
                    j5 = j19;
                    j8 = j42;
                    j7 = 4;
                }
                long j114 = j6;
                long j115 = j5;
                long j116 = j8;
                long j117 = j4;
                long j118 = j10 + (longLargeArray.getLong(j115 + j9) * 2);
                long j119 = j118 + 2;
                long j120 = j118 + j114;
                long j121 = j2 + j119;
                long j122 = j2 + j120;
                long j123 = j121 - j117;
                floatLargeArray2.setFloat(j123, -floatLargeArray2.getFloat(j123));
                float f17 = floatLargeArray2.getFloat(j121);
                long j124 = j121 + j117;
                long j125 = j119;
                long j126 = j122 + j117;
                floatLargeArray2.setFloat(j121, floatLargeArray2.getFloat(j122));
                floatLargeArray2.setFloat(j124, -floatLargeArray2.getFloat(j126));
                floatLargeArray2.setFloat(j122, f17);
                floatLargeArray2.setFloat(j126, -floatLargeArray2.getFloat(j124));
                long j127 = j122 + 3;
                floatLargeArray2.setFloat(j127, -floatLargeArray2.getFloat(j127));
                long j128 = j125 + j116;
                long j129 = j115 * 8;
                long j130 = j120 + j129;
                long j131 = j2 + j128;
                long j132 = j2 + j130;
                float f18 = floatLargeArray2.getFloat(j131);
                long j133 = j131 + 1;
                long j134 = j129;
                long j135 = j132 + 1;
                floatLargeArray2.setFloat(j131, floatLargeArray2.getFloat(j132));
                floatLargeArray2.setFloat(j133, -floatLargeArray2.getFloat(j135));
                floatLargeArray2.setFloat(j132, f18);
                floatLargeArray2.setFloat(j135, -floatLargeArray2.getFloat(j133));
                long j136 = j128 + j116;
                long j137 = j130 - j116;
                long j138 = j2 + j136;
                long j139 = j2 + j137;
                float f19 = floatLargeArray2.getFloat(j138);
                long j140 = j138 + 1;
                long j141 = j139 + 1;
                floatLargeArray2.setFloat(j138, floatLargeArray2.getFloat(j139));
                floatLargeArray2.setFloat(j140, -floatLargeArray2.getFloat(j141));
                floatLargeArray2.setFloat(j139, f19);
                floatLargeArray2.setFloat(j141, -floatLargeArray2.getFloat(j140));
                long j142 = j136 - 2;
                long j143 = j137 - j114;
                long j144 = j2 + j142;
                long j145 = j2 + j143;
                float f20 = floatLargeArray2.getFloat(j144);
                long j146 = j144 + 1;
                long j147 = j145 + 1;
                floatLargeArray2.setFloat(j144, floatLargeArray2.getFloat(j145));
                floatLargeArray2.setFloat(j146, -floatLargeArray2.getFloat(j147));
                floatLargeArray2.setFloat(j145, f20);
                floatLargeArray2.setFloat(j147, -floatLargeArray2.getFloat(j146));
                long j148 = j114 + 2;
                long j149 = j142 + j148;
                long j150 = j143 + j148;
                long j151 = j2 + j149;
                long j152 = j2 + j150;
                float f21 = floatLargeArray2.getFloat(j151);
                long j153 = j151 + 1;
                long j154 = j152 + 1;
                floatLargeArray2.setFloat(j151, floatLargeArray2.getFloat(j152));
                floatLargeArray2.setFloat(j153, -floatLargeArray2.getFloat(j154));
                floatLargeArray2.setFloat(j152, f21);
                floatLargeArray2.setFloat(j154, -floatLargeArray2.getFloat(j153));
                long j155 = j2 + (j149 - (j114 - j116));
                long j156 = j2 + j150 + (j134 - 2);
                long j157 = j155 - 1;
                floatLargeArray2.setFloat(j157, -floatLargeArray2.getFloat(j157));
                float f22 = floatLargeArray2.getFloat(j155);
                long j158 = j155 + 1;
                long j159 = j156 + 1;
                floatLargeArray2.setFloat(j155, floatLargeArray2.getFloat(j156));
                floatLargeArray2.setFloat(j158, -floatLargeArray2.getFloat(j159));
                floatLargeArray2.setFloat(j156, f22);
                floatLargeArray2.setFloat(j159, -floatLargeArray2.getFloat(j158));
                long j160 = j156 + 3;
                floatLargeArray2.setFloat(j160, -floatLargeArray2.getFloat(j160));
                j9++;
                longLargeArray2 = longLargeArray;
                j4 = 1;
                j6 = j114;
                j5 = j115;
                j8 = j116;
                j7 = 4;
            }
            return;
        }
        long j161 = j6;
        long j162 = j5;
        long j163 = j8;
        int i2 = 0;
        while (true) {
            long j164 = (long) i2;
            if (j164 < j162) {
                long j165 = (long) (i2 * 4);
                int i3 = 0;
                while (i3 < i2) {
                    LongLargeArray longLargeArray3 = longLargeArray;
                    long j166 = ((long) (i3 * 4)) + longLargeArray3.getLong(j162 + j164);
                    long j167 = longLargeArray3.getLong(j162 + ((long) i3)) + j165;
                    long j168 = j2 + j166;
                    long j169 = j165;
                    long j170 = j2 + j167;
                    float f23 = floatLargeArray2.getFloat(j168);
                    int i4 = i2;
                    long j171 = j168 + 1;
                    long j172 = j167;
                    long j173 = j170 + 1;
                    floatLargeArray2.setFloat(j168, floatLargeArray2.getFloat(j170));
                    floatLargeArray2.setFloat(j171, -floatLargeArray2.getFloat(j173));
                    floatLargeArray2.setFloat(j170, f23);
                    floatLargeArray2.setFloat(j173, -floatLargeArray2.getFloat(j171));
                    long j174 = j166 + j163;
                    long j175 = j172 + j163;
                    long j176 = j2 + j174;
                    long j177 = j2 + j175;
                    float f24 = floatLargeArray2.getFloat(j176);
                    long j178 = j176 + 1;
                    long j179 = j175;
                    long j180 = j177 + 1;
                    floatLargeArray2.setFloat(j176, floatLargeArray2.getFloat(j177));
                    floatLargeArray2.setFloat(j178, -floatLargeArray2.getFloat(j180));
                    floatLargeArray2.setFloat(j177, f24);
                    floatLargeArray2.setFloat(j180, -floatLargeArray2.getFloat(j178));
                    long j181 = j174 + j161;
                    long j182 = j179 + 2;
                    long j183 = j2 + j181;
                    long j184 = j2 + j182;
                    float f25 = floatLargeArray2.getFloat(j183);
                    long j185 = j183 + 1;
                    long j186 = j182;
                    long j187 = j184 + 1;
                    floatLargeArray2.setFloat(j183, floatLargeArray2.getFloat(j184));
                    floatLargeArray2.setFloat(j185, -floatLargeArray2.getFloat(j187));
                    floatLargeArray2.setFloat(j184, f25);
                    floatLargeArray2.setFloat(j187, -floatLargeArray2.getFloat(j185));
                    long j188 = j181 - j163;
                    long j189 = j186 - j163;
                    long j190 = j2 + j188;
                    long j191 = j2 + j189;
                    float f26 = floatLargeArray2.getFloat(j190);
                    long j192 = j190 + 1;
                    long j193 = j189;
                    long j194 = j191 + 1;
                    floatLargeArray2.setFloat(j190, floatLargeArray2.getFloat(j191));
                    floatLargeArray2.setFloat(j192, -floatLargeArray2.getFloat(j194));
                    floatLargeArray2.setFloat(j191, f26);
                    floatLargeArray2.setFloat(j194, -floatLargeArray2.getFloat(j192));
                    long j195 = j188 + 2;
                    long j196 = j193 + j161;
                    long j197 = j2 + j195;
                    long j198 = j2 + j196;
                    float f27 = floatLargeArray2.getFloat(j197);
                    long j199 = j197 + 1;
                    long j200 = j196;
                    long j201 = j198 + 1;
                    floatLargeArray2.setFloat(j197, floatLargeArray2.getFloat(j198));
                    floatLargeArray2.setFloat(j199, -floatLargeArray2.getFloat(j201));
                    floatLargeArray2.setFloat(j198, f27);
                    floatLargeArray2.setFloat(j201, -floatLargeArray2.getFloat(j199));
                    long j202 = j195 + j163;
                    long j203 = j200 + j163;
                    long j204 = j2 + j202;
                    long j205 = j2 + j203;
                    float f28 = floatLargeArray2.getFloat(j204);
                    long j206 = j204 + 1;
                    long j207 = j203;
                    long j208 = j205 + 1;
                    floatLargeArray2.setFloat(j204, floatLargeArray2.getFloat(j205));
                    floatLargeArray2.setFloat(j206, -floatLargeArray2.getFloat(j208));
                    floatLargeArray2.setFloat(j205, f28);
                    floatLargeArray2.setFloat(j208, -floatLargeArray2.getFloat(j206));
                    long j209 = j202 - j161;
                    long j210 = j207 - 2;
                    long j211 = j2 + j209;
                    long j212 = j2 + j210;
                    float f29 = floatLargeArray2.getFloat(j211);
                    long j213 = j211 + 1;
                    long j214 = j210;
                    long j215 = j212 + 1;
                    floatLargeArray2.setFloat(j211, floatLargeArray2.getFloat(j212));
                    floatLargeArray2.setFloat(j213, -floatLargeArray2.getFloat(j215));
                    floatLargeArray2.setFloat(j212, f29);
                    floatLargeArray2.setFloat(j215, -floatLargeArray2.getFloat(j213));
                    long j216 = j2 + (j209 - j163);
                    long j217 = j2 + (j214 - j163);
                    float f30 = floatLargeArray2.getFloat(j216);
                    long j218 = j216 + 1;
                    long j219 = j217 + 1;
                    floatLargeArray2.setFloat(j216, floatLargeArray2.getFloat(j217));
                    floatLargeArray2.setFloat(j218, -floatLargeArray2.getFloat(j219));
                    floatLargeArray2.setFloat(j217, f30);
                    floatLargeArray2.setFloat(j219, -floatLargeArray2.getFloat(j218));
                    i3++;
                    j165 = j169;
                    i2 = i4;
                    j164 = j164;
                }
                int i5 = i2;
                long j220 = j165 + longLargeArray.getLong(j162 + j164);
                long j221 = j220 + 2;
                long j222 = j220 + j161;
                long j223 = j2 + j221;
                long j224 = j2 + j222;
                long j225 = j223 - 1;
                floatLargeArray2.setFloat(j225, -floatLargeArray2.getFloat(j225));
                float f31 = floatLargeArray2.getFloat(j223);
                long j226 = j223 + 1;
                long j227 = j222;
                long j228 = j224 + 1;
                floatLargeArray2.setFloat(j223, floatLargeArray2.getFloat(j224));
                floatLargeArray2.setFloat(j226, -floatLargeArray2.getFloat(j228));
                floatLargeArray2.setFloat(j224, f31);
                floatLargeArray2.setFloat(j228, -floatLargeArray2.getFloat(j226));
                long j229 = j224 + 3;
                floatLargeArray2.setFloat(j229, -floatLargeArray2.getFloat(j229));
                long j230 = j2 + j221 + j163;
                long j231 = j2 + j227 + j163;
                long j232 = j230 - 1;
                floatLargeArray2.setFloat(j232, -floatLargeArray2.getFloat(j232));
                float f32 = floatLargeArray2.getFloat(j230);
                long j233 = j230 + 1;
                long j234 = j231 + 1;
                floatLargeArray2.setFloat(j230, floatLargeArray2.getFloat(j231));
                floatLargeArray2.setFloat(j233, -floatLargeArray2.getFloat(j234));
                floatLargeArray2.setFloat(j231, f32);
                floatLargeArray2.setFloat(j234, -floatLargeArray2.getFloat(j233));
                long j235 = j231 + 3;
                floatLargeArray2.setFloat(j235, -floatLargeArray2.getFloat(j235));
                i2 = i5 + 1;
            } else {
                return;
            }
        }
    }

    public static void bitrv216(float[] fArr, int i) {
        int i2 = i + 2;
        float f = fArr[i2];
        int i3 = i + 3;
        float f2 = fArr[i3];
        int i4 = i + 4;
        float f3 = fArr[i4];
        int i5 = i + 5;
        float f4 = fArr[i5];
        int i6 = i + 6;
        float f5 = fArr[i6];
        int i7 = i + 7;
        float f6 = fArr[i7];
        int i8 = i + 8;
        float f7 = fArr[i8];
        int i9 = i + 9;
        float f8 = fArr[i9];
        int i10 = i + 10;
        float f9 = fArr[i10];
        int i11 = i + 11;
        float f10 = fArr[i11];
        int i12 = i + 14;
        float f11 = fArr[i12];
        int i13 = i + 15;
        float f12 = fArr[i13];
        int i14 = i + 16;
        float f13 = fArr[i14];
        int i15 = i + 17;
        float f14 = fArr[i15];
        int i16 = i + 20;
        float f15 = fArr[i16];
        int i17 = i + 21;
        float f16 = fArr[i17];
        int i18 = i + 22;
        float f17 = fArr[i18];
        int i19 = i + 23;
        float f18 = fArr[i19];
        int i20 = i + 24;
        float f19 = fArr[i20];
        int i21 = i + 25;
        float f20 = fArr[i21];
        int i22 = i + 26;
        float f21 = fArr[i22];
        int i23 = i + 27;
        float f22 = fArr[i23];
        int i24 = i + 28;
        float f23 = fArr[i24];
        int i25 = i + 29;
        float f24 = fArr[i25];
        fArr[i2] = f13;
        fArr[i3] = f14;
        fArr[i4] = f7;
        fArr[i5] = f8;
        fArr[i6] = f19;
        fArr[i7] = f20;
        fArr[i8] = f3;
        fArr[i9] = f4;
        fArr[i10] = f15;
        fArr[i11] = f16;
        fArr[i12] = f23;
        fArr[i13] = f24;
        fArr[i14] = f;
        fArr[i15] = f2;
        fArr[i16] = f9;
        fArr[i17] = f10;
        fArr[i18] = f21;
        fArr[i19] = f22;
        fArr[i20] = f5;
        fArr[i21] = f6;
        fArr[i22] = f17;
        fArr[i23] = f18;
        fArr[i24] = f11;
        fArr[i25] = f12;
    }

    public static void bitrv216(FloatLargeArray floatLargeArray, long j) {
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j2 = j + 2;
        float f = floatLargeArray2.getFloat(j2);
        long j3 = j + 3;
        float f2 = floatLargeArray2.getFloat(j3);
        long j4 = j + 4;
        float f3 = floatLargeArray2.getFloat(j4);
        long j5 = j + 5;
        float f4 = floatLargeArray2.getFloat(j5);
        long j6 = j + 6;
        float f5 = floatLargeArray2.getFloat(j6);
        float f6 = f4;
        long j7 = j6;
        long j8 = j + 7;
        float f7 = floatLargeArray2.getFloat(j8);
        float f8 = f5;
        long j9 = j + 8;
        float f9 = f2;
        float f10 = floatLargeArray2.getFloat(j9);
        long j10 = j9;
        long j11 = j + 9;
        float f11 = f;
        float f12 = floatLargeArray2.getFloat(j11);
        long j12 = j11;
        long j13 = j + 10;
        float f13 = f3;
        float f14 = floatLargeArray2.getFloat(j13);
        long j14 = j13;
        long j15 = j + 11;
        float f15 = f14;
        float f16 = floatLargeArray2.getFloat(j15);
        long j16 = j15;
        long j17 = j + 14;
        float f17 = f16;
        float f18 = floatLargeArray2.getFloat(j17);
        long j18 = j17;
        long j19 = j + 15;
        float f19 = f18;
        float f20 = floatLargeArray2.getFloat(j19);
        long j20 = j19;
        long j21 = j + 16;
        float f21 = f20;
        float f22 = floatLargeArray2.getFloat(j21);
        long j22 = j21;
        long j23 = j + 17;
        long j24 = j8;
        float f23 = floatLargeArray2.getFloat(j23);
        long j25 = j + 20;
        float f24 = floatLargeArray2.getFloat(j25);
        long j26 = j25;
        long j27 = j + 21;
        float f25 = f24;
        float f26 = floatLargeArray2.getFloat(j27);
        long j28 = j27;
        long j29 = j + 22;
        float f27 = f26;
        float f28 = floatLargeArray2.getFloat(j29);
        long j30 = j29;
        long j31 = j + 23;
        float f29 = f28;
        float f30 = floatLargeArray2.getFloat(j31);
        long j32 = j31;
        long j33 = j + 24;
        float f31 = f30;
        float f32 = floatLargeArray2.getFloat(j33);
        long j34 = j33;
        long j35 = j + 25;
        float f33 = f32;
        float f34 = floatLargeArray2.getFloat(j35);
        long j36 = j35;
        long j37 = j + 26;
        float f35 = f34;
        float f36 = floatLargeArray2.getFloat(j37);
        long j38 = j37;
        long j39 = j + 27;
        float f37 = f36;
        float f38 = floatLargeArray2.getFloat(j39);
        long j40 = j39;
        long j41 = j + 28;
        float f39 = f38;
        float f40 = floatLargeArray2.getFloat(j41);
        long j42 = j41;
        long j43 = j + 29;
        float f41 = f40;
        float f42 = floatLargeArray2.getFloat(j43);
        floatLargeArray2.setFloat(j2, f22);
        floatLargeArray2.setFloat(j3, f23);
        floatLargeArray2.setFloat(j4, f10);
        floatLargeArray2.setFloat(j5, f12);
        floatLargeArray2.setFloat(j7, f33);
        floatLargeArray2.setFloat(j24, f35);
        floatLargeArray2.setFloat(j10, f13);
        floatLargeArray2.setFloat(j12, f6);
        floatLargeArray2.setFloat(j14, f25);
        floatLargeArray2.setFloat(j16, f27);
        floatLargeArray2.setFloat(j18, f41);
        floatLargeArray2.setFloat(j20, f42);
        floatLargeArray2.setFloat(j22, f11);
        floatLargeArray2.setFloat(j23, f9);
        floatLargeArray2.setFloat(j26, f15);
        floatLargeArray2.setFloat(j28, f17);
        floatLargeArray2.setFloat(j30, f37);
        floatLargeArray2.setFloat(j32, f39);
        floatLargeArray2.setFloat(j34, f8);
        floatLargeArray2.setFloat(j36, f7);
        floatLargeArray2.setFloat(j38, f29);
        floatLargeArray2.setFloat(j40, f31);
        floatLargeArray2.setFloat(j42, f19);
        floatLargeArray2.setFloat(j43, f21);
    }

    public static void bitrv216neg(float[] fArr, int i) {
        int i2 = i + 2;
        float f = fArr[i2];
        int i3 = i + 3;
        float f2 = fArr[i3];
        int i4 = i + 4;
        float f3 = fArr[i4];
        int i5 = i + 5;
        float f4 = fArr[i5];
        int i6 = i + 6;
        float f5 = fArr[i6];
        int i7 = i + 7;
        float f6 = fArr[i7];
        int i8 = i + 8;
        float f7 = fArr[i8];
        int i9 = i + 9;
        float f8 = fArr[i9];
        int i10 = i + 10;
        float f9 = fArr[i10];
        int i11 = i + 11;
        float f10 = fArr[i11];
        int i12 = i + 12;
        float f11 = fArr[i12];
        int i13 = i + 13;
        float f12 = fArr[i13];
        int i14 = i + 14;
        float f13 = fArr[i14];
        int i15 = i + 15;
        float f14 = fArr[i15];
        int i16 = i + 16;
        float f15 = fArr[i16];
        int i17 = i + 17;
        float f16 = fArr[i17];
        int i18 = i + 18;
        float f17 = fArr[i18];
        int i19 = i + 19;
        float f18 = fArr[i19];
        int i20 = i + 20;
        float f19 = fArr[i20];
        int i21 = i + 21;
        float f20 = fArr[i21];
        int i22 = i + 22;
        float f21 = fArr[i22];
        int i23 = i + 23;
        float f22 = fArr[i23];
        int i24 = i + 24;
        float f23 = fArr[i24];
        int i25 = i + 25;
        float f24 = fArr[i25];
        int i26 = i + 26;
        float f25 = fArr[i26];
        int i27 = i + 27;
        float f26 = fArr[i27];
        int i28 = i + 28;
        float f27 = fArr[i28];
        int i29 = i + 29;
        float f28 = fArr[i29];
        int i30 = i + 30;
        float f29 = fArr[i30];
        int i31 = i + 31;
        float f30 = fArr[i31];
        fArr[i2] = f29;
        fArr[i3] = f30;
        fArr[i4] = f13;
        fArr[i5] = f14;
        fArr[i6] = f21;
        fArr[i7] = f22;
        fArr[i8] = f5;
        fArr[i9] = f6;
        fArr[i10] = f25;
        fArr[i11] = f26;
        fArr[i12] = f9;
        fArr[i13] = f10;
        fArr[i14] = f17;
        fArr[i15] = f18;
        fArr[i16] = f;
        fArr[i17] = f2;
        fArr[i18] = f27;
        fArr[i19] = f28;
        fArr[i20] = f11;
        fArr[i21] = f12;
        fArr[i22] = f19;
        fArr[i23] = f20;
        fArr[i24] = f3;
        fArr[i25] = f4;
        fArr[i26] = f23;
        fArr[i27] = f24;
        fArr[i28] = f7;
        fArr[i29] = f8;
        fArr[i30] = f15;
        fArr[i31] = f16;
    }

    public static void bitrv216neg(FloatLargeArray floatLargeArray, long j) {
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j2 = j + 2;
        float f = floatLargeArray2.getFloat(j2);
        long j3 = j + 3;
        float f2 = floatLargeArray2.getFloat(j3);
        long j4 = j + 4;
        float f3 = floatLargeArray2.getFloat(j4);
        long j5 = j + 5;
        float f4 = floatLargeArray2.getFloat(j5);
        long j6 = j + 6;
        float f5 = floatLargeArray2.getFloat(j6);
        float f6 = f4;
        long j7 = j6;
        long j8 = j + 7;
        float f7 = floatLargeArray2.getFloat(j8);
        float f8 = f5;
        long j9 = j + 8;
        float f9 = f3;
        float f10 = floatLargeArray2.getFloat(j9);
        long j10 = j9;
        long j11 = j + 9;
        float f11 = f10;
        float f12 = floatLargeArray2.getFloat(j11);
        long j12 = j11;
        long j13 = j + 10;
        float f13 = f12;
        float f14 = floatLargeArray2.getFloat(j13);
        long j14 = j13;
        long j15 = j + 11;
        float f15 = f2;
        float f16 = floatLargeArray2.getFloat(j15);
        long j16 = j15;
        long j17 = j + 12;
        float f17 = f;
        float f18 = floatLargeArray2.getFloat(j17);
        long j18 = j17;
        long j19 = j + 13;
        float f19 = f18;
        float f20 = floatLargeArray2.getFloat(j19);
        long j20 = j19;
        long j21 = j + 14;
        float f21 = f20;
        float f22 = floatLargeArray2.getFloat(j21);
        long j22 = j21;
        long j23 = j + 15;
        float f23 = f16;
        float f24 = floatLargeArray2.getFloat(j23);
        long j24 = j23;
        long j25 = j + 16;
        float f25 = f14;
        float f26 = floatLargeArray2.getFloat(j25);
        long j26 = j25;
        long j27 = j + 17;
        float f27 = f26;
        float f28 = floatLargeArray2.getFloat(j27);
        long j28 = j27;
        long j29 = j + 18;
        float f29 = f28;
        float f30 = floatLargeArray2.getFloat(j29);
        long j30 = j29;
        long j31 = j + 19;
        float f31 = f30;
        float f32 = floatLargeArray2.getFloat(j31);
        long j32 = j31;
        long j33 = j + 20;
        float f33 = f32;
        float f34 = floatLargeArray2.getFloat(j33);
        long j34 = j33;
        long j35 = j + 21;
        float f35 = f34;
        float f36 = floatLargeArray2.getFloat(j35);
        long j36 = j35;
        long j37 = j + 22;
        float f37 = f36;
        float f38 = floatLargeArray2.getFloat(j37);
        long j38 = j37;
        long j39 = j + 23;
        long j40 = j8;
        float f39 = floatLargeArray2.getFloat(j39);
        long j41 = j + 24;
        float f40 = floatLargeArray2.getFloat(j41);
        long j42 = j41;
        long j43 = j + 25;
        float f41 = f40;
        float f42 = floatLargeArray2.getFloat(j43);
        long j44 = j43;
        long j45 = j + 26;
        float f43 = f42;
        float f44 = floatLargeArray2.getFloat(j45);
        long j46 = j45;
        long j47 = j + 27;
        float f45 = f44;
        float f46 = floatLargeArray2.getFloat(j47);
        long j48 = j47;
        long j49 = j + 28;
        float f47 = f46;
        float f48 = floatLargeArray2.getFloat(j49);
        long j50 = j49;
        long j51 = j + 29;
        float f49 = f48;
        float f50 = floatLargeArray2.getFloat(j51);
        long j52 = j51;
        long j53 = j + 30;
        float f51 = f50;
        float f52 = floatLargeArray2.getFloat(j53);
        long j54 = j53;
        long j55 = j + 31;
        float f53 = f39;
        float f54 = floatLargeArray2.getFloat(j55);
        floatLargeArray2.setFloat(j2, f52);
        floatLargeArray2.setFloat(j3, f54);
        floatLargeArray2.setFloat(j4, f22);
        floatLargeArray2.setFloat(j5, f24);
        floatLargeArray2.setFloat(j7, f38);
        floatLargeArray2.setFloat(j40, f53);
        floatLargeArray2.setFloat(j10, f8);
        floatLargeArray2.setFloat(j12, f7);
        floatLargeArray2.setFloat(j14, f45);
        floatLargeArray2.setFloat(j16, f47);
        floatLargeArray2.setFloat(j18, f25);
        floatLargeArray2.setFloat(j20, f23);
        floatLargeArray2.setFloat(j22, f31);
        floatLargeArray2.setFloat(j24, f33);
        floatLargeArray2.setFloat(j26, f17);
        floatLargeArray2.setFloat(j28, f15);
        floatLargeArray2.setFloat(j30, f49);
        floatLargeArray2.setFloat(j32, f51);
        floatLargeArray2.setFloat(j34, f19);
        floatLargeArray2.setFloat(j36, f21);
        floatLargeArray2.setFloat(j38, f35);
        floatLargeArray2.setFloat(j39, f37);
        floatLargeArray2.setFloat(j42, f9);
        floatLargeArray2.setFloat(j44, f6);
        floatLargeArray2.setFloat(j46, f41);
        floatLargeArray2.setFloat(j48, f43);
        floatLargeArray2.setFloat(j50, f11);
        floatLargeArray2.setFloat(j52, f13);
        floatLargeArray2.setFloat(j54, f27);
        floatLargeArray2.setFloat(j55, f29);
    }

    public static void bitrv208(float[] fArr, int i) {
        int i2 = i + 2;
        float f = fArr[i2];
        int i3 = i + 3;
        float f2 = fArr[i3];
        int i4 = i + 6;
        float f3 = fArr[i4];
        int i5 = i + 7;
        float f4 = fArr[i5];
        int i6 = i + 8;
        float f5 = fArr[i6];
        int i7 = i + 9;
        float f6 = fArr[i7];
        int i8 = i + 12;
        float f7 = fArr[i8];
        int i9 = i + 13;
        float f8 = fArr[i9];
        fArr[i2] = f5;
        fArr[i3] = f6;
        fArr[i4] = f7;
        fArr[i5] = f8;
        fArr[i6] = f;
        fArr[i7] = f2;
        fArr[i8] = f3;
        fArr[i9] = f4;
    }

    public static void bitrv208(FloatLargeArray floatLargeArray, long j) {
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j2 = j + 2;
        float f = floatLargeArray2.getFloat(j2);
        long j3 = j + 3;
        float f2 = floatLargeArray2.getFloat(j3);
        long j4 = j + 6;
        float f3 = floatLargeArray2.getFloat(j4);
        long j5 = j + 7;
        float f4 = floatLargeArray2.getFloat(j5);
        long j6 = j + 8;
        float f5 = floatLargeArray2.getFloat(j6);
        float f6 = f4;
        long j7 = j + 9;
        float f7 = floatLargeArray2.getFloat(j7);
        long j8 = j7;
        long j9 = j + 12;
        float f8 = f3;
        float f9 = floatLargeArray2.getFloat(j9);
        long j10 = j9;
        long j11 = j + 13;
        float f10 = f2;
        float f11 = floatLargeArray2.getFloat(j11);
        floatLargeArray2.setFloat(j2, f5);
        floatLargeArray2.setFloat(j3, f7);
        floatLargeArray2.setFloat(j4, f9);
        floatLargeArray2.setFloat(j5, f11);
        floatLargeArray2.setFloat(j6, f);
        floatLargeArray2.setFloat(j8, f10);
        floatLargeArray2.setFloat(j10, f8);
        floatLargeArray2.setFloat(j11, f6);
    }

    public static void bitrv208neg(float[] fArr, int i) {
        int i2 = i + 2;
        float f = fArr[i2];
        int i3 = i + 3;
        float f2 = fArr[i3];
        int i4 = i + 4;
        float f3 = fArr[i4];
        int i5 = i + 5;
        float f4 = fArr[i5];
        int i6 = i + 6;
        float f5 = fArr[i6];
        int i7 = i + 7;
        float f6 = fArr[i7];
        int i8 = i + 8;
        float f7 = fArr[i8];
        int i9 = i + 9;
        float f8 = fArr[i9];
        int i10 = i + 10;
        float f9 = fArr[i10];
        int i11 = i + 11;
        float f10 = fArr[i11];
        int i12 = i + 12;
        float f11 = fArr[i12];
        int i13 = i + 13;
        float f12 = fArr[i13];
        int i14 = i + 14;
        float f13 = fArr[i14];
        int i15 = i + 15;
        float f14 = fArr[i15];
        fArr[i2] = f13;
        fArr[i3] = f14;
        fArr[i4] = f5;
        fArr[i5] = f6;
        fArr[i6] = f9;
        fArr[i7] = f10;
        fArr[i8] = f;
        fArr[i9] = f2;
        fArr[i10] = f11;
        fArr[i11] = f12;
        fArr[i12] = f3;
        fArr[i13] = f4;
        fArr[i14] = f7;
        fArr[i15] = f8;
    }

    public static void bitrv208neg(FloatLargeArray floatLargeArray, long j) {
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j2 = j + 2;
        float f = floatLargeArray2.getFloat(j2);
        long j3 = j + 3;
        float f2 = floatLargeArray2.getFloat(j3);
        long j4 = j + 4;
        float f3 = floatLargeArray2.getFloat(j4);
        long j5 = j + 5;
        float f4 = floatLargeArray2.getFloat(j5);
        long j6 = j + 6;
        float f5 = floatLargeArray2.getFloat(j6);
        float f6 = f4;
        long j7 = j + 7;
        float f7 = floatLargeArray2.getFloat(j7);
        long j8 = j7;
        long j9 = j + 8;
        float f8 = f3;
        float f9 = floatLargeArray2.getFloat(j9);
        long j10 = j9;
        long j11 = j + 9;
        float f10 = f9;
        float f11 = floatLargeArray2.getFloat(j11);
        long j12 = j11;
        long j13 = j + 10;
        float f12 = f11;
        float f13 = floatLargeArray2.getFloat(j13);
        long j14 = j13;
        long j15 = j + 11;
        float f14 = f2;
        float f15 = floatLargeArray2.getFloat(j15);
        long j16 = j15;
        long j17 = j + 12;
        float f16 = f;
        float f17 = floatLargeArray2.getFloat(j17);
        long j18 = j17;
        long j19 = j + 13;
        float f18 = f17;
        float f19 = floatLargeArray2.getFloat(j19);
        long j20 = j19;
        long j21 = j + 14;
        float f20 = f19;
        float f21 = floatLargeArray2.getFloat(j21);
        long j22 = j21;
        long j23 = j + 15;
        float f22 = f15;
        float f23 = floatLargeArray2.getFloat(j23);
        floatLargeArray2.setFloat(j2, f21);
        floatLargeArray2.setFloat(j3, f23);
        floatLargeArray2.setFloat(j4, f5);
        floatLargeArray2.setFloat(j5, f7);
        floatLargeArray2.setFloat(j6, f13);
        floatLargeArray2.setFloat(j8, f22);
        floatLargeArray2.setFloat(j10, f16);
        floatLargeArray2.setFloat(j12, f14);
        floatLargeArray2.setFloat(j14, f18);
        floatLargeArray2.setFloat(j16, f20);
        floatLargeArray2.setFloat(j18, f8);
        floatLargeArray2.setFloat(j20, f6);
        floatLargeArray2.setFloat(j22, f10);
        floatLargeArray2.setFloat(j23, f12);
    }

    public static void cftf1st(int i, float[] fArr, int i2, float[] fArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        float f = fArr[i2];
        float f2 = fArr[i9];
        float f3 = f + f2;
        int i11 = i2 + 1;
        float f4 = fArr[i11];
        int i12 = i9 + 1;
        float f5 = fArr[i12];
        float f6 = f4 + f5;
        float f7 = f - f2;
        float f8 = f4 - f5;
        float f9 = fArr[i8];
        float f10 = fArr[i10];
        float f11 = f9 + f10;
        int i13 = i8 + 1;
        float f12 = fArr[i13];
        int i14 = i10 + 1;
        float f13 = fArr[i14];
        float f14 = f12 + f13;
        float f15 = f9 - f10;
        float f16 = f12 - f13;
        fArr[i2] = f3 + f11;
        fArr[i11] = f6 + f14;
        fArr[i8] = f3 - f11;
        fArr[i13] = f6 - f14;
        fArr[i9] = f7 - f16;
        fArr[i12] = f8 + f15;
        fArr[i10] = f7 + f16;
        fArr[i14] = f8 - f15;
        float f17 = fArr2[i3 + 1];
        float f18 = fArr2[i3 + 2];
        float f19 = fArr2[i3 + 3];
        int i15 = 2;
        float f20 = 1.0f;
        float f21 = 0.0f;
        int i16 = 0;
        float f22 = 1.0f;
        float f23 = 0.0f;
        while (i15 < i4 - 2) {
            i16 += 4;
            int i17 = i3 + i16;
            float f24 = fArr2[i17];
            float f25 = (f20 + f24) * f18;
            float f26 = fArr2[i17 + 1];
            float f27 = (f23 + f26) * f18;
            float f28 = fArr2[i17 + 2];
            float f29 = (f22 + f28) * f19;
            float f30 = fArr2[i17 + 3];
            float f31 = (f21 + f30) * f19;
            int i18 = i15 + i5;
            int i19 = i18 + i5;
            int i20 = i19 + i5;
            int i21 = i2 + i18;
            int i22 = i2 + i19;
            int i23 = i2 + i20;
            int i24 = i2 + i15;
            float f32 = fArr[i24];
            float f33 = fArr[i22];
            float f34 = f32 + f33;
            int i25 = i24 + 1;
            float f35 = fArr[i25];
            int i26 = i22 + 1;
            float f36 = fArr[i26];
            float f37 = f35 + f36;
            float f38 = f32 - f33;
            float f39 = f35 - f36;
            int i27 = i24 + 2;
            float f40 = fArr[i27];
            int i28 = i22 + 2;
            float f41 = fArr[i28];
            float f42 = f40 + f41;
            int i29 = i24 + 3;
            float f43 = fArr[i29];
            int i30 = i22 + 3;
            float f44 = fArr[i30];
            float f45 = f43 + f44;
            float f46 = f40 - f41;
            float f47 = f43 - f44;
            float f48 = fArr[i21];
            float f49 = fArr[i23];
            float f50 = f48 + f49;
            int i31 = i21 + 1;
            float f51 = fArr[i31];
            int i32 = i23 + 1;
            float f52 = fArr[i32];
            float f53 = f51 + f52;
            float f54 = f48 - f49;
            float f55 = f51 - f52;
            int i33 = i21 + 2;
            float f56 = fArr[i33];
            int i34 = i23 + 2;
            float f57 = fArr[i34];
            float f58 = f56 + f57;
            int i35 = i21 + 3;
            float f59 = fArr[i35];
            int i36 = i23 + 3;
            float f60 = fArr[i36];
            float f61 = f59 + f60;
            float f62 = f56 - f57;
            float f63 = f59 - f60;
            fArr[i24] = f34 + f50;
            fArr[i25] = f37 + f53;
            fArr[i27] = f42 + f58;
            fArr[i29] = f45 + f61;
            fArr[i21] = f34 - f50;
            fArr[i31] = f37 - f53;
            fArr[i33] = f42 - f58;
            fArr[i35] = f45 - f61;
            float f64 = f38 - f55;
            float f65 = f39 + f54;
            fArr[i22] = (f25 * f64) - (f27 * f65);
            fArr[i26] = (f65 * f25) + (f64 * f27);
            float f66 = f46 - f63;
            float f67 = f47 + f62;
            fArr[i28] = (f24 * f66) - (f26 * f67);
            fArr[i30] = (f67 * f24) + (f66 * f26);
            float f68 = f38 + f55;
            float f69 = f39 - f54;
            fArr[i23] = (f29 * f68) + (f31 * f69);
            fArr[i32] = (f69 * f29) - (f68 * f31);
            float f70 = f46 + f63;
            float f71 = f47 - f62;
            fArr[i34] = (f28 * f70) + (f30 * f71);
            fArr[i36] = (f71 * f28) - (f70 * f30);
            int i37 = i5 - i15;
            int i38 = i37 + i5;
            int i39 = i38 + i5;
            int i40 = i39 + i5;
            int i41 = i2 + i37;
            int i42 = i2 + i38;
            int i43 = i2 + i39;
            int i44 = i2 + i40;
            float f72 = fArr[i41];
            float f73 = fArr[i43];
            float f74 = f72 + f73;
            int i45 = i41 + 1;
            float f75 = fArr[i45];
            int i46 = i43 + 1;
            float f76 = fArr[i46];
            float f77 = f75 + f76;
            float f78 = f72 - f73;
            float f79 = f75 - f76;
            int i47 = i41 - 2;
            float f80 = fArr[i47];
            int i48 = i43 - 2;
            float f81 = fArr[i48];
            float f82 = f80 + f81;
            int i49 = i41 - 1;
            float f83 = fArr[i49];
            int i50 = i43 - 1;
            float f84 = fArr[i50];
            float f85 = f83 + f84;
            float f86 = f80 - f81;
            float f87 = f83 - f84;
            float f88 = fArr[i42];
            float f89 = fArr[i44];
            float f90 = f88 + f89;
            int i51 = i42 + 1;
            float f91 = fArr[i51];
            int i52 = i44 + 1;
            float f92 = fArr[i52];
            float f93 = f91 + f92;
            float f94 = f88 - f89;
            float f95 = f91 - f92;
            int i53 = i42 - 2;
            float f96 = fArr[i53];
            int i54 = i44 - 2;
            float f97 = fArr[i54];
            float f98 = f96 + f97;
            int i55 = i42 - 1;
            float f99 = fArr[i55];
            int i56 = i44 - 1;
            float f100 = fArr[i56];
            float f101 = f99 + f100;
            float f102 = f96 - f97;
            float f103 = f99 - f100;
            fArr[i41] = f74 + f90;
            fArr[i45] = f77 + f93;
            fArr[i47] = f82 + f98;
            fArr[i49] = f85 + f101;
            fArr[i42] = f74 - f90;
            fArr[i51] = f77 - f93;
            fArr[i53] = f82 - f98;
            fArr[i55] = f85 - f101;
            float f104 = f78 - f95;
            float f105 = f79 + f94;
            fArr[i43] = (f27 * f104) - (f25 * f105);
            fArr[i46] = (f27 * f105) + (f25 * f104);
            float f106 = f86 - f103;
            float f107 = f87 + f102;
            fArr[i48] = (f26 * f106) - (f24 * f107);
            fArr[i50] = (f107 * f26) + (f106 * f24);
            float f108 = f78 + f95;
            float f109 = f79 - f94;
            fArr[i44] = (f31 * f108) + (f29 * f109);
            fArr[i52] = (f31 * f109) - (f29 * f108);
            float f110 = f86 + f103;
            float f111 = f87 - f102;
            fArr[i54] = (f30 * f110) + (f28 * f111);
            fArr[i56] = (f111 * f30) - (f110 * f28);
            i15 += 4;
            f21 = f30;
            f20 = f24;
            f23 = f26;
            f22 = f28;
        }
        float f112 = (f20 + f17) * f18;
        float f113 = f18 * (f23 + f17);
        float f114 = (f22 - f17) * f19;
        float f115 = f19 * (f21 - f17);
        int i57 = i4 + i5;
        int i58 = i57 + i5;
        int i59 = i5 + i58;
        int i60 = i2 + i4;
        int i61 = i2 + i57;
        int i62 = i2 + i58;
        int i63 = i2 + i59;
        int i64 = i60 - 2;
        float f116 = fArr[i64];
        int i65 = i62 - 2;
        float f117 = fArr[i65];
        float f118 = f116 + f117;
        int i66 = i60 - 1;
        float f119 = fArr[i66];
        int i67 = i62 - 1;
        float f120 = fArr[i67];
        float f121 = f119 + f120;
        float f122 = f116 - f117;
        float f123 = f119 - f120;
        int i68 = i61 - 2;
        float f124 = fArr[i68];
        int i69 = i63 - 2;
        float f125 = fArr[i69];
        float f126 = f124 + f125;
        int i70 = i61 - 1;
        float f127 = fArr[i70];
        int i71 = i63 - 1;
        float f128 = fArr[i71];
        float f129 = f127 + f128;
        float f130 = f124 - f125;
        float f131 = f127 - f128;
        fArr[i64] = f118 + f126;
        fArr[i66] = f121 + f129;
        fArr[i68] = f118 - f126;
        fArr[i70] = f121 - f129;
        float f132 = f122 - f131;
        float f133 = f123 + f130;
        fArr[i65] = (f112 * f132) - (f113 * f133);
        fArr[i67] = (f133 * f112) + (f132 * f113);
        float f134 = f122 + f131;
        float f135 = f123 - f130;
        fArr[i69] = (f114 * f134) + (f115 * f135);
        fArr[i71] = (f135 * f114) - (f134 * f115);
        float f136 = fArr[i60];
        float f137 = fArr[i62];
        float f138 = f136 + f137;
        int i72 = i60 + 1;
        float f139 = fArr[i72];
        int i73 = i62 + 1;
        float f140 = fArr[i73];
        float f141 = f139 + f140;
        float f142 = f136 - f137;
        float f143 = f139 - f140;
        float f144 = fArr[i61];
        float f145 = fArr[i63];
        float f146 = f144 + f145;
        int i74 = i61 + 1;
        float f147 = fArr[i74];
        int i75 = i63 + 1;
        float f148 = fArr[i75];
        float f149 = f147 + f148;
        float f150 = f144 - f145;
        float f151 = f147 - f148;
        fArr[i60] = f138 + f146;
        fArr[i72] = f141 + f149;
        fArr[i61] = f138 - f146;
        fArr[i74] = f141 - f149;
        float f152 = f142 - f151;
        float f153 = f143 + f150;
        fArr[i62] = (f152 - f153) * f17;
        fArr[i73] = (f153 + f152) * f17;
        float f154 = f142 + f151;
        float f155 = f143 - f150;
        float f156 = -f17;
        fArr[i63] = (f154 + f155) * f156;
        fArr[i75] = f156 * (f155 - f154);
        int i76 = i60 + 2;
        float f157 = fArr[i76];
        int i77 = i62 + 2;
        float f158 = fArr[i77];
        float f159 = f157 + f158;
        int i78 = i60 + 3;
        float f160 = fArr[i78];
        int i79 = i62 + 3;
        float f161 = fArr[i79];
        float f162 = f160 + f161;
        float f163 = f157 - f158;
        float f164 = f160 - f161;
        int i80 = i61 + 2;
        float f165 = fArr[i80];
        int i81 = i63 + 2;
        float f166 = fArr[i81];
        float f167 = f165 + f166;
        int i82 = i61 + 3;
        float f168 = fArr[i82];
        int i83 = i63 + 3;
        float f169 = fArr[i83];
        float f170 = f168 + f169;
        float f171 = f165 - f166;
        float f172 = f168 - f169;
        fArr[i76] = f159 + f167;
        fArr[i78] = f162 + f170;
        fArr[i80] = f159 - f167;
        fArr[i82] = f162 - f170;
        float f173 = f163 - f172;
        float f174 = f164 + f171;
        fArr[i77] = (f113 * f173) - (f112 * f174);
        fArr[i79] = (f113 * f174) + (f112 * f173);
        float f175 = f163 + f172;
        float f176 = f164 - f171;
        fArr[i81] = (f115 * f175) + (f114 * f176);
        fArr[i83] = (f115 * f176) - (f114 * f175);
    }

    public static void cftf1st(long j, FloatLargeArray floatLargeArray, long j2, FloatLargeArray floatLargeArray2, long j3) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j4 = j2;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j8 + j4;
        float f = floatLargeArray.getFloat(j2) + floatLargeArray3.getFloat(j10);
        long j12 = j4 + 1;
        long j13 = j6;
        long j14 = j10 + 1;
        float f2 = floatLargeArray3.getFloat(j12) + floatLargeArray3.getFloat(j14);
        float f3 = floatLargeArray.getFloat(j2) - floatLargeArray3.getFloat(j10);
        float f4 = floatLargeArray3.getFloat(j12) - floatLargeArray3.getFloat(j14);
        float f5 = floatLargeArray3.getFloat(j9) + floatLargeArray3.getFloat(j11);
        long j15 = j5;
        long j16 = j9 + 1;
        long j17 = j14;
        long j18 = j11 + 1;
        float f6 = floatLargeArray3.getFloat(j16) + floatLargeArray3.getFloat(j18);
        float f7 = floatLargeArray3.getFloat(j9) - floatLargeArray3.getFloat(j11);
        float f8 = floatLargeArray3.getFloat(j16) - floatLargeArray3.getFloat(j18);
        floatLargeArray3.setFloat(j4, f + f5);
        floatLargeArray3.setFloat(j12, f2 + f6);
        floatLargeArray3.setFloat(j9, f - f5);
        floatLargeArray3.setFloat(j16, f2 - f6);
        floatLargeArray3.setFloat(j10, f3 - f8);
        floatLargeArray3.setFloat(j17, f4 + f7);
        floatLargeArray3.setFloat(j11, f3 + f8);
        floatLargeArray3.setFloat(j18, f4 - f7);
        FloatLargeArray floatLargeArray5 = floatLargeArray2;
        float f9 = floatLargeArray5.getFloat(j3 + 1);
        long j19 = 2;
        float f10 = floatLargeArray5.getFloat(j3 + 2);
        float f11 = floatLargeArray5.getFloat(j3 + 3);
        float f12 = 1.0f;
        int i = 2;
        long j20 = 0;
        float f13 = 0.0f;
        float f14 = 0.0f;
        float f15 = 1.0f;
        while (true) {
            long j21 = (long) i;
            if (j21 < j15 - j19) {
                long j22 = j20 + 4;
                long j23 = j3 + j22;
                float f16 = (f12 + floatLargeArray5.getFloat(j23)) * f10;
                long j24 = j23 + 1;
                int i2 = i;
                float f17 = f9;
                long j25 = j23 + 2;
                float f18 = (f15 + floatLargeArray5.getFloat(j25)) * f11;
                float f19 = (f13 + floatLargeArray5.getFloat(j24)) * f10;
                long j26 = j23 + 3;
                float f20 = floatLargeArray5.getFloat(j23);
                float f21 = floatLargeArray5.getFloat(j24);
                float f22 = floatLargeArray5.getFloat(j25);
                float f23 = floatLargeArray5.getFloat(j26);
                long j27 = j21 + j13;
                long j28 = j27 + j13;
                long j29 = j28 + j13;
                long j30 = j2 + j27;
                long j31 = j2 + j28;
                float f24 = f10;
                long j32 = j2 + j29;
                float f25 = (f14 + floatLargeArray5.getFloat(j26)) * f11;
                long j33 = j2 + j21;
                float f26 = f11;
                FloatLargeArray floatLargeArray6 = floatLargeArray;
                float f27 = floatLargeArray6.getFloat(j33) + floatLargeArray6.getFloat(j31);
                long j34 = j21;
                long j35 = j33 + 1;
                float f28 = f21;
                float f29 = f22;
                long j36 = j31 + 1;
                float f30 = floatLargeArray6.getFloat(j35) + floatLargeArray6.getFloat(j36);
                float f31 = floatLargeArray6.getFloat(j33) - floatLargeArray6.getFloat(j31);
                float f32 = floatLargeArray6.getFloat(j35) - floatLargeArray6.getFloat(j36);
                float f33 = f20;
                float f34 = f23;
                long j37 = j33 + 2;
                long j38 = j36;
                long j39 = j31 + 2;
                float f35 = floatLargeArray6.getFloat(j37) + floatLargeArray6.getFloat(j39);
                long j40 = j35;
                long j41 = j33 + 3;
                long j42 = j33;
                long j43 = j31 + 3;
                float f36 = floatLargeArray6.getFloat(j41) + floatLargeArray6.getFloat(j43);
                float f37 = floatLargeArray6.getFloat(j37) - floatLargeArray6.getFloat(j39);
                float f38 = floatLargeArray6.getFloat(j41) - floatLargeArray6.getFloat(j43);
                float f39 = floatLargeArray6.getFloat(j30) + floatLargeArray6.getFloat(j32);
                long j44 = j43;
                long j45 = j30 + 1;
                long j46 = j39;
                long j47 = j32 + 1;
                float f40 = floatLargeArray6.getFloat(j45) + floatLargeArray6.getFloat(j47);
                float f41 = floatLargeArray6.getFloat(j30) - floatLargeArray6.getFloat(j32);
                float f42 = floatLargeArray6.getFloat(j45) - floatLargeArray6.getFloat(j47);
                long j48 = j47;
                long j49 = j30 + 2;
                long j50 = j31;
                long j51 = j32 + 2;
                float f43 = floatLargeArray6.getFloat(j49) + floatLargeArray6.getFloat(j51);
                long j52 = j45;
                long j53 = j30 + 3;
                long j54 = j30;
                long j55 = j32 + 3;
                float f44 = floatLargeArray6.getFloat(j53) + floatLargeArray6.getFloat(j55);
                float f45 = floatLargeArray6.getFloat(j49) - floatLargeArray6.getFloat(j51);
                float f46 = floatLargeArray6.getFloat(j53) - floatLargeArray6.getFloat(j55);
                floatLargeArray6.setFloat(j42, f27 + f39);
                floatLargeArray6.setFloat(j40, f30 + f40);
                floatLargeArray6.setFloat(j37, f35 + f43);
                floatLargeArray6.setFloat(j41, f36 + f44);
                floatLargeArray6.setFloat(j54, f27 - f39);
                floatLargeArray6.setFloat(j52, f30 - f40);
                floatLargeArray6.setFloat(j49, f35 - f43);
                floatLargeArray6.setFloat(j53, f36 - f44);
                float f47 = f31 - f42;
                float f48 = f32 + f41;
                floatLargeArray6.setFloat(j50, (f16 * f47) - (f19 * f48));
                floatLargeArray6.setFloat(j38, (f48 * f16) + (f19 * f47));
                float f49 = f37 - f46;
                float f50 = f38 + f45;
                floatLargeArray6.setFloat(j46, (f33 * f49) - (f28 * f50));
                floatLargeArray6.setFloat(j44, (f33 * f50) + (f28 * f49));
                float f51 = f31 + f42;
                float f52 = f32 - f41;
                floatLargeArray6.setFloat(j32, (f18 * f51) + (f25 * f52));
                floatLargeArray6.setFloat(j48, (f18 * f52) - (f25 * f51));
                float f53 = f37 + f46;
                float f54 = f38 - f45;
                floatLargeArray6.setFloat(j51, (f29 * f53) + (f34 * f54));
                floatLargeArray6.setFloat(j55, (f29 * f54) - (f34 * f53));
                long j56 = j13 - j34;
                long j57 = j56 + j13;
                long j58 = j57 + j13;
                long j59 = j58 + j13;
                long j60 = j2 + j56;
                long j61 = j2 + j57;
                long j62 = j2 + j58;
                long j63 = j2 + j59;
                float f55 = floatLargeArray6.getFloat(j60) + floatLargeArray6.getFloat(j62);
                long j64 = j60 + 1;
                long j65 = j62 + 1;
                float f56 = floatLargeArray6.getFloat(j64) + floatLargeArray6.getFloat(j65);
                float f57 = floatLargeArray6.getFloat(j60) - floatLargeArray6.getFloat(j62);
                float f58 = floatLargeArray6.getFloat(j64) - floatLargeArray6.getFloat(j65);
                long j66 = j65;
                long j67 = j60 - 2;
                float f59 = f16;
                long j68 = j62 - 2;
                float f60 = floatLargeArray6.getFloat(j67) + floatLargeArray6.getFloat(j68);
                float f61 = f55;
                float f62 = f56;
                long j69 = j60 - 1;
                long j70 = j60;
                long j71 = j62 - 1;
                float f63 = floatLargeArray6.getFloat(j69) + floatLargeArray6.getFloat(j71);
                float f64 = floatLargeArray6.getFloat(j67) - floatLargeArray6.getFloat(j68);
                float f65 = floatLargeArray6.getFloat(j69) - floatLargeArray6.getFloat(j71);
                float f66 = floatLargeArray6.getFloat(j61) + floatLargeArray6.getFloat(j63);
                long j72 = j71;
                long j73 = j61 + 1;
                long j74 = j68;
                long j75 = j63 + 1;
                float f67 = floatLargeArray6.getFloat(j73) + floatLargeArray6.getFloat(j75);
                float f68 = floatLargeArray6.getFloat(j61) - floatLargeArray6.getFloat(j63);
                float f69 = floatLargeArray6.getFloat(j73) - floatLargeArray6.getFloat(j75);
                long j76 = j75;
                long j77 = j61 - 2;
                long j78 = j62;
                long j79 = j63 - 2;
                float f70 = floatLargeArray6.getFloat(j77) + floatLargeArray6.getFloat(j79);
                long j80 = j73;
                long j81 = j61 - 1;
                long j82 = j61;
                long j83 = j63 - 1;
                float f71 = floatLargeArray6.getFloat(j81) + floatLargeArray6.getFloat(j83);
                float f72 = floatLargeArray6.getFloat(j77) - floatLargeArray6.getFloat(j79);
                float f73 = floatLargeArray6.getFloat(j81) - floatLargeArray6.getFloat(j83);
                long j84 = j83;
                floatLargeArray6.setFloat(j70, f61 + f66);
                floatLargeArray6.setFloat(j64, f62 + f67);
                floatLargeArray6.setFloat(j67, f60 + f70);
                floatLargeArray6.setFloat(j69, f63 + f71);
                floatLargeArray6.setFloat(j82, f61 - f66);
                floatLargeArray6.setFloat(j80, f62 - f67);
                floatLargeArray6.setFloat(j77, f60 - f70);
                floatLargeArray6.setFloat(j81, f63 - f71);
                float f74 = f57 - f69;
                float f75 = f58 + f68;
                floatLargeArray6.setFloat(j78, (f19 * f74) - (f59 * f75));
                floatLargeArray6.setFloat(j66, (f19 * f75) + (f59 * f74));
                float f76 = f64 - f73;
                float f77 = f65 + f72;
                floatLargeArray6.setFloat(j74, (f28 * f76) - (f33 * f77));
                floatLargeArray6.setFloat(j72, (f28 * f77) + (f33 * f76));
                float f78 = f57 + f69;
                float f79 = f58 - f68;
                floatLargeArray6.setFloat(j63, (f25 * f78) + (f18 * f79));
                floatLargeArray6.setFloat(j76, (f25 * f79) - (f18 * f78));
                float f80 = f64 + f73;
                float f81 = f65 - f72;
                floatLargeArray6.setFloat(j79, (f34 * f80) + (f29 * f81));
                floatLargeArray6.setFloat(j84, (f34 * f81) - (f29 * f80));
                i = i2 + 4;
                floatLargeArray5 = floatLargeArray2;
                f9 = f17;
                j20 = j22;
                f10 = f24;
                f11 = f26;
                f13 = f28;
                f15 = f29;
                f12 = f33;
                f14 = f34;
                j19 = 2;
            } else {
                float f82 = f9;
                float f83 = f10;
                float f84 = f11;
                FloatLargeArray floatLargeArray7 = floatLargeArray;
                float f85 = f83 * (f12 + f82);
                float f86 = f83 * (f13 + f82);
                long j85 = j15 + j13;
                long j86 = j85 + j13;
                long j87 = j2 + j15;
                long j88 = j2 + j85;
                long j89 = j2 + j86;
                float f87 = f84 * (f14 - f82);
                long j90 = j87 - 2;
                float f88 = f86;
                float f89 = f84 * (f15 - f82);
                long j91 = j89 - 2;
                float f90 = floatLargeArray7.getFloat(j90) + floatLargeArray7.getFloat(j91);
                long j92 = j87 - 1;
                long j93 = j87;
                long j94 = j89 - 1;
                float f91 = floatLargeArray7.getFloat(j92) + floatLargeArray7.getFloat(j94);
                float f92 = floatLargeArray7.getFloat(j90) - floatLargeArray7.getFloat(j91);
                float f93 = floatLargeArray7.getFloat(j92) - floatLargeArray7.getFloat(j94);
                long j95 = j89;
                long j96 = j88 - 2;
                long j97 = j94;
                long j98 = j2 + j86 + j13;
                long j99 = j91;
                long j100 = j98 - 2;
                float f94 = floatLargeArray7.getFloat(j96) + floatLargeArray7.getFloat(j100);
                long j101 = j92;
                long j102 = j88 - 1;
                long j103 = j88;
                long j104 = j98 - 1;
                float f95 = floatLargeArray7.getFloat(j102) + floatLargeArray7.getFloat(j104);
                float f96 = floatLargeArray7.getFloat(j96) - floatLargeArray7.getFloat(j100);
                float f97 = floatLargeArray7.getFloat(j102) - floatLargeArray7.getFloat(j104);
                long j105 = j98;
                floatLargeArray7.setFloat(j90, f90 + f94);
                floatLargeArray7.setFloat(j101, f91 + f95);
                floatLargeArray7.setFloat(j96, f90 - f94);
                floatLargeArray7.setFloat(j102, f91 - f95);
                float f98 = f92 - f97;
                float f99 = f93 + f96;
                floatLargeArray7.setFloat(j99, (f85 * f98) - (f88 * f99));
                floatLargeArray7.setFloat(j97, (f99 * f85) + (f98 * f88));
                float f100 = f92 + f97;
                float f101 = f93 - f96;
                floatLargeArray7.setFloat(j100, (f89 * f100) + (f87 * f101));
                floatLargeArray7.setFloat(j104, (f89 * f101) - (f87 * f100));
                long j106 = j93;
                long j107 = j95;
                float f102 = floatLargeArray7.getFloat(j106) + floatLargeArray7.getFloat(j107);
                long j108 = j106 + 1;
                long j109 = j107 + 1;
                float f103 = floatLargeArray7.getFloat(j108) + floatLargeArray7.getFloat(j109);
                float f104 = floatLargeArray7.getFloat(j106) - floatLargeArray7.getFloat(j107);
                float f105 = floatLargeArray7.getFloat(j108) - floatLargeArray7.getFloat(j109);
                long j110 = j109;
                long j111 = j103;
                float f106 = f85;
                long j112 = j105;
                float f107 = floatLargeArray7.getFloat(j111) + floatLargeArray7.getFloat(j112);
                long j113 = j108;
                long j114 = j111 + 1;
                long j115 = j106;
                long j116 = j112 + 1;
                float f108 = floatLargeArray7.getFloat(j114) + floatLargeArray7.getFloat(j116);
                float f109 = floatLargeArray7.getFloat(j111) - floatLargeArray7.getFloat(j112);
                float f110 = floatLargeArray7.getFloat(j114) - floatLargeArray7.getFloat(j116);
                float f111 = f106;
                long j117 = j116;
                floatLargeArray7.setFloat(j115, f102 + f107);
                floatLargeArray7.setFloat(j113, f103 + f108);
                floatLargeArray7.setFloat(j111, f102 - f107);
                floatLargeArray7.setFloat(j114, f103 - f108);
                float f112 = f104 - f110;
                float f113 = f105 + f109;
                long j118 = j95;
                floatLargeArray7.setFloat(j118, f82 * (f112 - f113));
                floatLargeArray7.setFloat(j110, f82 * (f113 + f112));
                float f114 = f104 + f110;
                float f115 = f105 - f109;
                float f116 = -f82;
                floatLargeArray7.setFloat(j112, (f114 + f115) * f116);
                floatLargeArray7.setFloat(j117, f116 * (f115 - f114));
                long j119 = j115 + 2;
                long j120 = j118 + 2;
                float f117 = floatLargeArray7.getFloat(j119) + floatLargeArray7.getFloat(j120);
                long j121 = j112;
                long j122 = j115 + 3;
                long j123 = j118 + 3;
                float f118 = floatLargeArray7.getFloat(j122) + floatLargeArray7.getFloat(j123);
                float f119 = floatLargeArray7.getFloat(j119) - floatLargeArray7.getFloat(j120);
                float f120 = floatLargeArray7.getFloat(j122) - floatLargeArray7.getFloat(j123);
                long j124 = j123;
                long j125 = j111 + 2;
                long j126 = j121;
                long j127 = j120;
                long j128 = j126 + 2;
                float f121 = floatLargeArray7.getFloat(j125) + floatLargeArray7.getFloat(j128);
                long j129 = j111 + 3;
                float f122 = f119;
                float f123 = f120;
                long j130 = j126 + 3;
                float f124 = floatLargeArray7.getFloat(j129) + floatLargeArray7.getFloat(j130);
                float f125 = floatLargeArray7.getFloat(j125) - floatLargeArray7.getFloat(j128);
                float f126 = floatLargeArray7.getFloat(j129) - floatLargeArray7.getFloat(j130);
                long j131 = j130;
                floatLargeArray7.setFloat(j119, f117 + f121);
                floatLargeArray7.setFloat(j122, f118 + f124);
                floatLargeArray7.setFloat(j125, f117 - f121);
                floatLargeArray7.setFloat(j129, f118 - f124);
                float f127 = f122 - f126;
                float f128 = f123 + f125;
                floatLargeArray7.setFloat(j127, (f88 * f127) - (f111 * f128));
                floatLargeArray7.setFloat(j124, (f128 * f88) + (f111 * f127));
                float f129 = f122 + f126;
                float f130 = f123 - f125;
                floatLargeArray7.setFloat(j128, (f87 * f129) + (f89 * f130));
                floatLargeArray7.setFloat(j131, (f87 * f130) - (f89 * f129));
                return;
            }
        }
    }

    public static void cftb1st(int i, float[] fArr, int i2, float[] fArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        float f = fArr[i2];
        float f2 = fArr[i9];
        float f3 = f + f2;
        int i11 = i2 + 1;
        float f4 = fArr[i11];
        int i12 = i9 + 1;
        float f5 = fArr[i12];
        float f6 = (-f4) - f5;
        float f7 = f - f2;
        float f8 = (-f4) + f5;
        float f9 = fArr[i8];
        float f10 = fArr[i10];
        float f11 = f9 + f10;
        int i13 = i8 + 1;
        float f12 = fArr[i13];
        int i14 = i10 + 1;
        float f13 = fArr[i14];
        float f14 = f12 + f13;
        float f15 = f9 - f10;
        float f16 = f12 - f13;
        fArr[i2] = f3 + f11;
        fArr[i11] = f6 - f14;
        fArr[i8] = f3 - f11;
        fArr[i13] = f6 + f14;
        fArr[i9] = f7 + f16;
        fArr[i12] = f8 + f15;
        fArr[i10] = f7 - f16;
        fArr[i14] = f8 - f15;
        int i15 = fArr2[i3 + 1];
        float f17 = fArr2[i3 + 2];
        float f18 = fArr2[i3 + 3];
        int i16 = 2;
        int i17 = 1065353216;
        int i18 = 0;
        int i19 = 0;
        int i20 = 1065353216;
        int i21 = 0;
        while (i16 < i4 - 2) {
            int i22 = i19 + 4;
            int i23 = i3 + i22;
            int i24 = fArr2[i23];
            float f19 = (i17 + i24) * f17;
            int i25 = fArr2[i23 + 1];
            float f20 = (i21 + i25) * f17;
            int i26 = fArr2[i23 + 2];
            float f21 = (i20 + i26) * f18;
            int i27 = fArr2[i23 + 3];
            float f22 = (i18 + i27) * f18;
            int i28 = i16 + i5;
            int i29 = i28 + i5;
            int i30 = i29 + i5;
            int i31 = i2 + i28;
            int i32 = i2 + i29;
            int i33 = i2 + i30;
            int i34 = i2 + i16;
            float f23 = fArr[i34];
            float f24 = fArr[i32];
            float f25 = f23 + f24;
            int i35 = i34 + 1;
            int i36 = i22;
            float f26 = fArr[i35];
            int i37 = i4;
            int i38 = i32 + 1;
            float f27 = fArr[i38];
            float f28 = (-f26) - f27;
            float f29 = f23 - f24;
            float f30 = (-f26) + f27;
            int i39 = i34 + 2;
            float f31 = fArr[i39];
            int i40 = i32 + 2;
            float f32 = fArr[i40];
            float f33 = f31 + f32;
            int i41 = i34 + 3;
            float f34 = f18;
            float f35 = fArr[i41];
            float f36 = f17;
            int i42 = i32 + 3;
            float f37 = fArr[i42];
            float f38 = (-f35) - f37;
            float f39 = f31 - f32;
            float f40 = (-f35) + f37;
            float f41 = fArr[i31];
            float f42 = fArr[i33];
            float f43 = f41 + f42;
            int i43 = i31 + 1;
            float f44 = fArr[i43];
            int i44 = i33 + 1;
            float f45 = fArr[i44];
            float f46 = f44 + f45;
            float f47 = f41 - f42;
            float f48 = f44 - f45;
            int i45 = i31 + 2;
            float f49 = fArr[i45];
            int i46 = i33 + 2;
            float f50 = fArr[i46];
            float f51 = f49 + f50;
            int i47 = i31 + 3;
            float f52 = fArr[i47];
            int i48 = i33 + 3;
            float f53 = fArr[i48];
            float f54 = f52 + f53;
            float f55 = f49 - f50;
            float f56 = f52 - f53;
            fArr[i34] = f25 + f43;
            fArr[i35] = f28 - f46;
            fArr[i39] = f33 + f51;
            fArr[i41] = f38 - f54;
            fArr[i31] = f25 - f43;
            fArr[i43] = f28 + f46;
            fArr[i45] = f33 - f51;
            fArr[i47] = f38 + f54;
            float f57 = f29 + f48;
            float f58 = f30 + f47;
            fArr[i32] = (f19 * f57) - (f20 * f58);
            fArr[i38] = (f58 * f19) + (f57 * f20);
            float f59 = f39 + f56;
            float f60 = f40 + f55;
            fArr[i40] = (i24 * f59) - (i25 * f60);
            fArr[i42] = (f60 * i24) + (f59 * i25);
            float f61 = f29 - f48;
            float f62 = f30 - f47;
            fArr[i33] = (f21 * f61) + (f22 * f62);
            fArr[i44] = (f62 * f21) - (f61 * f22);
            float f63 = f39 - f56;
            float f64 = f40 - f55;
            fArr[i46] = (i26 * f63) + (i27 * f64);
            fArr[i48] = (f64 * i26) - (f63 * i27);
            int i49 = i5 - i16;
            int i50 = i49 + i5;
            int i51 = i50 + i5;
            int i52 = i51 + i5;
            int i53 = i2 + i49;
            int i54 = i2 + i50;
            int i55 = i2 + i51;
            int i56 = i2 + i52;
            float f65 = fArr[i53];
            float f66 = fArr[i55];
            float f67 = f65 + f66;
            int i57 = i53 + 1;
            int i58 = i5;
            float f68 = fArr[i57];
            int i59 = i15;
            int i60 = i55 + 1;
            float f69 = fArr[i60];
            float f70 = (-f68) - f69;
            float f71 = f65 - f66;
            float f72 = (-f68) + f69;
            int i61 = i53 - 2;
            float f73 = fArr[i61];
            int i62 = i55 - 2;
            float f74 = fArr[i62];
            float f75 = f73 + f74;
            int i63 = i53 - 1;
            int i64 = i16;
            float f76 = fArr[i63];
            int i65 = i26;
            int i66 = i55 - 1;
            float f77 = fArr[i66];
            float f78 = (-f76) - f77;
            float f79 = f73 - f74;
            float f80 = (-f76) + f77;
            float f81 = fArr[i54];
            float f82 = fArr[i56];
            float f83 = f81 + f82;
            int i67 = i54 + 1;
            float f84 = fArr[i67];
            int i68 = i56 + 1;
            float f85 = fArr[i68];
            float f86 = f84 + f85;
            float f87 = f81 - f82;
            float f88 = f84 - f85;
            int i69 = i54 - 2;
            float f89 = fArr[i69];
            int i70 = i56 - 2;
            float f90 = fArr[i70];
            float f91 = f89 + f90;
            int i71 = i54 - 1;
            float f92 = fArr[i71];
            int i72 = i56 - 1;
            float f93 = fArr[i72];
            float f94 = f92 + f93;
            float f95 = f89 - f90;
            float f96 = f92 - f93;
            fArr[i53] = f67 + f83;
            fArr[i57] = f70 - f86;
            fArr[i61] = f75 + f91;
            fArr[i63] = f78 - f94;
            fArr[i54] = f67 - f83;
            fArr[i67] = f70 + f86;
            fArr[i69] = f75 - f91;
            fArr[i71] = f78 + f94;
            float f97 = f71 + f88;
            float f98 = f72 + f87;
            fArr[i55] = (f20 * f97) - (f19 * f98);
            fArr[i60] = (f20 * f98) + (f19 * f97);
            float f99 = f79 + f96;
            float f100 = f80 + f95;
            fArr[i62] = (i25 * f99) - (i24 * f100);
            fArr[i66] = (f100 * i25) + (f99 * i24);
            float f101 = f71 - f88;
            float f102 = f72 - f87;
            fArr[i56] = (f22 * f101) + (f21 * f102);
            fArr[i68] = (f22 * f102) - (f21 * f101);
            float f103 = f79 - f96;
            float f104 = f80 - f95;
            fArr[i70] = (i27 * f103) + (i65 * f104);
            fArr[i72] = (f104 * i27) - (i65 * f103);
            i16 = i64 + 4;
            i19 = i36;
            i18 = i27;
            i17 = i24;
            i21 = i25;
            i5 = i58;
            i15 = i59;
            i4 = i37;
            i20 = i65;
            f18 = f34;
            f17 = f36;
        }
        int i73 = i4;
        int i74 = i5;
        int i75 = i15;
        float f105 = f17;
        float f106 = f18;
        float f107 = f105 * (i17 + i75);
        float f108 = f105 * (i21 + i75);
        float f109 = f106 * (i20 - i75);
        float f110 = f106 * (i18 - i75);
        int i76 = i73 + i74;
        int i77 = i76 + i74;
        int i78 = i77 + i74;
        int i79 = i2 + i73;
        int i80 = i2 + i76;
        int i81 = i2 + i77;
        int i82 = i2 + i78;
        int i83 = i79 - 2;
        float f111 = fArr[i83];
        int i84 = i81 - 2;
        float f112 = fArr[i84];
        float f113 = f111 + f112;
        int i85 = i79 - 1;
        float f114 = fArr[i85];
        int i86 = i81 - 1;
        float f115 = fArr[i86];
        float f116 = (-f114) - f115;
        float f117 = f111 - f112;
        float f118 = (-f114) + f115;
        int i87 = i80 - 2;
        float f119 = fArr[i87];
        int i88 = i82 - 2;
        float f120 = fArr[i88];
        float f121 = f119 + f120;
        int i89 = i80 - 1;
        float f122 = fArr[i89];
        int i90 = i82 - 1;
        float f123 = fArr[i90];
        float f124 = f122 + f123;
        float f125 = f119 - f120;
        float f126 = f122 - f123;
        fArr[i83] = f113 + f121;
        fArr[i85] = f116 - f124;
        fArr[i87] = f113 - f121;
        fArr[i89] = f116 + f124;
        float f127 = f117 + f126;
        float f128 = f118 + f125;
        fArr[i84] = (f107 * f127) - (f108 * f128);
        fArr[i86] = (f128 * f107) + (f127 * f108);
        float f129 = f117 - f126;
        float f130 = f118 - f125;
        fArr[i88] = (f109 * f129) + (f110 * f130);
        fArr[i90] = (f130 * f109) - (f129 * f110);
        float f131 = fArr[i79];
        float f132 = fArr[i81];
        float f133 = f131 + f132;
        int i91 = i79 + 1;
        float f134 = fArr[i91];
        int i92 = i81 + 1;
        float f135 = fArr[i92];
        float f136 = (-f134) - f135;
        float f137 = f131 - f132;
        float f138 = (-f134) + f135;
        float f139 = fArr[i80];
        float f140 = fArr[i82];
        float f141 = f139 + f140;
        int i93 = i80 + 1;
        float f142 = fArr[i93];
        int i94 = i82 + 1;
        float f143 = fArr[i94];
        float f144 = f142 + f143;
        float f145 = f139 - f140;
        float f146 = f142 - f143;
        fArr[i79] = f133 + f141;
        fArr[i91] = f136 - f144;
        fArr[i80] = f133 - f141;
        fArr[i93] = f136 + f144;
        float f147 = f137 + f146;
        float f148 = f138 + f145;
        fArr[i81] = (f147 - f148) * i75;
        fArr[i92] = i75 * (f148 + f147);
        float f149 = f137 - f146;
        float f150 = f138 - f145;
        float f151 = -i75;
        fArr[i82] = (f149 + f150) * f151;
        fArr[i94] = f151 * (f150 - f149);
        int i95 = i79 + 2;
        float f152 = fArr[i95];
        int i96 = i81 + 2;
        float f153 = fArr[i96];
        float f154 = f152 + f153;
        int i97 = i79 + 3;
        float f155 = fArr[i97];
        int i98 = i81 + 3;
        float f156 = fArr[i98];
        float f157 = (-f155) - f156;
        float f158 = f152 - f153;
        float f159 = (-f155) + f156;
        int i99 = i80 + 2;
        float f160 = fArr[i99];
        int i100 = i82 + 2;
        float f161 = fArr[i100];
        float f162 = f160 + f161;
        int i101 = i80 + 3;
        float f163 = fArr[i101];
        int i102 = i82 + 3;
        float f164 = fArr[i102];
        float f165 = f163 + f164;
        float f166 = f160 - f161;
        float f167 = f163 - f164;
        fArr[i95] = f154 + f162;
        fArr[i97] = f157 - f165;
        fArr[i99] = f154 - f162;
        fArr[i101] = f157 + f165;
        float f168 = f158 + f167;
        float f169 = f159 + f166;
        fArr[i96] = (f108 * f168) - (f107 * f169);
        fArr[i98] = (f108 * f169) + (f107 * f168);
        float f170 = f158 - f167;
        float f171 = f159 - f166;
        fArr[i100] = (f110 * f170) + (f109 * f171);
        fArr[i102] = (f110 * f171) - (f109 * f170);
    }

    public static void cftb1st(long j, FloatLargeArray floatLargeArray, long j2, FloatLargeArray floatLargeArray2, long j3) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j4 = j2;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j8 + j4;
        float f = floatLargeArray.getFloat(j2) + floatLargeArray3.getFloat(j10);
        long j12 = j4 + 1;
        long j13 = j6;
        long j14 = j5;
        long j15 = j10 + 1;
        float f2 = (-floatLargeArray3.getFloat(j12)) - floatLargeArray3.getFloat(j15);
        float f3 = floatLargeArray.getFloat(j2) - floatLargeArray3.getFloat(j10);
        float f4 = (-floatLargeArray3.getFloat(j12)) + floatLargeArray3.getFloat(j15);
        float f5 = floatLargeArray3.getFloat(j9) + floatLargeArray3.getFloat(j11);
        long j16 = j15;
        long j17 = j9 + 1;
        long j18 = j10;
        long j19 = j11 + 1;
        float f6 = floatLargeArray3.getFloat(j17) + floatLargeArray3.getFloat(j19);
        float f7 = floatLargeArray3.getFloat(j9) - floatLargeArray3.getFloat(j11);
        float f8 = floatLargeArray3.getFloat(j17) - floatLargeArray3.getFloat(j19);
        floatLargeArray3.setFloat(j4, f + f5);
        floatLargeArray3.setFloat(j12, f2 - f6);
        floatLargeArray3.setFloat(j9, f - f5);
        floatLargeArray3.setFloat(j17, f2 + f6);
        floatLargeArray3.setFloat(j18, f3 + f8);
        floatLargeArray3.setFloat(j16, f4 + f7);
        floatLargeArray3.setFloat(j11, f3 - f8);
        floatLargeArray3.setFloat(j19, f4 - f7);
        FloatLargeArray floatLargeArray5 = floatLargeArray2;
        float f9 = floatLargeArray5.getFloat(j3 + 1);
        float f10 = floatLargeArray5.getFloat(j3 + 2);
        float f11 = floatLargeArray5.getFloat(j3 + 3);
        float f12 = 0.0f;
        float f13 = 0.0f;
        long j20 = 0;
        float f14 = 1.0f;
        float f15 = 1.0f;
        long j21 = 2;
        for (long j22 = 2; j21 < j14 - j22; j22 = 2) {
            j20 += 4;
            long j23 = j3 + j20;
            float f16 = (f14 + floatLargeArray5.getFloat(j23)) * f10;
            long j24 = j23 + 1;
            float f17 = f9;
            float f18 = f10;
            long j25 = j23 + 2;
            float f19 = (f15 + floatLargeArray5.getFloat(j25)) * f11;
            float f20 = (f12 + floatLargeArray5.getFloat(j24)) * f10;
            long j26 = j23 + 3;
            float f21 = (f13 + floatLargeArray5.getFloat(j26)) * f11;
            float f22 = floatLargeArray5.getFloat(j23);
            float f23 = floatLargeArray5.getFloat(j24);
            float f24 = floatLargeArray5.getFloat(j25);
            float f25 = floatLargeArray5.getFloat(j26);
            long j27 = j21 + j13;
            long j28 = j27 + j13;
            long j29 = j28 + j13;
            long j30 = j27 + j4;
            long j31 = j28 + j4;
            float f26 = f25;
            long j32 = j4 + j29;
            float f27 = f22;
            float f28 = f23;
            long j33 = j4 + j21;
            float f29 = floatLargeArray3.getFloat(j33) + floatLargeArray3.getFloat(j31);
            long j34 = j33 + 1;
            float f30 = f11;
            long j35 = j21;
            long j36 = j31 + 1;
            float f31 = (-floatLargeArray3.getFloat(j34)) - floatLargeArray3.getFloat(j36);
            float f32 = floatLargeArray3.getFloat(j33) - floatLargeArray3.getFloat(j31);
            float f33 = f24;
            float f34 = (-floatLargeArray3.getFloat(j34)) + floatLargeArray3.getFloat(j36);
            long j37 = j36;
            long j38 = j33 + 2;
            long j39 = j34;
            long j40 = j31 + 2;
            float f35 = floatLargeArray3.getFloat(j38) + floatLargeArray3.getFloat(j40);
            float f36 = f34;
            long j41 = j33 + 3;
            float f37 = f16;
            float f38 = f36;
            long j42 = j31 + 3;
            float f39 = (-floatLargeArray3.getFloat(j41)) - floatLargeArray3.getFloat(j42);
            float f40 = floatLargeArray3.getFloat(j38) - floatLargeArray3.getFloat(j40);
            long j43 = j40;
            float f41 = (-floatLargeArray3.getFloat(j41)) + floatLargeArray3.getFloat(j42);
            long j44 = j42;
            long j45 = j32;
            float f42 = floatLargeArray3.getFloat(j30) + floatLargeArray3.getFloat(j45);
            long j46 = j31;
            long j47 = j30 + 1;
            long j48 = j41;
            long j49 = j45 + 1;
            float f43 = floatLargeArray3.getFloat(j47) + floatLargeArray3.getFloat(j49);
            float f44 = floatLargeArray3.getFloat(j30) - floatLargeArray3.getFloat(j45);
            float f45 = floatLargeArray3.getFloat(j47) - floatLargeArray3.getFloat(j49);
            long j50 = j49;
            long j51 = j30 + 2;
            long j52 = j47;
            long j53 = j45 + 2;
            float f46 = floatLargeArray3.getFloat(j51) + floatLargeArray3.getFloat(j53);
            long j54 = j38;
            long j55 = j30 + 3;
            float f47 = f38;
            long j56 = j45 + 3;
            float f48 = floatLargeArray3.getFloat(j55) + floatLargeArray3.getFloat(j56);
            float f49 = floatLargeArray3.getFloat(j51) - floatLargeArray3.getFloat(j53);
            float f50 = floatLargeArray3.getFloat(j55) - floatLargeArray3.getFloat(j56);
            floatLargeArray3.setFloat(j33, f29 + f42);
            floatLargeArray3.setFloat(j39, f31 - f43);
            floatLargeArray3.setFloat(j54, f35 + f46);
            floatLargeArray3.setFloat(j48, f39 - f48);
            floatLargeArray3.setFloat(j30, f29 - f42);
            floatLargeArray3.setFloat(j52, f31 + f43);
            floatLargeArray3.setFloat(j51, f35 - f46);
            floatLargeArray3.setFloat(j55, f39 + f48);
            float f51 = f32 + f45;
            float f52 = f47 + f44;
            floatLargeArray3.setFloat(j46, (f37 * f51) - (f20 * f52));
            floatLargeArray3.setFloat(j37, (f37 * f52) + (f20 * f51));
            float f53 = f40 + f50;
            float f54 = f41 + f49;
            floatLargeArray3.setFloat(j43, (f27 * f53) - (f28 * f54));
            floatLargeArray3.setFloat(j44, (f54 * f27) + (f28 * f53));
            float f55 = f32 - f45;
            float f56 = f47 - f44;
            floatLargeArray3.setFloat(j45, (f19 * f55) + (f21 * f56));
            floatLargeArray3.setFloat(j50, (f19 * f56) - (f55 * f21));
            float f57 = f40 - f50;
            float f58 = f41 - f49;
            floatLargeArray3.setFloat(j53, (f33 * f57) + (f26 * f58));
            floatLargeArray3.setFloat(j56, (f33 * f58) - (f26 * f57));
            long j57 = j13 - j35;
            long j58 = j57 + j13;
            long j59 = j58 + j13;
            long j60 = j59 + j13;
            long j61 = j2 + j57;
            long j62 = j2 + j58;
            long j63 = j2 + j59;
            float f59 = floatLargeArray3.getFloat(j61) + floatLargeArray3.getFloat(j63);
            long j64 = j61 + 1;
            long j65 = j63 + 1;
            float f60 = (-floatLargeArray3.getFloat(j64)) - floatLargeArray3.getFloat(j65);
            float f61 = floatLargeArray3.getFloat(j61) - floatLargeArray3.getFloat(j63);
            float f62 = (-floatLargeArray3.getFloat(j64)) + floatLargeArray3.getFloat(j65);
            long j66 = j65;
            long j67 = j61 - 2;
            long j68 = j64;
            long j69 = j63 - 2;
            float f63 = floatLargeArray3.getFloat(j67) + floatLargeArray3.getFloat(j69);
            long j70 = j2 + j60;
            long j71 = j61 - 1;
            float f64 = f62;
            long j72 = j61;
            long j73 = j63 - 1;
            float f65 = (-floatLargeArray3.getFloat(j71)) - floatLargeArray3.getFloat(j73);
            float f66 = floatLargeArray3.getFloat(j67) - floatLargeArray3.getFloat(j69);
            long j74 = j69;
            float f67 = (-floatLargeArray3.getFloat(j71)) + floatLargeArray3.getFloat(j73);
            long j75 = j73;
            long j76 = j70;
            float f68 = floatLargeArray3.getFloat(j62) + floatLargeArray3.getFloat(j76);
            long j77 = j63;
            long j78 = j62 + 1;
            long j79 = j71;
            long j80 = j76 + 1;
            float f69 = floatLargeArray3.getFloat(j78) + floatLargeArray3.getFloat(j80);
            float f70 = floatLargeArray3.getFloat(j62) - floatLargeArray3.getFloat(j76);
            float f71 = floatLargeArray3.getFloat(j78) - floatLargeArray3.getFloat(j80);
            long j81 = j80;
            long j82 = j62 - 2;
            long j83 = j78;
            long j84 = j76 - 2;
            float f72 = floatLargeArray3.getFloat(j82) + floatLargeArray3.getFloat(j84);
            long j85 = j67;
            long j86 = j62 - 1;
            long j87 = j62;
            long j88 = j76 - 1;
            float f73 = floatLargeArray3.getFloat(j86) + floatLargeArray3.getFloat(j88);
            float f74 = floatLargeArray3.getFloat(j82) - floatLargeArray3.getFloat(j84);
            float f75 = floatLargeArray3.getFloat(j86) - floatLargeArray3.getFloat(j88);
            long j89 = j88;
            floatLargeArray3.setFloat(j72, f59 + f68);
            floatLargeArray3.setFloat(j68, f60 - f69);
            floatLargeArray3.setFloat(j85, f63 + f72);
            floatLargeArray3.setFloat(j79, f65 - f73);
            floatLargeArray3.setFloat(j87, f59 - f68);
            floatLargeArray3.setFloat(j83, f60 + f69);
            floatLargeArray3.setFloat(j82, f63 - f72);
            floatLargeArray3.setFloat(j86, f65 + f73);
            float f76 = f61 + f71;
            float f77 = f64 + f70;
            floatLargeArray3.setFloat(j77, (f20 * f76) - (f37 * f77));
            floatLargeArray3.setFloat(j66, (f77 * f20) + (f37 * f76));
            float f78 = f66 + f75;
            float f79 = f67 + f74;
            floatLargeArray3.setFloat(j74, (f28 * f78) - (f27 * f79));
            floatLargeArray3.setFloat(j75, (f79 * f28) + (f27 * f78));
            float f80 = f61 - f71;
            float f81 = f64 - f70;
            floatLargeArray3.setFloat(j76, (f21 * f80) + (f19 * f81));
            floatLargeArray3.setFloat(j81, (f21 * f81) - (f19 * f80));
            float f82 = f66 - f75;
            float f83 = f67 - f74;
            floatLargeArray3.setFloat(j84, (f26 * f82) + (f33 * f83));
            floatLargeArray3.setFloat(j89, (f26 * f83) - (f33 * f82));
            j21 = j35 + 4;
            j4 = j2;
            floatLargeArray5 = floatLargeArray2;
            f9 = f17;
            f10 = f18;
            f14 = f27;
            f12 = f28;
            f13 = f26;
            f11 = f30;
            f15 = f33;
        }
        float f84 = f9;
        float f85 = f10;
        float f86 = f11;
        float f87 = f85 * (f14 + f84);
        float f88 = f85 * (f12 + f84);
        long j90 = j14 + j13;
        long j91 = j90 + j13;
        long j92 = j2 + j14;
        long j93 = j2 + j91;
        float f89 = f86 * (f13 - f84);
        long j94 = j92 - 2;
        float f90 = f86 * (f15 - f84);
        long j95 = j93 - 2;
        float f91 = floatLargeArray3.getFloat(j94) + floatLargeArray3.getFloat(j95);
        float f92 = f87;
        long j96 = j2 + j90;
        long j97 = j92 - 1;
        long j98 = j93 - 1;
        float f93 = (-floatLargeArray3.getFloat(j97)) - floatLargeArray3.getFloat(j98);
        float f94 = floatLargeArray3.getFloat(j94) - floatLargeArray3.getFloat(j95);
        long j99 = j93;
        float f95 = (-floatLargeArray3.getFloat(j97)) + floatLargeArray3.getFloat(j98);
        long j100 = j98;
        long j101 = j96 - 2;
        long j102 = j95;
        long j103 = j2 + j91 + j13;
        long j104 = j97;
        long j105 = j103 - 2;
        float f96 = floatLargeArray3.getFloat(j101) + floatLargeArray3.getFloat(j105);
        float f97 = f93;
        float f98 = f95;
        long j106 = j96 - 1;
        float f99 = f94;
        long j107 = j103 - 1;
        float f100 = floatLargeArray3.getFloat(j106) + floatLargeArray3.getFloat(j107);
        float f101 = floatLargeArray3.getFloat(j101) - floatLargeArray3.getFloat(j105);
        float f102 = floatLargeArray3.getFloat(j106) - floatLargeArray3.getFloat(j107);
        long j108 = j103;
        floatLargeArray3.setFloat(j94, f91 + f96);
        floatLargeArray3.setFloat(j104, f97 - f100);
        floatLargeArray3.setFloat(j101, f91 - f96);
        floatLargeArray3.setFloat(j106, f97 + f100);
        float f103 = f99 + f102;
        float f104 = f98 + f101;
        floatLargeArray3.setFloat(j102, (f92 * f103) - (f88 * f104));
        floatLargeArray3.setFloat(j100, (f92 * f104) + (f103 * f88));
        float f105 = f99 - f102;
        float f106 = f98 - f101;
        floatLargeArray3.setFloat(j105, (f90 * f105) + (f89 * f106));
        floatLargeArray3.setFloat(j107, (f90 * f106) - (f105 * f89));
        long j109 = j92;
        long j110 = j99;
        float f107 = floatLargeArray3.getFloat(j109) + floatLargeArray3.getFloat(j110);
        long j111 = j109 + 1;
        long j112 = j110 + 1;
        float f108 = (-floatLargeArray3.getFloat(j111)) - floatLargeArray3.getFloat(j112);
        float f109 = floatLargeArray3.getFloat(j109) - floatLargeArray3.getFloat(j110);
        float f110 = (-floatLargeArray3.getFloat(j111)) + floatLargeArray3.getFloat(j112);
        long j113 = j112;
        long j114 = j96;
        long j115 = j108;
        float f111 = floatLargeArray3.getFloat(j114) + floatLargeArray3.getFloat(j115);
        float f112 = f109;
        float f113 = f110;
        long j116 = j114 + 1;
        long j117 = j111;
        long j118 = j115 + 1;
        float f114 = floatLargeArray3.getFloat(j116) + floatLargeArray3.getFloat(j118);
        float f115 = floatLargeArray3.getFloat(j114) - floatLargeArray3.getFloat(j115);
        float f116 = floatLargeArray3.getFloat(j116) - floatLargeArray3.getFloat(j118);
        float f117 = f88;
        floatLargeArray3.setFloat(j109, f107 + f111);
        long j119 = j109;
        floatLargeArray3.setFloat(j117, f108 - f114);
        floatLargeArray3.setFloat(j114, f107 - f111);
        floatLargeArray3.setFloat(j116, f108 + f114);
        float f118 = f112 + f116;
        float f119 = f113 + f115;
        long j120 = j99;
        floatLargeArray3.setFloat(j120, f84 * (f118 - f119));
        floatLargeArray3.setFloat(j113, f84 * (f119 + f118));
        float f120 = f112 - f116;
        float f121 = f113 - f115;
        float f122 = -f84;
        floatLargeArray3.setFloat(j115, (f120 + f121) * f122);
        floatLargeArray3.setFloat(j118, f122 * (f121 - f120));
        long j121 = j119 + 2;
        long j122 = j120 + 2;
        float f123 = floatLargeArray3.getFloat(j121) + floatLargeArray3.getFloat(j122);
        long j123 = j115;
        long j124 = j119 + 3;
        long j125 = j120 + 3;
        float f124 = (-floatLargeArray3.getFloat(j124)) - floatLargeArray3.getFloat(j125);
        float f125 = floatLargeArray3.getFloat(j121) - floatLargeArray3.getFloat(j122);
        float f126 = (-floatLargeArray3.getFloat(j124)) + floatLargeArray3.getFloat(j125);
        long j126 = j125;
        long j127 = j114 + 2;
        long j128 = j123;
        long j129 = j122;
        long j130 = j128 + 2;
        float f127 = floatLargeArray3.getFloat(j127) + floatLargeArray3.getFloat(j130);
        long j131 = j114 + 3;
        float f128 = f125;
        float f129 = f126;
        long j132 = j128 + 3;
        float f130 = floatLargeArray3.getFloat(j131) + floatLargeArray3.getFloat(j132);
        float f131 = floatLargeArray3.getFloat(j127) - floatLargeArray3.getFloat(j130);
        float f132 = floatLargeArray3.getFloat(j131) - floatLargeArray3.getFloat(j132);
        long j133 = j132;
        floatLargeArray3.setFloat(j121, f123 + f127);
        floatLargeArray3.setFloat(j124, f124 - f130);
        floatLargeArray3.setFloat(j127, f123 - f127);
        floatLargeArray3.setFloat(j131, f124 + f130);
        float f133 = f128 + f132;
        float f134 = f129 + f131;
        floatLargeArray3.setFloat(j129, (f117 * f133) - (f92 * f134));
        floatLargeArray3.setFloat(j126, (f117 * f134) + (f92 * f133));
        float f135 = f128 - f132;
        float f136 = f129 - f131;
        floatLargeArray3.setFloat(j130, (f89 * f135) + (f90 * f136));
        floatLargeArray3.setFloat(j133, (f89 * f136) - (f90 * f135));
    }

    public static void cftrec4_th(int i, float[] fArr, int i2, int i3, float[] fArr2) {
        int i4;
        int i5;
        int i6;
        int i7;
        int i8 = i;
        Class<CommonUtils> cls = CommonUtils.class;
        int i9 = i8 >> 1;
        if (((long) i8) >= getThreadsBeginN_1D_FFT_4Threads()) {
            i6 = 4;
            i5 = i8 >> 2;
            i4 = 1;
        } else {
            i6 = 2;
            i5 = i9;
            i4 = 0;
        }
        int i10 = i6;
        Future[] futureArr = new Future[i10];
        int i11 = 0;
        for (int i12 = 0; i12 < i10; i12++) {
            final int i13 = i2 + (i12 * i5);
            if (i12 != i4) {
                i7 = i11 + 1;
                final int i14 = i5;
                final int i15 = i;
                final float[] fArr3 = fArr;
                final float[] fArr4 = fArr2;
                final int i16 = i3;
                futureArr[i11] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        int i = i13 + i14;
                        int i2 = i15;
                        while (i2 > 512) {
                            int i3 = i2 >> 2;
                            CommonUtils.cftmdl1(i3, fArr3, i - i3, fArr4, i16 - (i2 >> 3));
                            i2 = i3;
                        }
                        CommonUtils.cftleaf(i2, 1, fArr3, i - i2, i16, fArr4);
                        int i4 = i13 - i2;
                        int i5 = 0;
                        int i6 = i14 - i2;
                        while (i6 > 0) {
                            int i7 = i5 + 1;
                            int i8 = i2;
                            CommonUtils.cftleaf(i8, CommonUtils.cfttree(i8, i6, i7, fArr3, i13, i16, fArr4), fArr3, i4 + i6, i16, fArr4);
                            i6 -= i2;
                            i5 = i7;
                        }
                    }
                });
            } else {
                i7 = i11 + 1;
                final int i17 = i5;
                final int i18 = i;
                final float[] fArr5 = fArr;
                final float[] fArr6 = fArr2;
                final int i19 = i3;
                futureArr[i11] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        int i = i13 + i17;
                        int i2 = i18;
                        int i3 = 1;
                        while (i2 > 512) {
                            i2 >>= 2;
                            i3 <<= 2;
                            CommonUtils.cftmdl2(i2, fArr5, i - i2, fArr6, i19 - i2);
                        }
                        CommonUtils.cftleaf(i2, 0, fArr5, i - i2, i19, fArr6);
                        int i4 = i3 >> 1;
                        int i5 = i13 - i2;
                        for (int i6 = i17 - i2; i6 > 0; i6 -= i2) {
                            i4++;
                            int i7 = i2;
                            CommonUtils.cftleaf(i7, CommonUtils.cfttree(i7, i6, i4, fArr5, i13, i19, fArr6), fArr5, i5 + i6, i19, fArr6);
                        }
                    }
                });
            }
            i11 = i7;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }

    public static void cftrec4_th(long j, FloatLargeArray floatLargeArray, long j2, long j3, FloatLargeArray floatLargeArray2) {
        long j4;
        int i;
        Future[] futureArr;
        int i2;
        Class<CommonUtils> cls = CommonUtils.class;
        int i3 = 1;
        long j5 = j >> 1;
        int i4 = 2;
        if (j >= getThreadsBeginN_1D_FFT_4Threads()) {
            i4 = 4;
            j4 = j >> 2;
        } else {
            j4 = j5;
            i3 = 0;
        }
        int i5 = i4;
        Future[] futureArr2 = new Future[i5];
        int i6 = 0;
        int i7 = 0;
        while (i6 < i5) {
            final long j6 = j2 + (((long) i6) * j4);
            if (i6 != i3) {
                i2 = i7 + 1;
                final long j7 = j4;
                final long j8 = j;
                final FloatLargeArray floatLargeArray3 = floatLargeArray;
                final FloatLargeArray floatLargeArray4 = floatLargeArray2;
                futureArr = futureArr2;
                i = i6;
                final long j9 = j3;
                futureArr[i7] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        long j = j6 + j7;
                        long j2 = j8;
                        while (j2 > 512) {
                            long j3 = j2 >> 2;
                            CommonUtils.cftmdl1(j3, floatLargeArray3, j - j3, floatLargeArray4, j9 - (j2 >> 3));
                            j2 = j3;
                        }
                        CommonUtils.cftleaf(j2, 1, floatLargeArray3, j - j2, j9, floatLargeArray4);
                        long j4 = j6 - j2;
                        long j5 = j7 - j2;
                        long j6 = 0;
                        while (j5 > 0) {
                            long j7 = j6 + 1;
                            long j8 = j2;
                            CommonUtils.cftleaf(j8, CommonUtils.cfttree(j8, j5, j7, floatLargeArray3, j6, j9, floatLargeArray4), floatLargeArray3, j4 + j5, j9, floatLargeArray4);
                            j5 -= j2;
                            j6 = j7;
                        }
                    }
                });
            } else {
                futureArr = futureArr2;
                i = i6;
                i2 = i7 + 1;
                final long j10 = j4;
                final long j11 = j;
                final FloatLargeArray floatLargeArray5 = floatLargeArray;
                final FloatLargeArray floatLargeArray6 = floatLargeArray2;
                final long j12 = j3;
                futureArr[i7] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                    public void run() {
                        long j = j6 + j10;
                        long j2 = j11;
                        long j3 = 1;
                        while (j2 > 512) {
                            j2 >>= 2;
                            j3 <<= 2;
                            CommonUtils.cftmdl2(j2, floatLargeArray5, j - j2, floatLargeArray6, j12 - j2);
                        }
                        CommonUtils.cftleaf(j2, 0, floatLargeArray5, j - j2, j12, floatLargeArray6);
                        long j4 = j3 >> 1;
                        long j5 = j6 - j2;
                        for (long j6 = j10 - j2; j6 > 0; j6 -= j2) {
                            j4++;
                            FloatLargeArray floatLargeArray = floatLargeArray5;
                            long j7 = j6;
                            long j8 = j12;
                            FloatLargeArray floatLargeArray2 = floatLargeArray6;
                            long j9 = j2;
                            CommonUtils.cftleaf(j9, CommonUtils.cfttree(j2, j6, j4, floatLargeArray, j7, j8, floatLargeArray2), floatLargeArray5, j5 + j6, j12, floatLargeArray6);
                        }
                    }
                });
            }
            i7 = i2;
            i6 = i + 1;
            futureArr2 = futureArr;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr2);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }

    public static void cftrec4(int i, float[] fArr, int i2, int i3, float[] fArr2) {
        int i4 = i2 + i;
        int i5 = i;
        while (i5 > 512) {
            int i6 = i5 >> 2;
            cftmdl1(i6, fArr, i4 - i6, fArr2, i3 - (i5 >> 3));
            i5 = i6;
        }
        cftleaf(i5, 1, fArr, i4 - i5, i3, fArr2);
        int i7 = i2 - i5;
        int i8 = i - i5;
        int i9 = 0;
        while (i8 > 0) {
            int i10 = i9 + 1;
            int i11 = i5;
            cftleaf(i11, cfttree(i11, i8, i10, fArr, i2, i3, fArr2), fArr, i7 + i8, i3, fArr2);
            i8 -= i5;
            i9 = i10;
        }
    }

    public static void cftrec4(long j, FloatLargeArray floatLargeArray, long j2, long j3, FloatLargeArray floatLargeArray2) {
        long j4 = j2 + j;
        long j5 = j;
        while (j5 > 512) {
            long j6 = j5 >> 2;
            cftmdl1(j6, floatLargeArray, j4 - j6, floatLargeArray2, j3 - (j5 >> 3));
            j5 = j6;
        }
        cftleaf(j5, 1, floatLargeArray, j4 - j5, j3, floatLargeArray2);
        long j7 = j2 - j5;
        long j8 = j - j5;
        long j9 = 0;
        while (j8 > 0) {
            long j10 = j9 + 1;
            FloatLargeArray floatLargeArray3 = floatLargeArray;
            long j11 = j3;
            FloatLargeArray floatLargeArray4 = floatLargeArray2;
            cftleaf(j5, cfttree(j5, j8, j10, floatLargeArray3, j2, j11, floatLargeArray4), floatLargeArray3, j7 + j8, j11, floatLargeArray4);
            j8 -= j5;
            j9 = j10;
        }
    }

    public static int cfttree(int i, int i2, int i3, float[] fArr, int i4, int i5, float[] fArr2) {
        int i6;
        int i7 = i4 - i;
        if ((i3 & 3) != 0) {
            i6 = i3 & 1;
            if (i6 != 0) {
                cftmdl1(i, fArr, i7 + i2, fArr2, i5 - (i >> 1));
            } else {
                cftmdl2(i, fArr, i7 + i2, fArr2, i5 - i);
            }
        } else {
            while ((i3 & 3) == 0) {
                i <<= 2;
                i3 >>= 2;
            }
            i6 = i3 & 1;
            int i8 = i4 + i2;
            if (i6 != 0) {
                while (i > 128) {
                    cftmdl1(i, fArr, i8 - i, fArr2, i5 - (i >> 1));
                    i >>= 2;
                }
            } else {
                while (i > 128) {
                    cftmdl2(i, fArr, i8 - i, fArr2, i5 - i);
                    i >>= 2;
                }
            }
        }
        return i6;
    }

    public static long cfttree(long j, long j2, long j3, FloatLargeArray floatLargeArray, long j4, long j5, FloatLargeArray floatLargeArray2) {
        long j6;
        long j7 = j4 - j;
        if ((j3 & 3) != 0) {
            j6 = j3 & 1;
            if (j6 != 0) {
                cftmdl1(j, floatLargeArray, j7 + j2, floatLargeArray2, j5 - (j >> 1));
            } else {
                cftmdl2(j, floatLargeArray, j7 + j2, floatLargeArray2, j5 - j);
            }
        } else {
            long j8 = j;
            long j9 = j3;
            while ((j9 & 3) == 0) {
                j8 <<= 2;
                j9 >>= 2;
            }
            j6 = 1 & j9;
            long j10 = j4 + j2;
            if (j6 != 0) {
                while (j8 > 128) {
                    cftmdl1(j8, floatLargeArray, j10 - j8, floatLargeArray2, j5 - (j8 >> 1));
                    j8 >>= 2;
                }
            } else {
                while (j8 > 128) {
                    cftmdl2(j8, floatLargeArray, j10 - j8, floatLargeArray2, j5 - j8);
                    j8 >>= 2;
                }
            }
        }
        return j6;
    }

    public static void cftleaf(int i, int i2, float[] fArr, int i3, int i4, float[] fArr2) {
        if (i == 512) {
            int i5 = i4 - 64;
            cftmdl1(128, fArr, i3, fArr2, i5);
            int i6 = i4 - 8;
            cftf161(fArr, i3, fArr2, i6);
            int i7 = i4 - 32;
            cftf162(fArr, i3 + 32, fArr2, i7);
            cftf161(fArr, i3 + 64, fArr2, i6);
            cftf161(fArr, i3 + 96, fArr2, i6);
            int i8 = i3 + 128;
            int i9 = i4 - 128;
            cftmdl2(128, fArr, i8, fArr2, i9);
            cftf161(fArr, i8, fArr2, i6);
            cftf162(fArr, i3 + Opcodes.IF_ICMPNE, fArr2, i7);
            cftf161(fArr, i3 + 192, fArr2, i6);
            cftf162(fArr, i3 + 224, fArr2, i7);
            int i10 = i3 + 256;
            cftmdl1(128, fArr, i10, fArr2, i5);
            cftf161(fArr, i10, fArr2, i6);
            cftf162(fArr, i3 + 288, fArr2, i7);
            cftf161(fArr, i3 + 320, fArr2, i6);
            cftf161(fArr, i3 + 352, fArr2, i6);
            if (i2 != 0) {
                cftmdl1(128, fArr, i3 + RendererCapabilities.MODE_SUPPORT_MASK, fArr2, i5);
                cftf161(fArr, i3 + 480, fArr2, i6);
            } else {
                cftmdl2(128, fArr, i3 + RendererCapabilities.MODE_SUPPORT_MASK, fArr2, i9);
                cftf162(fArr, i3 + 480, fArr2, i7);
            }
            cftf161(fArr, i3 + RendererCapabilities.MODE_SUPPORT_MASK, fArr2, i6);
            cftf162(fArr, i3 + TypedValues.CycleType.TYPE_PATH_ROTATE, fArr2, i7);
            cftf161(fArr, i3 + 448, fArr2, i6);
            return;
        }
        int i11 = i4 - 32;
        cftmdl1(64, fArr, i3, fArr2, i11);
        int i12 = i4 - 8;
        cftf081(fArr, i3, fArr2, i12);
        cftf082(fArr, i3 + 16, fArr2, i12);
        cftf081(fArr, i3 + 32, fArr2, i12);
        cftf081(fArr, i3 + 48, fArr2, i12);
        int i13 = i3 + 64;
        int i14 = i4 - 64;
        cftmdl2(64, fArr, i13, fArr2, i14);
        cftf081(fArr, i13, fArr2, i12);
        cftf082(fArr, i3 + 80, fArr2, i12);
        cftf081(fArr, i3 + 96, fArr2, i12);
        cftf082(fArr, i3 + 112, fArr2, i12);
        int i15 = i3 + 128;
        cftmdl1(64, fArr, i15, fArr2, i11);
        cftf081(fArr, i15, fArr2, i12);
        cftf082(fArr, i3 + 144, fArr2, i12);
        cftf081(fArr, i3 + Opcodes.IF_ICMPNE, fArr2, i12);
        cftf081(fArr, i3 + Opcodes.ARETURN, fArr2, i12);
        if (i2 != 0) {
            cftmdl1(64, fArr, i3 + 192, fArr2, i11);
            cftf081(fArr, i3 + PsExtractor.VIDEO_STREAM_MASK, fArr2, i12);
        } else {
            cftmdl2(64, fArr, i3 + 192, fArr2, i14);
            cftf082(fArr, i3 + PsExtractor.VIDEO_STREAM_MASK, fArr2, i12);
        }
        cftf081(fArr, i3 + 192, fArr2, i12);
        cftf082(fArr, i3 + 208, fArr2, i12);
        cftf081(fArr, i3 + 224, fArr2, i12);
    }

    public static void cftleaf(long j, long j2, FloatLargeArray floatLargeArray, long j3, long j4, FloatLargeArray floatLargeArray2) {
        if (j == 512) {
            long j5 = j4 - 64;
            cftmdl1(128, floatLargeArray, j3, floatLargeArray2, j5);
            long j6 = j4 - 8;
            FloatLargeArray floatLargeArray3 = floatLargeArray;
            FloatLargeArray floatLargeArray4 = floatLargeArray2;
            cftf161(floatLargeArray3, j3, floatLargeArray4, j6);
            long j7 = j4 - 32;
            cftf162(floatLargeArray3, j3 + 32, floatLargeArray4, j7);
            FloatLargeArray floatLargeArray5 = floatLargeArray;
            FloatLargeArray floatLargeArray6 = floatLargeArray2;
            long j8 = j6;
            cftf161(floatLargeArray5, j3 + 64, floatLargeArray6, j8);
            cftf161(floatLargeArray5, j3 + 96, floatLargeArray6, j8);
            long j9 = j3 + 128;
            long j10 = j4 - 128;
            cftmdl2(128, floatLargeArray, j9, floatLargeArray2, j10);
            cftf161(floatLargeArray5, j9, floatLargeArray6, j8);
            FloatLargeArray floatLargeArray7 = floatLargeArray;
            FloatLargeArray floatLargeArray8 = floatLargeArray2;
            long j11 = j7;
            cftf162(floatLargeArray7, j3 + 160, floatLargeArray8, j11);
            cftf161(floatLargeArray5, j3 + 192, floatLargeArray6, j8);
            cftf162(floatLargeArray7, j3 + 224, floatLargeArray8, j11);
            long j12 = j3 + 256;
            cftmdl1(128, floatLargeArray, j12, floatLargeArray2, j5);
            cftf161(floatLargeArray, j12, floatLargeArray6, j8);
            cftf162(floatLargeArray, j3 + 288, floatLargeArray2, j7);
            cftf161(floatLargeArray, j3 + 320, floatLargeArray6, j8);
            cftf161(floatLargeArray, j3 + 352, floatLargeArray6, j8);
            if (j2 != 0) {
                cftmdl1(128, floatLargeArray, j3 + 384, floatLargeArray2, j5);
                cftf161(floatLargeArray, j3 + 480, floatLargeArray2, j6);
            } else {
                cftmdl2(128, floatLargeArray, j3 + 384, floatLargeArray2, j10);
                cftf162(floatLargeArray, j3 + 480, floatLargeArray2, j7);
            }
            cftf161(floatLargeArray, j3 + 384, floatLargeArray2, j6);
            cftf162(floatLargeArray, j3 + 416, floatLargeArray2, j7);
            cftf161(floatLargeArray, j3 + 448, floatLargeArray2, j6);
            return;
        }
        long j13 = j4 - 32;
        cftmdl1(64, floatLargeArray, j3, floatLargeArray2, j13);
        long j14 = j4 - 8;
        cftf081(floatLargeArray, j3, floatLargeArray2, j14);
        FloatLargeArray floatLargeArray9 = floatLargeArray;
        FloatLargeArray floatLargeArray10 = floatLargeArray2;
        long j15 = j14;
        cftf082(floatLargeArray9, j3 + 16, floatLargeArray10, j15);
        cftf081(floatLargeArray9, j3 + 32, floatLargeArray10, j15);
        cftf081(floatLargeArray9, j3 + 48, floatLargeArray10, j15);
        long j16 = j3 + 64;
        long j17 = j4 - 64;
        cftmdl2(64, floatLargeArray, j16, floatLargeArray2, j17);
        cftf081(floatLargeArray9, j16, floatLargeArray10, j15);
        FloatLargeArray floatLargeArray11 = floatLargeArray;
        cftf082(floatLargeArray11, j3 + 80, floatLargeArray10, j15);
        cftf081(floatLargeArray11, j3 + 96, floatLargeArray10, j15);
        FloatLargeArray floatLargeArray12 = floatLargeArray;
        cftf082(floatLargeArray12, j3 + 112, floatLargeArray10, j15);
        long j18 = j3 + 128;
        cftmdl1(64, floatLargeArray, j18, floatLargeArray2, j13);
        cftf081(floatLargeArray12, j18, floatLargeArray10, j15);
        FloatLargeArray floatLargeArray13 = floatLargeArray;
        cftf082(floatLargeArray13, j3 + 144, floatLargeArray10, j15);
        cftf081(floatLargeArray13, j3 + 160, floatLargeArray10, j15);
        cftf081(floatLargeArray, j3 + 176, floatLargeArray10, j15);
        if (j2 != 0) {
            cftmdl1(64, floatLargeArray, j3 + 192, floatLargeArray2, j13);
            cftf081(floatLargeArray, j3 + 240, floatLargeArray2, j14);
        } else {
            cftmdl2(64, floatLargeArray, j3 + 192, floatLargeArray2, j17);
            cftf082(floatLargeArray, j3 + 240, floatLargeArray2, j14);
        }
        FloatLargeArray floatLargeArray14 = floatLargeArray;
        FloatLargeArray floatLargeArray15 = floatLargeArray2;
        long j19 = j14;
        cftf081(floatLargeArray14, j3 + 192, floatLargeArray15, j19);
        cftf082(floatLargeArray14, j3 + 208, floatLargeArray15, j19);
        cftf081(floatLargeArray, j3 + 224, floatLargeArray2, j14);
    }

    public static void cftmdl1(int i, float[] fArr, int i2, float[] fArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        float f = fArr[i2];
        float f2 = fArr[i9];
        float f3 = f + f2;
        int i11 = i2 + 1;
        float f4 = fArr[i11];
        int i12 = i9 + 1;
        float f5 = fArr[i12];
        float f6 = f4 + f5;
        float f7 = f - f2;
        float f8 = f4 - f5;
        float f9 = fArr[i8];
        float f10 = fArr[i10];
        float f11 = f9 + f10;
        int i13 = i8 + 1;
        float f12 = fArr[i13];
        int i14 = i10 + 1;
        float f13 = fArr[i14];
        float f14 = f12 + f13;
        float f15 = f9 - f10;
        float f16 = f12 - f13;
        fArr[i2] = f3 + f11;
        fArr[i11] = f6 + f14;
        fArr[i8] = f3 - f11;
        fArr[i13] = f6 - f14;
        fArr[i9] = f7 - f16;
        fArr[i12] = f8 + f15;
        fArr[i10] = f7 + f16;
        fArr[i14] = f8 - f15;
        float f17 = fArr2[i3 + 1];
        int i15 = 0;
        for (int i16 = 2; i16 < i4; i16 += 2) {
            i15 += 4;
            int i17 = i3 + i15;
            float f18 = fArr2[i17];
            float f19 = fArr2[i17 + 1];
            float f20 = fArr2[i17 + 2];
            float f21 = fArr2[i17 + 3];
            int i18 = i16 + i5;
            int i19 = i18 + i5;
            int i20 = i19 + i5;
            int i21 = i2 + i18;
            int i22 = i2 + i19;
            int i23 = i2 + i20;
            int i24 = i2 + i16;
            float f22 = fArr[i24];
            float f23 = fArr[i22];
            float f24 = f22 + f23;
            int i25 = i24 + 1;
            float f25 = fArr[i25];
            int i26 = i22 + 1;
            float f26 = fArr[i26];
            float f27 = f25 + f26;
            float f28 = f22 - f23;
            float f29 = f25 - f26;
            float f30 = fArr[i21];
            float f31 = fArr[i23];
            float f32 = f30 + f31;
            int i27 = i21 + 1;
            float f33 = fArr[i27];
            int i28 = i23 + 1;
            float f34 = fArr[i28];
            float f35 = f33 + f34;
            float f36 = f30 - f31;
            float f37 = f33 - f34;
            fArr[i24] = f24 + f32;
            fArr[i25] = f27 + f35;
            fArr[i21] = f24 - f32;
            fArr[i27] = f27 - f35;
            float f38 = f28 - f37;
            float f39 = f29 + f36;
            fArr[i22] = (f18 * f38) - (f19 * f39);
            fArr[i26] = (f39 * f18) + (f38 * f19);
            float f40 = f28 + f37;
            float f41 = f29 - f36;
            fArr[i23] = (f20 * f40) + (f21 * f41);
            fArr[i28] = (f41 * f20) - (f40 * f21);
            int i29 = i5 - i16;
            int i30 = i29 + i5;
            int i31 = i30 + i5;
            int i32 = i31 + i5;
            int i33 = i2 + i29;
            int i34 = i2 + i30;
            int i35 = i2 + i31;
            int i36 = i2 + i32;
            float f42 = fArr[i33];
            float f43 = fArr[i35];
            float f44 = f42 + f43;
            int i37 = i33 + 1;
            float f45 = fArr[i37];
            int i38 = i35 + 1;
            float f46 = fArr[i38];
            float f47 = f45 + f46;
            float f48 = f42 - f43;
            float f49 = f45 - f46;
            float f50 = fArr[i34];
            float f51 = fArr[i36];
            float f52 = f50 + f51;
            int i39 = i34 + 1;
            float f53 = fArr[i39];
            int i40 = i36 + 1;
            float f54 = fArr[i40];
            float f55 = f53 + f54;
            float f56 = f50 - f51;
            float f57 = f53 - f54;
            fArr[i33] = f44 + f52;
            fArr[i37] = f47 + f55;
            fArr[i34] = f44 - f52;
            fArr[i39] = f47 - f55;
            float f58 = f48 - f57;
            float f59 = f49 + f56;
            fArr[i35] = (f19 * f58) - (f18 * f59);
            fArr[i38] = (f19 * f59) + (f18 * f58);
            float f60 = f48 + f57;
            float f61 = f49 - f56;
            fArr[i36] = (f21 * f60) + (f20 * f61);
            fArr[i40] = (f21 * f61) - (f20 * f60);
        }
        int i41 = i4 + i5;
        int i42 = i41 + i5;
        int i43 = i5 + i42;
        int i44 = i2 + i4;
        int i45 = i2 + i41;
        int i46 = i2 + i42;
        int i47 = i2 + i43;
        float f62 = fArr[i44];
        float f63 = fArr[i46];
        float f64 = f62 + f63;
        int i48 = i44 + 1;
        float f65 = fArr[i48];
        int i49 = i46 + 1;
        float f66 = fArr[i49];
        float f67 = f65 + f66;
        float f68 = f62 - f63;
        float f69 = f65 - f66;
        float f70 = fArr[i45];
        float f71 = fArr[i47];
        float f72 = f70 + f71;
        int i50 = i45 + 1;
        float f73 = fArr[i50];
        int i51 = i47 + 1;
        float f74 = fArr[i51];
        float f75 = f73 + f74;
        float f76 = f70 - f71;
        float f77 = f73 - f74;
        fArr[i44] = f64 + f72;
        fArr[i48] = f67 + f75;
        fArr[i45] = f64 - f72;
        fArr[i50] = f67 - f75;
        float f78 = f68 - f77;
        float f79 = f69 + f76;
        fArr[i46] = (f78 - f79) * f17;
        fArr[i49] = (f79 + f78) * f17;
        float f80 = f68 + f77;
        float f81 = f69 - f76;
        float f82 = -f17;
        fArr[i47] = (f80 + f81) * f82;
        fArr[i51] = f82 * (f81 - f80);
    }

    public static void cftmdl1(long j, FloatLargeArray floatLargeArray, long j2, FloatLargeArray floatLargeArray2, long j3) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j4 = j2;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j8 + j4;
        float f = floatLargeArray.getFloat(j2) + floatLargeArray3.getFloat(j10);
        long j12 = j4 + 1;
        long j13 = j6;
        long j14 = j10 + 1;
        float f2 = floatLargeArray3.getFloat(j12) + floatLargeArray3.getFloat(j14);
        float f3 = floatLargeArray.getFloat(j2) - floatLargeArray3.getFloat(j10);
        float f4 = floatLargeArray3.getFloat(j12) - floatLargeArray3.getFloat(j14);
        float f5 = floatLargeArray3.getFloat(j9) + floatLargeArray3.getFloat(j11);
        long j15 = j5;
        long j16 = j9 + 1;
        long j17 = j14;
        long j18 = j11 + 1;
        float f6 = floatLargeArray3.getFloat(j16) + floatLargeArray3.getFloat(j18);
        float f7 = floatLargeArray3.getFloat(j9) - floatLargeArray3.getFloat(j11);
        float f8 = floatLargeArray3.getFloat(j16) - floatLargeArray3.getFloat(j18);
        floatLargeArray3.setFloat(j4, f + f5);
        floatLargeArray3.setFloat(j12, f2 + f6);
        floatLargeArray3.setFloat(j9, f - f5);
        floatLargeArray3.setFloat(j16, f2 - f6);
        floatLargeArray3.setFloat(j10, f3 - f8);
        floatLargeArray3.setFloat(j17, f4 + f7);
        floatLargeArray3.setFloat(j11, f3 + f8);
        floatLargeArray3.setFloat(j18, f4 - f7);
        FloatLargeArray floatLargeArray5 = floatLargeArray2;
        float f9 = floatLargeArray5.getFloat(j3 + 1);
        long j19 = 0;
        long j20 = 2;
        while (j20 < j15) {
            long j21 = j19 + 4;
            long j22 = j3 + j21;
            float f10 = floatLargeArray5.getFloat(j22);
            float f11 = floatLargeArray5.getFloat(j22 + 1);
            long j23 = j21;
            float f12 = floatLargeArray5.getFloat(j22 + 2);
            float f13 = floatLargeArray5.getFloat(j22 + 3);
            long j24 = j20 + j13;
            long j25 = j24 + j13;
            long j26 = j25 + j13;
            long j27 = j24 + j4;
            long j28 = j25 + j4;
            float f14 = f12;
            long j29 = j4 + j26;
            float f15 = f9;
            float f16 = f10;
            long j30 = j4 + j20;
            float f17 = floatLargeArray3.getFloat(j30) + floatLargeArray3.getFloat(j28);
            long j31 = j30 + 1;
            long j32 = j20;
            long j33 = j28 + 1;
            float f18 = floatLargeArray3.getFloat(j31) + floatLargeArray3.getFloat(j33);
            float f19 = floatLargeArray3.getFloat(j30) - floatLargeArray3.getFloat(j28);
            float f20 = floatLargeArray3.getFloat(j31) - floatLargeArray3.getFloat(j33);
            float f21 = floatLargeArray3.getFloat(j27) + floatLargeArray3.getFloat(j29);
            float f22 = f13;
            long j34 = j27 + 1;
            long j35 = j28;
            long j36 = j29 + 1;
            float f23 = floatLargeArray3.getFloat(j34) + floatLargeArray3.getFloat(j36);
            float f24 = floatLargeArray3.getFloat(j27) - floatLargeArray3.getFloat(j29);
            float f25 = floatLargeArray3.getFloat(j34) - floatLargeArray3.getFloat(j36);
            floatLargeArray3.setFloat(j30, f17 + f21);
            floatLargeArray3.setFloat(j31, f18 + f23);
            floatLargeArray3.setFloat(j27, f17 - f21);
            floatLargeArray3.setFloat(j34, f18 - f23);
            float f26 = f19 - f25;
            float f27 = f20 + f24;
            floatLargeArray3.setFloat(j35, (f16 * f26) - (f11 * f27));
            floatLargeArray3.setFloat(j33, (f16 * f27) + (f26 * f11));
            float f28 = f19 + f25;
            float f29 = f20 - f24;
            floatLargeArray3.setFloat(j29, (f14 * f28) + (f22 * f29));
            floatLargeArray3.setFloat(j36, (f14 * f29) - (f22 * f28));
            long j37 = j13 - j32;
            long j38 = j37 + j13;
            long j39 = j38 + j13;
            long j40 = j39 + j13;
            long j41 = j2 + j37;
            long j42 = j2 + j38;
            long j43 = j2 + j39;
            long j44 = j2 + j40;
            float f30 = floatLargeArray3.getFloat(j41) + floatLargeArray3.getFloat(j43);
            long j45 = j41 + 1;
            long j46 = j43 + 1;
            float f31 = floatLargeArray3.getFloat(j45) + floatLargeArray3.getFloat(j46);
            float f32 = floatLargeArray3.getFloat(j41) - floatLargeArray3.getFloat(j43);
            float f33 = floatLargeArray3.getFloat(j45) - floatLargeArray3.getFloat(j46);
            float f34 = floatLargeArray3.getFloat(j42) + floatLargeArray3.getFloat(j44);
            long j47 = j46;
            long j48 = j42 + 1;
            long j49 = j43;
            long j50 = j44 + 1;
            float f35 = floatLargeArray3.getFloat(j48) + floatLargeArray3.getFloat(j50);
            float f36 = floatLargeArray3.getFloat(j42) - floatLargeArray3.getFloat(j44);
            float f37 = floatLargeArray3.getFloat(j48) - floatLargeArray3.getFloat(j50);
            long j51 = j50;
            floatLargeArray3.setFloat(j41, f30 + f34);
            floatLargeArray3.setFloat(j45, f31 + f35);
            floatLargeArray3.setFloat(j42, f30 - f34);
            floatLargeArray3.setFloat(j48, f31 - f35);
            float f38 = f32 - f37;
            float f39 = f33 + f36;
            floatLargeArray3.setFloat(j49, (f11 * f38) - (f16 * f39));
            floatLargeArray3.setFloat(j47, (f11 * f39) + (f16 * f38));
            float f40 = f32 + f37;
            float f41 = f33 - f36;
            floatLargeArray3.setFloat(j44, (f22 * f40) + (f14 * f41));
            floatLargeArray3.setFloat(j51, (f22 * f41) - (f14 * f40));
            j20 = j32 + 2;
            j4 = j2;
            floatLargeArray5 = floatLargeArray2;
            f9 = f15;
            j19 = j23;
        }
        float f42 = f9;
        long j52 = j15 + j13;
        long j53 = j52 + j13;
        long j54 = j53 + j13;
        long j55 = j2 + j15;
        long j56 = j2 + j52;
        long j57 = j2 + j53;
        long j58 = j2 + j54;
        float f43 = floatLargeArray3.getFloat(j55) + floatLargeArray3.getFloat(j57);
        long j59 = j55 + 1;
        long j60 = j57 + 1;
        float f44 = floatLargeArray3.getFloat(j59) + floatLargeArray3.getFloat(j60);
        float f45 = floatLargeArray3.getFloat(j55) - floatLargeArray3.getFloat(j57);
        float f46 = floatLargeArray3.getFloat(j59) - floatLargeArray3.getFloat(j60);
        float f47 = floatLargeArray3.getFloat(j56) + floatLargeArray3.getFloat(j58);
        long j61 = j60;
        long j62 = j56 + 1;
        long j63 = j57;
        long j64 = j58 + 1;
        float f48 = floatLargeArray3.getFloat(j62) + floatLargeArray3.getFloat(j64);
        float f49 = floatLargeArray3.getFloat(j56) - floatLargeArray3.getFloat(j58);
        float f50 = floatLargeArray3.getFloat(j62) - floatLargeArray3.getFloat(j64);
        long j65 = j64;
        floatLargeArray3.setFloat(j55, f43 + f47);
        floatLargeArray3.setFloat(j59, f44 + f48);
        floatLargeArray3.setFloat(j56, f43 - f47);
        floatLargeArray3.setFloat(j62, f44 - f48);
        float f51 = f45 - f50;
        float f52 = f46 + f49;
        floatLargeArray3.setFloat(j63, (f51 - f52) * f42);
        floatLargeArray3.setFloat(j61, f42 * (f52 + f51));
        float f53 = f45 + f50;
        float f54 = f46 - f49;
        float f55 = -f42;
        floatLargeArray3.setFloat(j58, (f53 + f54) * f55);
        floatLargeArray3.setFloat(j65, f55 * (f54 - f53));
    }

    public static void cftmdl2(int i, float[] fArr, int i2, float[] fArr2, int i3) {
        int i4 = i >> 3;
        int i5 = i4 * 2;
        float f = fArr2[i3 + 1];
        int i6 = i5 + i5;
        int i7 = i6 + i5;
        int i8 = i2 + i5;
        int i9 = i2 + i6;
        int i10 = i2 + i7;
        float f2 = fArr[i2];
        int i11 = i9 + 1;
        float f3 = fArr[i11];
        float f4 = f2 - f3;
        int i12 = i2 + 1;
        float f5 = fArr[i12];
        float f6 = fArr[i9];
        float f7 = f5 + f6;
        float f8 = f2 + f3;
        float f9 = f5 - f6;
        float f10 = fArr[i8];
        int i13 = i10 + 1;
        float f11 = fArr[i13];
        float f12 = f10 - f11;
        int i14 = i8 + 1;
        float f13 = fArr[i14];
        float f14 = fArr[i10];
        float f15 = f13 + f14;
        float f16 = f10 + f11;
        float f17 = f13 - f14;
        float f18 = (f12 - f15) * f;
        float f19 = (f15 + f12) * f;
        fArr[i2] = f4 + f18;
        fArr[i12] = f7 + f19;
        fArr[i8] = f4 - f18;
        fArr[i14] = f7 - f19;
        float f20 = (f16 - f17) * f;
        float f21 = f * (f17 + f16);
        fArr[i9] = f8 - f21;
        fArr[i11] = f9 + f20;
        fArr[i10] = f8 + f21;
        fArr[i13] = f9 - f20;
        int i15 = i4 * 4;
        int i16 = 0;
        for (int i17 = 2; i17 < i4; i17 += 2) {
            i16 += 4;
            int i18 = i3 + i16;
            float f22 = fArr2[i18];
            float f23 = fArr2[i18 + 1];
            float f24 = fArr2[i18 + 2];
            float f25 = fArr2[i18 + 3];
            i15 -= 4;
            int i19 = i3 + i15;
            float f26 = fArr2[i19];
            float f27 = fArr2[i19 + 1];
            float f28 = fArr2[i19 + 2];
            float f29 = fArr2[i19 + 3];
            int i20 = i17 + i5;
            int i21 = i20 + i5;
            int i22 = i21 + i5;
            int i23 = i2 + i20;
            int i24 = i2 + i21;
            int i25 = i2 + i22;
            int i26 = i2 + i17;
            float f30 = fArr[i26];
            int i27 = i24 + 1;
            float f31 = fArr[i27];
            float f32 = f30 - f31;
            int i28 = i26 + 1;
            float f33 = fArr[i28];
            float f34 = fArr[i24];
            float f35 = f33 + f34;
            float f36 = f30 + f31;
            float f37 = f33 - f34;
            float f38 = fArr[i23];
            int i29 = i25 + 1;
            float f39 = fArr[i29];
            float f40 = f38 - f39;
            int i30 = i23 + 1;
            float f41 = fArr[i30];
            float f42 = fArr[i25];
            float f43 = f41 + f42;
            float f44 = f38 + f39;
            float f45 = f41 - f42;
            float f46 = (f22 * f32) - (f23 * f35);
            float f47 = (f35 * f22) + (f32 * f23);
            float f48 = (f27 * f40) - (f26 * f43);
            float f49 = (f43 * f27) + (f40 * f26);
            fArr[i26] = f46 + f48;
            fArr[i28] = f47 + f49;
            fArr[i23] = f46 - f48;
            fArr[i30] = f47 - f49;
            float f50 = (f24 * f36) + (f25 * f37);
            float f51 = (f37 * f24) - (f36 * f25);
            float f52 = (f29 * f44) + (f28 * f45);
            float f53 = (f45 * f29) - (f44 * f28);
            fArr[i24] = f50 + f52;
            fArr[i27] = f51 + f53;
            fArr[i25] = f50 - f52;
            fArr[i29] = f51 - f53;
            int i31 = i5 - i17;
            int i32 = i31 + i5;
            int i33 = i32 + i5;
            int i34 = i33 + i5;
            int i35 = i2 + i31;
            int i36 = i2 + i32;
            int i37 = i2 + i33;
            int i38 = i2 + i34;
            float f54 = fArr[i35];
            int i39 = i37 + 1;
            float f55 = fArr[i39];
            float f56 = f54 - f55;
            int i40 = i35 + 1;
            float f57 = fArr[i40];
            float f58 = fArr[i37];
            float f59 = f57 + f58;
            float f60 = f54 + f55;
            float f61 = f57 - f58;
            float f62 = fArr[i36];
            int i41 = i38 + 1;
            float f63 = fArr[i41];
            float f64 = f62 - f63;
            int i42 = i36 + 1;
            float f65 = fArr[i42];
            float f66 = fArr[i38];
            float f67 = f65 + f66;
            float f68 = f62 + f63;
            float f69 = f65 - f66;
            float f70 = (f26 * f56) - (f27 * f59);
            float f71 = (f26 * f59) + (f27 * f56);
            float f72 = (f23 * f64) - (f22 * f67);
            float f73 = (f23 * f67) + (f22 * f64);
            fArr[i35] = f70 + f72;
            fArr[i40] = f71 + f73;
            fArr[i36] = f70 - f72;
            fArr[i42] = f71 - f73;
            float f74 = (f28 * f60) + (f29 * f61);
            float f75 = (f28 * f61) - (f29 * f60);
            float f76 = (f25 * f68) + (f24 * f69);
            float f77 = (f25 * f69) - (f24 * f68);
            fArr[i37] = f74 + f76;
            fArr[i39] = f75 + f77;
            fArr[i38] = f74 - f76;
            fArr[i41] = f75 - f77;
        }
        int i43 = i3 + i5;
        float f78 = fArr2[i43];
        float f79 = fArr2[i43 + 1];
        int i44 = i4 + i5;
        int i45 = i44 + i5;
        int i46 = i5 + i45;
        int i47 = i2 + i4;
        int i48 = i2 + i44;
        int i49 = i2 + i45;
        int i50 = i2 + i46;
        float f80 = fArr[i47];
        int i51 = i49 + 1;
        float f81 = fArr[i51];
        float f82 = f80 - f81;
        int i52 = i47 + 1;
        float f83 = fArr[i52];
        float f84 = fArr[i49];
        float f85 = f83 + f84;
        float f86 = f80 + f81;
        float f87 = f83 - f84;
        float f88 = fArr[i48];
        int i53 = i50 + 1;
        float f89 = fArr[i53];
        float f90 = f88 - f89;
        int i54 = i48 + 1;
        float f91 = fArr[i54];
        float f92 = fArr[i50];
        float f93 = f91 + f92;
        float f94 = f88 + f89;
        float f95 = f91 - f92;
        float f96 = (f78 * f82) - (f79 * f85);
        float f97 = (f85 * f78) + (f82 * f79);
        float f98 = (f79 * f90) - (f78 * f93);
        float f99 = (f93 * f79) + (f90 * f78);
        fArr[i47] = f96 + f98;
        fArr[i52] = f97 + f99;
        fArr[i48] = f96 - f98;
        fArr[i54] = f97 - f99;
        float f100 = (f79 * f86) - (f78 * f87);
        float f101 = (f87 * f79) + (f86 * f78);
        float f102 = (f78 * f94) - (f79 * f95);
        float f103 = (f78 * f95) + (f79 * f94);
        fArr[i49] = f100 - f102;
        fArr[i51] = f101 - f103;
        fArr[i50] = f100 + f102;
        fArr[i53] = f101 + f103;
    }

    public static void cftmdl2(long j, FloatLargeArray floatLargeArray, long j2, FloatLargeArray floatLargeArray2, long j3) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j4 = j2;
        long j5 = j >> 3;
        long j6 = j5 * 2;
        float f = floatLargeArray2.getFloat(j3 + 1);
        long j7 = j6 + j6;
        long j8 = j7 + j6;
        long j9 = j4 + j6;
        long j10 = j7 + j4;
        long j11 = j6;
        long j12 = j4 + j8;
        long j13 = j5;
        long j14 = j10 + 1;
        float f2 = floatLargeArray.getFloat(j2) - floatLargeArray3.getFloat(j14);
        long j15 = j12;
        long j16 = j4 + 1;
        float f3 = floatLargeArray3.getFloat(j16) + floatLargeArray3.getFloat(j10);
        float f4 = floatLargeArray.getFloat(j2) + floatLargeArray3.getFloat(j14);
        float f5 = floatLargeArray3.getFloat(j16) - floatLargeArray3.getFloat(j10);
        long j17 = j14;
        long j18 = j15 + 1;
        float f6 = floatLargeArray3.getFloat(j9) - floatLargeArray3.getFloat(j18);
        long j19 = j10;
        long j20 = j9 + 1;
        long j21 = j15;
        float f7 = floatLargeArray3.getFloat(j20) + floatLargeArray3.getFloat(j21);
        float f8 = floatLargeArray3.getFloat(j9) + floatLargeArray3.getFloat(j18);
        float f9 = floatLargeArray3.getFloat(j20) - floatLargeArray3.getFloat(j21);
        float f10 = (f6 - f7) * f;
        float f11 = (f7 + f6) * f;
        long j22 = j18;
        floatLargeArray3.setFloat(j4, f2 + f10);
        floatLargeArray3.setFloat(j16, f3 + f11);
        floatLargeArray3.setFloat(j9, f2 - f10);
        floatLargeArray3.setFloat(j20, f3 - f11);
        float f12 = (f8 - f9) * f;
        float f13 = f * (f9 + f8);
        floatLargeArray3.setFloat(j19, f4 - f13);
        floatLargeArray3.setFloat(j17, f5 + f12);
        floatLargeArray3.setFloat(j21, f4 + f13);
        floatLargeArray3.setFloat(j22, f5 - f12);
        long j23 = 4;
        long j24 = j13 * 4;
        long j25 = 0;
        int i = 2;
        while (true) {
            long j26 = (long) i;
            if (j26 < j13) {
                long j27 = j25 + j23;
                long j28 = j3 + j27;
                FloatLargeArray floatLargeArray4 = floatLargeArray2;
                float f14 = floatLargeArray4.getFloat(j28);
                float f15 = floatLargeArray4.getFloat(j28 + 1);
                long j29 = j27;
                float f16 = floatLargeArray4.getFloat(j28 + 2);
                float f17 = floatLargeArray4.getFloat(j28 + 3);
                long j30 = j24 - 4;
                long j31 = j3 + j30;
                float f18 = floatLargeArray4.getFloat(j31);
                long j32 = j30;
                float f19 = floatLargeArray4.getFloat(j31 + 1);
                float f20 = f17;
                float f21 = f18;
                float f22 = floatLargeArray4.getFloat(j31 + 2);
                long j33 = j26 + j11;
                long j34 = j33 + j11;
                long j35 = j34 + j11;
                long j36 = j4 + j33;
                int i2 = i;
                long j37 = j4 + j34;
                float f23 = f20;
                float f24 = floatLargeArray4.getFloat(j31 + 3);
                long j38 = j4 + j35;
                float f25 = f16;
                float f26 = f19;
                long j39 = j4 + j26;
                long j40 = j37 + 1;
                float f27 = floatLargeArray3.getFloat(j39) - floatLargeArray3.getFloat(j40);
                long j41 = j26;
                long j42 = j39 + 1;
                float f28 = floatLargeArray3.getFloat(j42) + floatLargeArray3.getFloat(j37);
                float f29 = floatLargeArray3.getFloat(j39) + floatLargeArray3.getFloat(j40);
                float f30 = floatLargeArray3.getFloat(j42) - floatLargeArray3.getFloat(j37);
                long j43 = j40;
                long j44 = j38 + 1;
                float f31 = floatLargeArray3.getFloat(j36) - floatLargeArray3.getFloat(j44);
                long j45 = j37;
                long j46 = j36 + 1;
                float f32 = floatLargeArray3.getFloat(j46) + floatLargeArray3.getFloat(j38);
                float f33 = floatLargeArray3.getFloat(j36) + floatLargeArray3.getFloat(j44);
                float f34 = floatLargeArray3.getFloat(j46) - floatLargeArray3.getFloat(j38);
                float f35 = (f14 * f27) - (f15 * f28);
                float f36 = (f28 * f14) + (f27 * f15);
                float f37 = (f26 * f31) - (f21 * f32);
                float f38 = (f32 * f26) + (f31 * f21);
                float f39 = f14;
                floatLargeArray3.setFloat(j39, f35 + f37);
                floatLargeArray3.setFloat(j42, f36 + f38);
                floatLargeArray3.setFloat(j36, f35 - f37);
                floatLargeArray3.setFloat(j46, f36 - f38);
                float f40 = (f25 * f29) + (f23 * f30);
                float f41 = (f25 * f30) - (f23 * f29);
                float f42 = (f24 * f33) + (f22 * f34);
                float f43 = (f24 * f34) - (f33 * f22);
                floatLargeArray3.setFloat(j45, f40 + f42);
                floatLargeArray3.setFloat(j43, f41 + f43);
                floatLargeArray3.setFloat(j38, f40 - f42);
                floatLargeArray3.setFloat(j44, f41 - f43);
                long j47 = j11 - j41;
                long j48 = j47 + j11;
                long j49 = j48 + j11;
                long j50 = j49 + j11;
                long j51 = j2 + j47;
                long j52 = j2 + j48;
                long j53 = j2 + j49;
                long j54 = j53 + 1;
                float f44 = floatLargeArray3.getFloat(j51) - floatLargeArray3.getFloat(j54);
                long j55 = j2 + j50;
                long j56 = j51 + 1;
                float f45 = floatLargeArray3.getFloat(j56) + floatLargeArray3.getFloat(j53);
                float f46 = floatLargeArray3.getFloat(j51) + floatLargeArray3.getFloat(j54);
                float f47 = floatLargeArray3.getFloat(j56) - floatLargeArray3.getFloat(j53);
                long j57 = j54;
                long j58 = j55 + 1;
                float f48 = floatLargeArray3.getFloat(j52) - floatLargeArray3.getFloat(j58);
                long j59 = j53;
                long j60 = j52 + 1;
                float f49 = f22;
                long j61 = j55;
                float f50 = floatLargeArray3.getFloat(j60) + floatLargeArray3.getFloat(j61);
                float f51 = floatLargeArray3.getFloat(j52) + floatLargeArray3.getFloat(j58);
                float f52 = floatLargeArray3.getFloat(j60) - floatLargeArray3.getFloat(j61);
                float f53 = (f21 * f44) - (f26 * f45);
                float f54 = (f21 * f45) + (f44 * f26);
                float f55 = (f15 * f48) - (f39 * f50);
                float f56 = (f15 * f50) + (f39 * f48);
                floatLargeArray3.setFloat(j51, f53 + f55);
                floatLargeArray3.setFloat(j56, f54 + f56);
                floatLargeArray3.setFloat(j52, f53 - f55);
                floatLargeArray3.setFloat(j60, f54 - f56);
                float f57 = (f49 * f46) + (f24 * f47);
                float f58 = (f49 * f47) - (f24 * f46);
                float f59 = (f23 * f51) + (f25 * f52);
                float f60 = (f23 * f52) - (f25 * f51);
                floatLargeArray3.setFloat(j59, f57 + f59);
                floatLargeArray3.setFloat(j57, f58 + f60);
                floatLargeArray3.setFloat(j61, f57 - f59);
                floatLargeArray3.setFloat(j58, f58 - f60);
                i = i2 + 2;
                j25 = j29;
                j4 = j2;
                j23 = 4;
                j24 = j32;
            } else {
                long j62 = j3 + j11;
                FloatLargeArray floatLargeArray5 = floatLargeArray2;
                float f61 = floatLargeArray5.getFloat(j62);
                float f62 = floatLargeArray5.getFloat(j62 + 1);
                long j63 = j13 + j11;
                long j64 = j63 + j11;
                long j65 = j2 + j13;
                long j66 = j2 + j63;
                long j67 = j2 + j64;
                long j68 = j67 + 1;
                float f63 = floatLargeArray3.getFloat(j65) - floatLargeArray3.getFloat(j68);
                long j69 = j2 + j64 + j11;
                long j70 = j65 + 1;
                float f64 = floatLargeArray3.getFloat(j70) + floatLargeArray3.getFloat(j67);
                float f65 = floatLargeArray3.getFloat(j65) + floatLargeArray3.getFloat(j68);
                float f66 = floatLargeArray3.getFloat(j70) - floatLargeArray3.getFloat(j67);
                long j71 = j68;
                long j72 = j69;
                long j73 = j67;
                long j74 = j72 + 1;
                float f67 = floatLargeArray3.getFloat(j66) - floatLargeArray3.getFloat(j74);
                long j75 = 1 + j66;
                float f68 = floatLargeArray3.getFloat(j75) + floatLargeArray3.getFloat(j72);
                float f69 = floatLargeArray3.getFloat(j66) + floatLargeArray3.getFloat(j74);
                float f70 = floatLargeArray3.getFloat(j75) - floatLargeArray3.getFloat(j72);
                float f71 = (f61 * f63) - (f62 * f64);
                float f72 = (f64 * f61) + (f63 * f62);
                float f73 = (f62 * f67) - (f61 * f68);
                float f74 = (f68 * f62) + (f67 * f61);
                floatLargeArray3.setFloat(j65, f71 + f73);
                floatLargeArray3.setFloat(j70, f72 + f74);
                floatLargeArray3.setFloat(j66, f71 - f73);
                floatLargeArray3.setFloat(j75, f72 - f74);
                float f75 = (f62 * f65) - (f61 * f66);
                float f76 = (f66 * f62) + (f65 * f61);
                float f77 = (f61 * f69) - (f62 * f70);
                float f78 = (f61 * f70) + (f62 * f69);
                floatLargeArray3.setFloat(j73, f75 - f77);
                floatLargeArray3.setFloat(j71, f76 - f78);
                floatLargeArray3.setFloat(j72, f75 + f77);
                floatLargeArray3.setFloat(j74, f76 + f78);
                return;
            }
        }
    }

    public static void cftfx41(int i, float[] fArr, int i2, int i3, float[] fArr2) {
        if (i == 128) {
            int i4 = i3 - 8;
            cftf161(fArr, i2, fArr2, i4);
            cftf162(fArr, i2 + 32, fArr2, i3 - 32);
            cftf161(fArr, i2 + 64, fArr2, i4);
            cftf161(fArr, i2 + 96, fArr2, i4);
            return;
        }
        int i5 = i3 - 8;
        cftf081(fArr, i2, fArr2, i5);
        cftf082(fArr, i2 + 16, fArr2, i5);
        cftf081(fArr, i2 + 32, fArr2, i5);
        cftf081(fArr, i2 + 48, fArr2, i5);
    }

    public static void cftfx41(long j, FloatLargeArray floatLargeArray, long j2, long j3, FloatLargeArray floatLargeArray2) {
        if (j == 128) {
            long j4 = j3 - 8;
            FloatLargeArray floatLargeArray3 = floatLargeArray;
            FloatLargeArray floatLargeArray4 = floatLargeArray2;
            cftf161(floatLargeArray3, j2, floatLargeArray4, j4);
            cftf162(floatLargeArray3, j2 + 32, floatLargeArray4, j3 - 32);
            cftf161(floatLargeArray, j2 + 64, floatLargeArray2, j4);
            cftf161(floatLargeArray, j2 + 96, floatLargeArray2, j4);
            return;
        }
        long j5 = j3 - 8;
        cftf081(floatLargeArray, j2, floatLargeArray2, j5);
        cftf082(floatLargeArray, j2 + 16, floatLargeArray2, j5);
        cftf081(floatLargeArray, j2 + 32, floatLargeArray2, j5);
        cftf081(floatLargeArray, j2 + 48, floatLargeArray2, j5);
    }

    public static void cftf161(float[] fArr, int i, float[] fArr2, int i2) {
        float f = fArr2[i2 + 1];
        float f2 = fArr2[i2 + 2];
        float f3 = fArr2[i2 + 3];
        float f4 = fArr[i];
        int i3 = i + 16;
        float f5 = fArr[i3];
        float f6 = f4 + f5;
        int i4 = i + 1;
        float f7 = fArr[i4];
        int i5 = i + 17;
        float f8 = fArr[i5];
        float f9 = f7 + f8;
        float f10 = f4 - f5;
        float f11 = f7 - f8;
        int i6 = i + 8;
        float f12 = fArr[i6];
        int i7 = i + 24;
        float f13 = fArr[i7];
        float f14 = f12 + f13;
        int i8 = i + 9;
        float f15 = fArr[i8];
        int i9 = i + 25;
        float f16 = fArr[i9];
        float f17 = f15 + f16;
        float f18 = f12 - f13;
        float f19 = f15 - f16;
        float f20 = f6 + f14;
        float f21 = f9 + f17;
        float f22 = f6 - f14;
        float f23 = f9 - f17;
        float f24 = f10 - f19;
        float f25 = f11 + f18;
        float f26 = f10 + f19;
        float f27 = f11 - f18;
        int i10 = i + 2;
        float f28 = fArr[i10];
        int i11 = i + 18;
        float f29 = fArr[i11];
        float f30 = f28 + f29;
        int i12 = i + 3;
        float f31 = fArr[i12];
        int i13 = i + 19;
        float f32 = fArr[i13];
        float f33 = f31 + f32;
        float f34 = f28 - f29;
        float f35 = f31 - f32;
        int i14 = i + 10;
        float f36 = fArr[i14];
        int i15 = i + 26;
        float f37 = fArr[i15];
        float f38 = f36 + f37;
        int i16 = i + 11;
        float f39 = fArr[i16];
        int i17 = i + 27;
        float f40 = fArr[i17];
        float f41 = f39 + f40;
        float f42 = f36 - f37;
        float f43 = f39 - f40;
        float f44 = f30 + f38;
        float f45 = f33 + f41;
        float f46 = f30 - f38;
        float f47 = f33 - f41;
        float f48 = f34 - f43;
        float f49 = f35 + f42;
        float f50 = (f2 * f48) - (f3 * f49);
        float f51 = (f49 * f2) + (f48 * f3);
        float f52 = f34 + f43;
        float f53 = f35 - f42;
        float f54 = (f3 * f52) - (f2 * f53);
        float f55 = (f53 * f3) + (f52 * f2);
        int i18 = i + 4;
        float f56 = fArr[i18];
        int i19 = i + 20;
        float f57 = fArr[i19];
        float f58 = f56 + f57;
        int i20 = i + 5;
        float f59 = fArr[i20];
        int i21 = i + 21;
        float f60 = fArr[i21];
        float f61 = f59 + f60;
        float f62 = f56 - f57;
        float f63 = f59 - f60;
        int i22 = i + 12;
        float f64 = fArr[i22];
        int i23 = i + 28;
        float f65 = fArr[i23];
        float f66 = f64 + f65;
        int i24 = i + 13;
        float f67 = fArr[i24];
        int i25 = i + 29;
        float f68 = fArr[i25];
        float f69 = f67 + f68;
        float f70 = f64 - f65;
        float f71 = f67 - f68;
        float f72 = f58 + f66;
        float f73 = f61 + f69;
        float f74 = f58 - f66;
        float f75 = f61 - f69;
        float f76 = f62 - f71;
        float f77 = f63 + f70;
        float f78 = (f76 - f77) * f;
        float f79 = (f77 + f76) * f;
        float f80 = f62 + f71;
        float f81 = f63 - f70;
        float f82 = (f80 + f81) * f;
        float f83 = (f81 - f80) * f;
        int i26 = i + 6;
        float f84 = fArr[i26];
        int i27 = i + 22;
        float f85 = fArr[i27];
        float f86 = f84 + f85;
        int i28 = i + 7;
        float f87 = fArr[i28];
        int i29 = i + 23;
        float f88 = fArr[i29];
        float f89 = f87 + f88;
        float f90 = f84 - f85;
        float f91 = f87 - f88;
        int i30 = i + 14;
        float f92 = fArr[i30];
        int i31 = i + 30;
        float f93 = fArr[i31];
        float f94 = f92 + f93;
        int i32 = i + 15;
        float f95 = fArr[i32];
        int i33 = i + 31;
        float f96 = fArr[i33];
        float f97 = f95 + f96;
        float f98 = f92 - f93;
        float f99 = f95 - f96;
        float f100 = f86 + f94;
        float f101 = f89 + f97;
        float f102 = f86 - f94;
        float f103 = f89 - f97;
        float f104 = f90 - f99;
        float f105 = f91 + f98;
        float f106 = (f3 * f104) - (f2 * f105);
        float f107 = (f105 * f3) + (f104 * f2);
        float f108 = f90 + f99;
        float f109 = f91 - f98;
        float f110 = (f2 * f108) - (f3 * f109);
        float f111 = (f2 * f109) + (f3 * f108);
        float f112 = f26 - f82;
        float f113 = f27 - f83;
        float f114 = f26 + f82;
        float f115 = f27 + f83;
        float f116 = f54 - f110;
        float f117 = f55 - f111;
        float f118 = f54 + f110;
        float f119 = f55 + f111;
        fArr[i7] = f112 + f116;
        fArr[i9] = f113 + f117;
        fArr[i15] = f112 - f116;
        fArr[i17] = f113 - f117;
        fArr[i23] = f114 - f119;
        fArr[i25] = f115 + f118;
        fArr[i31] = f114 + f119;
        fArr[i33] = f115 - f118;
        float f120 = f24 + f78;
        float f121 = f25 + f79;
        float f122 = f24 - f78;
        float f123 = f25 - f79;
        float f124 = f50 + f106;
        float f125 = f51 + f107;
        float f126 = f50 - f106;
        float f127 = f51 - f107;
        fArr[i3] = f120 + f124;
        fArr[i5] = f121 + f125;
        fArr[i11] = f120 - f124;
        fArr[i13] = f121 - f125;
        fArr[i19] = f122 - f127;
        fArr[i21] = f123 + f126;
        fArr[i27] = f122 + f127;
        fArr[i29] = f123 - f126;
        float f128 = f46 - f103;
        float f129 = f47 + f102;
        float f130 = (f128 - f129) * f;
        float f131 = (f129 + f128) * f;
        float f132 = f46 + f103;
        float f133 = f47 - f102;
        float f134 = (f132 - f133) * f;
        float f135 = f * (f133 + f132);
        float f136 = f22 - f75;
        float f137 = f23 + f74;
        float f138 = f22 + f75;
        float f139 = f23 - f74;
        fArr[i6] = f136 + f130;
        fArr[i8] = f137 + f131;
        fArr[i14] = f136 - f130;
        fArr[i16] = f137 - f131;
        fArr[i22] = f138 - f135;
        fArr[i24] = f139 + f134;
        fArr[i30] = f138 + f135;
        fArr[i32] = f139 - f134;
        float f140 = f20 + f72;
        float f141 = f21 + f73;
        float f142 = f20 - f72;
        float f143 = f21 - f73;
        float f144 = f44 + f100;
        float f145 = f45 + f101;
        float f146 = f44 - f100;
        float f147 = f45 - f101;
        fArr[i] = f140 + f144;
        fArr[i4] = f141 + f145;
        fArr[i10] = f140 - f144;
        fArr[i12] = f141 - f145;
        fArr[i18] = f142 - f147;
        fArr[i20] = f143 + f146;
        fArr[i26] = f142 + f147;
        fArr[i28] = f143 - f146;
    }

    public static void cftf161(FloatLargeArray floatLargeArray, long j, FloatLargeArray floatLargeArray2, long j2) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j3 = j;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        float f = floatLargeArray4.getFloat(j2 + 1);
        float f2 = floatLargeArray4.getFloat(j2 + 2);
        float f3 = floatLargeArray4.getFloat(j2 + 3);
        long j4 = 16 + j3;
        float f4 = floatLargeArray.getFloat(j) + floatLargeArray3.getFloat(j4);
        long j5 = 1 + j3;
        long j6 = j3 + 17;
        float f5 = floatLargeArray3.getFloat(j5) + floatLargeArray3.getFloat(j6);
        float f6 = floatLargeArray.getFloat(j) - floatLargeArray3.getFloat(j4);
        float f7 = floatLargeArray3.getFloat(j5) - floatLargeArray3.getFloat(j6);
        long j7 = j3 + 8;
        long j8 = j5;
        long j9 = j3 + 24;
        float f8 = floatLargeArray3.getFloat(j7) + floatLargeArray3.getFloat(j9);
        long j10 = j6;
        long j11 = j3 + 9;
        long j12 = j4;
        long j13 = j3 + 25;
        float f9 = floatLargeArray3.getFloat(j11) + floatLargeArray3.getFloat(j13);
        float f10 = floatLargeArray3.getFloat(j7) - floatLargeArray3.getFloat(j9);
        float f11 = floatLargeArray3.getFloat(j11) - floatLargeArray3.getFloat(j13);
        float f12 = f4 + f8;
        float f13 = f5 + f9;
        float f14 = f4 - f8;
        float f15 = f5 - f9;
        float f16 = f6 - f11;
        float f17 = f7 + f10;
        float f18 = f6 + f11;
        float f19 = f7 - f10;
        long j14 = j11;
        long j15 = j3 + 2;
        long j16 = j7;
        long j17 = j3 + 18;
        float f20 = floatLargeArray3.getFloat(j15) + floatLargeArray3.getFloat(j17);
        float f21 = f14;
        long j18 = j3 + 3;
        long j19 = j9;
        long j20 = j3 + 19;
        float f22 = floatLargeArray3.getFloat(j18) + floatLargeArray3.getFloat(j20);
        float f23 = floatLargeArray3.getFloat(j15) - floatLargeArray3.getFloat(j17);
        float f24 = floatLargeArray3.getFloat(j18) - floatLargeArray3.getFloat(j20);
        long j21 = j18;
        long j22 = j3 + 10;
        long j23 = j15;
        long j24 = j3 + 26;
        float f25 = floatLargeArray3.getFloat(j22) + floatLargeArray3.getFloat(j24);
        long j25 = j20;
        long j26 = j3 + 11;
        long j27 = j17;
        long j28 = j3 + 27;
        float f26 = floatLargeArray3.getFloat(j26) + floatLargeArray3.getFloat(j28);
        float f27 = floatLargeArray3.getFloat(j22) - floatLargeArray3.getFloat(j24);
        float f28 = floatLargeArray3.getFloat(j26) - floatLargeArray3.getFloat(j28);
        float f29 = f20 + f25;
        float f30 = f22 + f26;
        float f31 = f20 - f25;
        float f32 = f22 - f26;
        float f33 = f23 - f28;
        float f34 = f24 + f27;
        float f35 = (f2 * f33) - (f3 * f34);
        float f36 = (f34 * f2) + (f33 * f3);
        float f37 = f23 + f28;
        float f38 = f24 - f27;
        float f39 = (f3 * f37) - (f2 * f38);
        float f40 = (f38 * f3) + (f37 * f2);
        long j29 = j26;
        long j30 = j3 + 4;
        long j31 = j22;
        long j32 = j3 + 20;
        float f41 = floatLargeArray3.getFloat(j30) + floatLargeArray3.getFloat(j32);
        float f42 = f32;
        float f43 = f15;
        long j33 = j3 + 5;
        long j34 = j28;
        long j35 = j3 + 21;
        float f44 = floatLargeArray3.getFloat(j33) + floatLargeArray3.getFloat(j35);
        float f45 = floatLargeArray3.getFloat(j30) - floatLargeArray3.getFloat(j32);
        float f46 = floatLargeArray3.getFloat(j33) - floatLargeArray3.getFloat(j35);
        long j36 = j33;
        long j37 = j3 + 12;
        long j38 = j30;
        long j39 = j3 + 28;
        float f47 = floatLargeArray3.getFloat(j37) + floatLargeArray3.getFloat(j39);
        long j40 = j35;
        long j41 = j3 + 13;
        long j42 = j32;
        long j43 = j3 + 29;
        float f48 = floatLargeArray3.getFloat(j41) + floatLargeArray3.getFloat(j43);
        float f49 = floatLargeArray3.getFloat(j37) - floatLargeArray3.getFloat(j39);
        float f50 = floatLargeArray3.getFloat(j41) - floatLargeArray3.getFloat(j43);
        float f51 = f41 + f47;
        float f52 = f44 + f48;
        float f53 = f41 - f47;
        float f54 = f44 - f48;
        float f55 = f45 - f50;
        float f56 = f46 + f49;
        float f57 = (f55 - f56) * f;
        float f58 = (f56 + f55) * f;
        float f59 = f45 + f50;
        float f60 = f46 - f49;
        float f61 = (f59 + f60) * f;
        float f62 = (f60 - f59) * f;
        long j44 = j41;
        long j45 = j3 + 6;
        long j46 = j37;
        long j47 = j3 + 22;
        float f63 = floatLargeArray3.getFloat(j45) + floatLargeArray3.getFloat(j47);
        long j48 = j43;
        long j49 = j3 + 7;
        long j50 = j39;
        long j51 = j3 + 23;
        float f64 = floatLargeArray3.getFloat(j49) + floatLargeArray3.getFloat(j51);
        float f65 = floatLargeArray3.getFloat(j45) - floatLargeArray3.getFloat(j47);
        float f66 = floatLargeArray3.getFloat(j49) - floatLargeArray3.getFloat(j51);
        long j52 = j49;
        long j53 = j3 + 14;
        long j54 = j45;
        long j55 = j3 + 30;
        float f67 = floatLargeArray3.getFloat(j53) + floatLargeArray3.getFloat(j55);
        long j56 = j51;
        long j57 = j3 + 15;
        long j58 = j47;
        long j59 = j3 + 31;
        float f68 = floatLargeArray3.getFloat(j57) + floatLargeArray3.getFloat(j59);
        float f69 = floatLargeArray3.getFloat(j53) - floatLargeArray3.getFloat(j55);
        float f70 = floatLargeArray3.getFloat(j57) - floatLargeArray3.getFloat(j59);
        float f71 = f63 + f67;
        float f72 = f64 + f68;
        float f73 = f63 - f67;
        float f74 = f64 - f68;
        float f75 = f65 - f70;
        float f76 = f66 + f69;
        float f77 = (f3 * f75) - (f2 * f76);
        float f78 = (f76 * f3) + (f75 * f2);
        float f79 = f65 + f70;
        float f80 = f66 - f69;
        float f81 = (f2 * f79) - (f3 * f80);
        float f82 = (f2 * f80) + (f3 * f79);
        float f83 = f18 - f61;
        float f84 = f19 - f62;
        float f85 = f18 + f61;
        float f86 = f19 + f62;
        float f87 = f39 - f81;
        float f88 = f40 - f82;
        float f89 = f39 + f81;
        float f90 = f40 + f82;
        floatLargeArray3.setFloat(j19, f83 + f87);
        long j60 = j57;
        floatLargeArray3.setFloat(j13, f84 + f88);
        floatLargeArray3.setFloat(j24, f83 - f87);
        floatLargeArray3.setFloat(j34, f84 - f88);
        floatLargeArray3.setFloat(j50, f85 - f90);
        floatLargeArray3.setFloat(j48, f86 + f89);
        floatLargeArray3.setFloat(j55, f85 + f90);
        floatLargeArray3.setFloat(j59, f86 - f89);
        float f91 = f16 + f57;
        float f92 = f17 + f58;
        float f93 = f16 - f57;
        float f94 = f17 - f58;
        float f95 = f35 + f77;
        float f96 = f36 + f78;
        float f97 = f35 - f77;
        float f98 = f36 - f78;
        floatLargeArray3.setFloat(j12, f91 + f95);
        floatLargeArray3.setFloat(j10, f92 + f96);
        floatLargeArray3.setFloat(j27, f91 - f95);
        floatLargeArray3.setFloat(j25, f92 - f96);
        floatLargeArray3.setFloat(j42, f93 - f98);
        floatLargeArray3.setFloat(j40, f94 + f97);
        floatLargeArray3.setFloat(j58, f93 + f98);
        floatLargeArray3.setFloat(j56, f94 - f97);
        float f99 = f31 - f74;
        float f100 = f42 + f73;
        float f101 = (f99 - f100) * f;
        float f102 = (f100 + f99) * f;
        float f103 = f31 + f74;
        float f104 = f42 - f73;
        float f105 = (f103 - f104) * f;
        float f106 = f * (f104 + f103);
        float f107 = f21 - f54;
        float f108 = f43 + f53;
        float f109 = f21 + f54;
        float f110 = f43 - f53;
        floatLargeArray3.setFloat(j16, f107 + f101);
        floatLargeArray3.setFloat(j14, f108 + f102);
        floatLargeArray3.setFloat(j31, f107 - f101);
        floatLargeArray3.setFloat(j29, f108 - f102);
        floatLargeArray3.setFloat(j46, f109 - f106);
        floatLargeArray3.setFloat(j44, f110 + f105);
        floatLargeArray3.setFloat(j53, f109 + f106);
        floatLargeArray3.setFloat(j60, f110 - f105);
        float f111 = f12 + f51;
        float f112 = f13 + f52;
        float f113 = f12 - f51;
        float f114 = f13 - f52;
        float f115 = f29 + f71;
        float f116 = f30 + f72;
        float f117 = f29 - f71;
        float f118 = f30 - f72;
        floatLargeArray3.setFloat(j, f111 + f115);
        floatLargeArray3.setFloat(j8, f112 + f116);
        floatLargeArray3.setFloat(j23, f111 - f115);
        floatLargeArray3.setFloat(j21, f112 - f116);
        floatLargeArray3.setFloat(j38, f113 - f118);
        floatLargeArray3.setFloat(j36, f114 + f117);
        floatLargeArray3.setFloat(j54, f113 + f118);
        floatLargeArray3.setFloat(j52, f114 - f117);
    }

    public static void cftf162(float[] fArr, int i, float[] fArr2, int i2) {
        float f = fArr2[i2 + 1];
        float f2 = fArr2[i2 + 4];
        float f3 = fArr2[i2 + 5];
        float f4 = fArr2[i2 + 6];
        float f5 = -fArr2[i2 + 7];
        float f6 = fArr2[i2 + 8];
        float f7 = fArr2[i2 + 9];
        float f8 = fArr[i];
        int i3 = i + 17;
        float f9 = fArr[i3];
        float f10 = f8 - f9;
        int i4 = i + 1;
        float f11 = fArr[i4];
        int i5 = i + 16;
        float f12 = fArr[i5];
        float f13 = f11 + f12;
        int i6 = i + 8;
        float f14 = fArr[i6];
        int i7 = i + 25;
        float f15 = fArr[i7];
        float f16 = f14 - f15;
        int i8 = i + 9;
        float f17 = fArr[i8];
        int i9 = i + 24;
        float f18 = fArr[i9];
        float f19 = f17 + f18;
        float f20 = (f16 - f19) * f;
        float f21 = (f19 + f16) * f;
        float f22 = f10 + f20;
        float f23 = f13 + f21;
        float f24 = f10 - f20;
        float f25 = f13 - f21;
        float f26 = f8 + f9;
        float f27 = f11 - f12;
        float f28 = f14 + f15;
        float f29 = f17 - f18;
        float f30 = (f28 - f29) * f;
        float f31 = (f29 + f28) * f;
        float f32 = f26 - f31;
        float f33 = f27 + f30;
        float f34 = f26 + f31;
        float f35 = f27 - f30;
        int i10 = i + 2;
        float f36 = fArr[i10];
        int i11 = i + 19;
        float f37 = fArr[i11];
        float f38 = f36 - f37;
        int i12 = i + 3;
        float f39 = fArr[i12];
        int i13 = i + 18;
        float f40 = fArr[i13];
        float f41 = f39 + f40;
        float f42 = (f2 * f38) - (f3 * f41);
        float f43 = (f41 * f2) + (f38 * f3);
        int i14 = i + 10;
        float f44 = fArr[i14];
        int i15 = i + 27;
        float f45 = fArr[i15];
        float f46 = f44 - f45;
        int i16 = i + 11;
        float f47 = fArr[i16];
        int i17 = i + 26;
        float f48 = fArr[i17];
        float f49 = f47 + f48;
        float f50 = (f5 * f46) - (f4 * f49);
        float f51 = (f49 * f5) + (f46 * f4);
        float f52 = f42 + f50;
        float f53 = f43 + f51;
        float f54 = f42 - f50;
        float f55 = f43 - f51;
        float f56 = f36 + f37;
        float f57 = f39 - f40;
        float f58 = (f4 * f56) - (f5 * f57);
        float f59 = (f57 * f4) + (f56 * f5);
        float f60 = f44 + f45;
        float f61 = f47 - f48;
        float f62 = (f2 * f60) + (f3 * f61);
        float f63 = (f61 * f2) - (f60 * f3);
        float f64 = f58 - f62;
        float f65 = f59 - f63;
        float f66 = f58 + f62;
        float f67 = f59 + f63;
        int i18 = i + 4;
        float f68 = fArr[i18];
        int i19 = i + 21;
        float f69 = fArr[i19];
        float f70 = f68 - f69;
        int i20 = i + 5;
        float f71 = fArr[i20];
        int i21 = i + 20;
        float f72 = fArr[i21];
        float f73 = f71 + f72;
        float f74 = (f6 * f70) - (f7 * f73);
        float f75 = (f73 * f6) + (f70 * f7);
        int i22 = i + 12;
        float f76 = fArr[i22];
        int i23 = i + 29;
        float f77 = fArr[i23];
        float f78 = f76 - f77;
        int i24 = i + 13;
        float f79 = fArr[i24];
        int i25 = i + 28;
        float f80 = fArr[i25];
        float f81 = f79 + f80;
        float f82 = (f7 * f78) - (f6 * f81);
        float f83 = (f81 * f7) + (f78 * f6);
        float f84 = f74 + f82;
        float f85 = f75 + f83;
        float f86 = f74 - f82;
        float f87 = f75 - f83;
        float f88 = f68 + f69;
        float f89 = f71 - f72;
        float f90 = (f7 * f88) - (f6 * f89);
        float f91 = (f89 * f7) + (f88 * f6);
        float f92 = f76 + f77;
        float f93 = f79 - f80;
        float f94 = (f6 * f92) - (f7 * f93);
        float f95 = (f6 * f93) + (f7 * f92);
        float f96 = f90 - f94;
        float f97 = f91 - f95;
        float f98 = f90 + f94;
        float f99 = f91 + f95;
        int i26 = i + 6;
        float f100 = fArr[i26];
        int i27 = i + 23;
        float f101 = fArr[i27];
        float f102 = f100 - f101;
        int i28 = i + 7;
        float f103 = fArr[i28];
        int i29 = i + 22;
        float f104 = fArr[i29];
        float f105 = f103 + f104;
        float f106 = (f4 * f102) - (f5 * f105);
        float f107 = (f105 * f4) + (f102 * f5);
        int i30 = i + 14;
        float f108 = fArr[i30];
        int i31 = i + 31;
        float f109 = fArr[i31];
        float f110 = f108 - f109;
        int i32 = i + 15;
        float f111 = fArr[i32];
        int i33 = i + 30;
        float f112 = fArr[i33];
        float f113 = f111 + f112;
        float f114 = (f3 * f110) - (f2 * f113);
        float f115 = (f113 * f3) + (f110 * f2);
        float f116 = f106 + f114;
        float f117 = f107 + f115;
        float f118 = f106 - f114;
        float f119 = f107 - f115;
        float f120 = f100 + f101;
        float f121 = f103 - f104;
        float f122 = (f3 * f120) + (f2 * f121);
        float f123 = (f3 * f121) - (f2 * f120);
        float f124 = f108 + f109;
        float f125 = f111 - f112;
        float f126 = (f5 * f124) - (f4 * f125);
        float f127 = (f5 * f125) + (f4 * f124);
        float f128 = f122 + f126;
        float f129 = f123 + f127;
        float f130 = f122 - f126;
        float f131 = f123 - f127;
        float f132 = f22 + f84;
        float f133 = f23 + f85;
        float f134 = f52 + f116;
        float f135 = f53 + f117;
        fArr[i] = f132 + f134;
        fArr[i4] = f133 + f135;
        fArr[i10] = f132 - f134;
        fArr[i12] = f133 - f135;
        float f136 = f22 - f84;
        float f137 = f23 - f85;
        float f138 = f52 - f116;
        float f139 = f53 - f117;
        fArr[i18] = f136 - f139;
        fArr[i20] = f137 + f138;
        fArr[i26] = f136 + f139;
        fArr[i28] = f137 - f138;
        float f140 = f24 - f87;
        float f141 = f25 + f86;
        float f142 = f54 - f119;
        float f143 = f55 + f118;
        float f144 = (f142 - f143) * f;
        float f145 = (f143 + f142) * f;
        fArr[i6] = f140 + f144;
        fArr[i8] = f141 + f145;
        fArr[i14] = f140 - f144;
        fArr[i16] = f141 - f145;
        float f146 = f24 + f87;
        float f147 = f25 - f86;
        float f148 = f54 + f119;
        float f149 = f55 - f118;
        float f150 = (f148 - f149) * f;
        float f151 = (f149 + f148) * f;
        fArr[i22] = f146 - f151;
        fArr[i24] = f147 + f150;
        fArr[i30] = f146 + f151;
        fArr[i32] = f147 - f150;
        float f152 = f32 + f96;
        float f153 = f33 + f97;
        float f154 = f64 - f128;
        float f155 = f65 - f129;
        fArr[i5] = f152 + f154;
        fArr[i3] = f153 + f155;
        fArr[i13] = f152 - f154;
        fArr[i11] = f153 - f155;
        float f156 = f32 - f96;
        float f157 = f33 - f97;
        float f158 = f64 + f128;
        float f159 = f65 + f129;
        fArr[i21] = f156 - f159;
        fArr[i19] = f157 + f158;
        fArr[i29] = f156 + f159;
        fArr[i27] = f157 - f158;
        float f160 = f34 - f99;
        float f161 = f35 + f98;
        float f162 = f66 + f131;
        float f163 = f67 - f130;
        float f164 = (f162 - f163) * f;
        float f165 = (f163 + f162) * f;
        fArr[i9] = f160 + f164;
        fArr[i7] = f161 + f165;
        fArr[i17] = f160 - f164;
        fArr[i15] = f161 - f165;
        float f166 = f34 + f99;
        float f167 = f35 - f98;
        float f168 = f66 - f131;
        float f169 = f67 + f130;
        float f170 = (f168 - f169) * f;
        float f171 = f * (f169 + f168);
        fArr[i25] = f166 - f171;
        fArr[i23] = f167 + f170;
        fArr[i33] = f166 + f171;
        fArr[i31] = f167 - f170;
    }

    public static void cftf162(FloatLargeArray floatLargeArray, long j, FloatLargeArray floatLargeArray2, long j2) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j3 = j;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        float f = floatLargeArray4.getFloat(j2 + 1);
        float f2 = floatLargeArray4.getFloat(j2 + 4);
        float f3 = floatLargeArray4.getFloat(j2 + 5);
        float f4 = floatLargeArray4.getFloat(j2 + 6);
        float f5 = floatLargeArray4.getFloat(j2 + 8);
        float f6 = floatLargeArray4.getFloat(j2 + 9);
        long j4 = 17 + j3;
        float f7 = floatLargeArray.getFloat(j) - floatLargeArray3.getFloat(j4);
        long j5 = 1 + j3;
        float f8 = f4;
        float f9 = -floatLargeArray4.getFloat(j2 + 7);
        long j6 = j3 + 16;
        float f10 = floatLargeArray3.getFloat(j5) + floatLargeArray3.getFloat(j6);
        float f11 = f2;
        long j7 = j6;
        long j8 = j3 + 8;
        float f12 = floatLargeArray3.getFloat(j8);
        long j9 = j8;
        long j10 = j3 + 25;
        float f13 = f12 - floatLargeArray3.getFloat(j10);
        long j11 = j10;
        long j12 = j3 + 9;
        float f14 = floatLargeArray3.getFloat(j12);
        long j13 = j12;
        long j14 = j3 + 24;
        float f15 = f14 + floatLargeArray3.getFloat(j14);
        float f16 = (f13 - f15) * f;
        float f17 = (f15 + f13) * f;
        float f18 = f7 + f16;
        float f19 = f10 + f17;
        float f20 = f7 - f16;
        float f21 = f10 - f17;
        float f22 = floatLargeArray.getFloat(j) + floatLargeArray3.getFloat(j4);
        long j15 = j4;
        float f23 = floatLargeArray3.getFloat(j5) - floatLargeArray3.getFloat(j7);
        long j16 = j9;
        float f24 = floatLargeArray3.getFloat(j16);
        long j17 = j16;
        long j18 = j11;
        float f25 = f24 + floatLargeArray3.getFloat(j18);
        long j19 = j18;
        long j20 = j13;
        float f26 = floatLargeArray3.getFloat(j20) - floatLargeArray3.getFloat(j14);
        float f27 = (f25 - f26) * f;
        float f28 = (f26 + f25) * f;
        float f29 = f22 - f28;
        float f30 = f23 + f27;
        float f31 = f22 + f28;
        float f32 = f23 - f27;
        long j21 = j14;
        long j22 = j3 + 2;
        long j23 = j20;
        long j24 = j3 + 19;
        float f33 = floatLargeArray3.getFloat(j22) - floatLargeArray3.getFloat(j24);
        long j25 = j5;
        long j26 = j3 + 3;
        float f34 = f;
        float f35 = f5;
        long j27 = j3 + 18;
        float f36 = floatLargeArray3.getFloat(j26) + floatLargeArray3.getFloat(j27);
        float f37 = (f11 * f33) - (f3 * f36);
        float f38 = (f36 * f11) + (f33 * f3);
        float f39 = f18;
        float f40 = f3;
        long j28 = j3 + 10;
        float f41 = floatLargeArray3.getFloat(j28);
        long j29 = j28;
        long j30 = j3 + 27;
        float f42 = f41 - floatLargeArray3.getFloat(j30);
        long j31 = j30;
        long j32 = j3 + 11;
        float f43 = floatLargeArray3.getFloat(j32);
        long j33 = j32;
        long j34 = j3 + 26;
        float f44 = f43 + floatLargeArray3.getFloat(j34);
        float f45 = (f9 * f42) - (f8 * f44);
        float f46 = (f44 * f9) + (f42 * f8);
        float f47 = f37 + f45;
        float f48 = f38 + f46;
        float f49 = f37 - f45;
        float f50 = f38 - f46;
        float f51 = floatLargeArray3.getFloat(j22) + floatLargeArray3.getFloat(j24);
        float f52 = floatLargeArray3.getFloat(j26) - floatLargeArray3.getFloat(j27);
        float f53 = (f8 * f51) - (f9 * f52);
        float f54 = (f52 * f8) + (f51 * f9);
        long j35 = j24;
        long j36 = j29;
        long j37 = j27;
        long j38 = j31;
        float f55 = floatLargeArray3.getFloat(j36) + floatLargeArray3.getFloat(j38);
        long j39 = j38;
        long j40 = j33;
        float f56 = floatLargeArray3.getFloat(j40) - floatLargeArray3.getFloat(j34);
        float f57 = (f11 * f55) + (f40 * f56);
        float f58 = (f56 * f11) - (f55 * f40);
        float f59 = f53 - f57;
        float f60 = f54 - f58;
        float f61 = f53 + f57;
        float f62 = f54 + f58;
        long j41 = j34;
        long j42 = j3 + 4;
        long j43 = j40;
        long j44 = j3 + 21;
        float f63 = floatLargeArray3.getFloat(j42) - floatLargeArray3.getFloat(j44);
        long j45 = j36;
        long j46 = j3 + 5;
        long j47 = j26;
        long j48 = j3 + 20;
        float f64 = floatLargeArray3.getFloat(j46) + floatLargeArray3.getFloat(j48);
        float f65 = (f35 * f63) - (f6 * f64);
        float f66 = (f64 * f35) + (f63 * f6);
        float f67 = f20;
        long j49 = j3 + 12;
        float f68 = floatLargeArray3.getFloat(j49);
        long j50 = j49;
        long j51 = j3 + 29;
        float f69 = f68 - floatLargeArray3.getFloat(j51);
        long j52 = j51;
        long j53 = j3 + 13;
        float f70 = floatLargeArray3.getFloat(j53);
        long j54 = j53;
        long j55 = j3 + 28;
        float f71 = f70 + floatLargeArray3.getFloat(j55);
        float f72 = (f6 * f69) - (f35 * f71);
        float f73 = (f71 * f6) + (f69 * f35);
        float f74 = f65 + f72;
        float f75 = f66 + f73;
        float f76 = f65 - f72;
        float f77 = f66 - f73;
        float f78 = floatLargeArray3.getFloat(j42) + floatLargeArray3.getFloat(j44);
        float f79 = floatLargeArray3.getFloat(j46) - floatLargeArray3.getFloat(j48);
        float f80 = (f6 * f78) - (f35 * f79);
        float f81 = (f79 * f6) + (f78 * f35);
        long j56 = j44;
        long j57 = j50;
        long j58 = j48;
        long j59 = j52;
        float f82 = floatLargeArray3.getFloat(j57) + floatLargeArray3.getFloat(j59);
        long j60 = j59;
        long j61 = j54;
        float f83 = floatLargeArray3.getFloat(j61) - floatLargeArray3.getFloat(j55);
        float f84 = (f35 * f82) - (f6 * f83);
        float f85 = (f35 * f83) + (f6 * f82);
        float f86 = f80 - f84;
        float f87 = f81 - f85;
        float f88 = f80 + f84;
        float f89 = f81 + f85;
        long j62 = j55;
        long j63 = j3 + 6;
        float f90 = f86;
        long j64 = j3 + 23;
        float f91 = floatLargeArray3.getFloat(j63) - floatLargeArray3.getFloat(j64);
        long j65 = j57;
        float f92 = f90;
        long j66 = j3 + 7;
        long j67 = j46;
        long j68 = j3 + 22;
        float f93 = floatLargeArray3.getFloat(j66) + floatLargeArray3.getFloat(j68);
        float f94 = (f8 * f91) - (f9 * f93);
        float f95 = (f93 * f8) + (f91 * f9);
        long j69 = j42;
        long j70 = j3 + 14;
        float f96 = f74;
        long j71 = j3 + 31;
        float f97 = floatLargeArray3.getFloat(j70) - floatLargeArray3.getFloat(j71);
        long j72 = j71;
        long j73 = j3 + 15;
        float f98 = floatLargeArray3.getFloat(j73);
        long j74 = j73;
        long j75 = j3 + 30;
        float f99 = f98 + floatLargeArray3.getFloat(j75);
        float f100 = (f40 * f97) - (f11 * f99);
        float f101 = (f99 * f40) + (f97 * f11);
        float f102 = f94 + f100;
        float f103 = f95 + f101;
        float f104 = f94 - f100;
        float f105 = f95 - f101;
        float f106 = floatLargeArray3.getFloat(j63) + floatLargeArray3.getFloat(j64);
        float f107 = floatLargeArray3.getFloat(j66) - floatLargeArray3.getFloat(j68);
        float f108 = (f40 * f106) + (f11 * f107);
        float f109 = (f40 * f107) - (f106 * f11);
        long j76 = j64;
        long j77 = j70;
        long j78 = j68;
        float f110 = floatLargeArray3.getFloat(j77) + floatLargeArray3.getFloat(j72);
        long j79 = j74;
        float f111 = floatLargeArray3.getFloat(j79) - floatLargeArray3.getFloat(j75);
        float f112 = (f9 * f110) - (f8 * f111);
        float f113 = (f111 * f9) + (f110 * f8);
        float f114 = f108 + f112;
        float f115 = f109 + f113;
        float f116 = f108 - f112;
        float f117 = f109 - f113;
        float f118 = f39 + f96;
        float f119 = f19 + f75;
        float f120 = f47 + f102;
        float f121 = f48 + f103;
        long j80 = j75;
        floatLargeArray3.setFloat(j3, f118 + f120);
        floatLargeArray3.setFloat(j25, f119 + f121);
        floatLargeArray3.setFloat(j22, f118 - f120);
        floatLargeArray3.setFloat(j47, f119 - f121);
        float f122 = f39 - f96;
        float f123 = f19 - f75;
        float f124 = f47 - f102;
        float f125 = f48 - f103;
        float f126 = f114;
        floatLargeArray3.setFloat(j69, f122 - f125);
        floatLargeArray3.setFloat(j67, f123 + f124);
        floatLargeArray3.setFloat(j63, f122 + f125);
        floatLargeArray3.setFloat(j66, f123 - f124);
        float f127 = f67 - f77;
        float f128 = f21 + f76;
        float f129 = f49 - f105;
        float f130 = f50 + f104;
        float f131 = (f129 - f130) * f34;
        float f132 = f34 * (f130 + f129);
        floatLargeArray3.setFloat(j17, f127 + f131);
        floatLargeArray3.setFloat(j23, f128 + f132);
        floatLargeArray3.setFloat(j45, f127 - f131);
        floatLargeArray3.setFloat(j43, f128 - f132);
        float f133 = f67 + f77;
        float f134 = f21 - f76;
        float f135 = f49 + f105;
        float f136 = f50 - f104;
        float f137 = f34 * (f135 - f136);
        float f138 = f34 * (f136 + f135);
        floatLargeArray3.setFloat(j65, f133 - f138);
        floatLargeArray3.setFloat(j61, f134 + f137);
        floatLargeArray3.setFloat(j77, f133 + f138);
        floatLargeArray3.setFloat(j79, f134 - f137);
        float f139 = f29 + f92;
        float f140 = f30 + f87;
        float f141 = f59 - f126;
        float f142 = f60 - f115;
        floatLargeArray3.setFloat(j7, f139 + f141);
        floatLargeArray3.setFloat(j15, f140 + f142);
        floatLargeArray3.setFloat(j37, f139 - f141);
        floatLargeArray3.setFloat(j35, f140 - f142);
        float f143 = f29 - f92;
        float f144 = f30 - f87;
        float f145 = f59 + f126;
        float f146 = f60 + f115;
        floatLargeArray3.setFloat(j58, f143 - f146);
        floatLargeArray3.setFloat(j56, f144 + f145);
        floatLargeArray3.setFloat(j78, f143 + f146);
        floatLargeArray3.setFloat(j76, f144 - f145);
        float f147 = f31 - f89;
        float f148 = f32 + f88;
        float f149 = f61 + f117;
        float f150 = f62 - f116;
        float f151 = f34 * (f149 - f150);
        float f152 = f34 * (f150 + f149);
        floatLargeArray3.setFloat(j21, f147 + f151);
        floatLargeArray3.setFloat(j19, f148 + f152);
        floatLargeArray3.setFloat(j41, f147 - f151);
        floatLargeArray3.setFloat(j39, f148 - f152);
        float f153 = f31 + f89;
        float f154 = f32 - f88;
        float f155 = f61 - f117;
        float f156 = f62 + f116;
        float f157 = f34 * (f155 - f156);
        float f158 = f34 * (f156 + f155);
        floatLargeArray3.setFloat(j62, f153 - f158);
        floatLargeArray3.setFloat(j60, f154 + f157);
        floatLargeArray3.setFloat(j80, f153 + f158);
        floatLargeArray3.setFloat(j72, f154 - f157);
    }

    public static void cftf081(float[] fArr, int i, float[] fArr2, int i2) {
        float f = fArr2[i2 + 1];
        float f2 = fArr[i];
        int i3 = i + 8;
        float f3 = fArr[i3];
        float f4 = f2 + f3;
        int i4 = i + 1;
        float f5 = fArr[i4];
        int i5 = i + 9;
        float f6 = fArr[i5];
        float f7 = f5 + f6;
        float f8 = f2 - f3;
        float f9 = f5 - f6;
        int i6 = i + 4;
        float f10 = fArr[i6];
        int i7 = i + 12;
        float f11 = fArr[i7];
        float f12 = f10 + f11;
        int i8 = i + 5;
        float f13 = fArr[i8];
        int i9 = i + 13;
        float f14 = fArr[i9];
        float f15 = f13 + f14;
        float f16 = f10 - f11;
        float f17 = f13 - f14;
        float f18 = f4 + f12;
        float f19 = f7 + f15;
        float f20 = f4 - f12;
        float f21 = f7 - f15;
        float f22 = f8 - f17;
        float f23 = f9 + f16;
        float f24 = f8 + f17;
        float f25 = f9 - f16;
        int i10 = i + 2;
        float f26 = fArr[i10];
        int i11 = i + 10;
        float f27 = fArr[i11];
        float f28 = f26 + f27;
        int i12 = i + 3;
        float f29 = fArr[i12];
        int i13 = i + 11;
        float f30 = fArr[i13];
        float f31 = f29 + f30;
        float f32 = f26 - f27;
        float f33 = f29 - f30;
        int i14 = i + 6;
        float f34 = fArr[i14];
        int i15 = i + 14;
        float f35 = fArr[i15];
        float f36 = f34 + f35;
        int i16 = i + 7;
        float f37 = fArr[i16];
        int i17 = i + 15;
        float f38 = fArr[i17];
        float f39 = f37 + f38;
        float f40 = f34 - f35;
        float f41 = f37 - f38;
        float f42 = f28 + f36;
        float f43 = f31 + f39;
        float f44 = f28 - f36;
        float f45 = f31 - f39;
        float f46 = f32 - f41;
        float f47 = f33 + f40;
        float f48 = f32 + f41;
        float f49 = f33 - f40;
        float f50 = (f46 - f47) * f;
        float f51 = (f46 + f47) * f;
        float f52 = (f48 - f49) * f;
        float f53 = f * (f48 + f49);
        fArr[i3] = f22 + f50;
        fArr[i5] = f23 + f51;
        fArr[i11] = f22 - f50;
        fArr[i13] = f23 - f51;
        fArr[i7] = f24 - f53;
        fArr[i9] = f25 + f52;
        fArr[i15] = f24 + f53;
        fArr[i17] = f25 - f52;
        fArr[i] = f18 + f42;
        fArr[i4] = f19 + f43;
        fArr[i10] = f18 - f42;
        fArr[i12] = f19 - f43;
        fArr[i6] = f20 - f45;
        fArr[i8] = f21 + f44;
        fArr[i14] = f20 + f45;
        fArr[i16] = f21 - f44;
    }

    public static void cftf081(FloatLargeArray floatLargeArray, long j, FloatLargeArray floatLargeArray2, long j2) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j3 = j;
        float f = floatLargeArray2.getFloat(j2 + 1);
        long j4 = 8 + j3;
        float f2 = floatLargeArray.getFloat(j) + floatLargeArray3.getFloat(j4);
        long j5 = 1 + j3;
        long j6 = 9 + j3;
        float f3 = floatLargeArray3.getFloat(j5) + floatLargeArray3.getFloat(j6);
        float f4 = floatLargeArray.getFloat(j) - floatLargeArray3.getFloat(j4);
        float f5 = floatLargeArray3.getFloat(j5) - floatLargeArray3.getFloat(j6);
        long j7 = 4 + j3;
        long j8 = j5;
        long j9 = j3 + 12;
        float f6 = floatLargeArray3.getFloat(j7) + floatLargeArray3.getFloat(j9);
        long j10 = j6;
        long j11 = j3 + 5;
        long j12 = j4;
        long j13 = j3 + 13;
        float f7 = floatLargeArray3.getFloat(j11) + floatLargeArray3.getFloat(j13);
        float f8 = floatLargeArray3.getFloat(j7) - floatLargeArray3.getFloat(j9);
        float f9 = floatLargeArray3.getFloat(j11) - floatLargeArray3.getFloat(j13);
        float f10 = f2 + f6;
        float f11 = f3 + f7;
        float f12 = f2 - f6;
        float f13 = f3 - f7;
        float f14 = f4 - f9;
        float f15 = f5 + f8;
        float f16 = f4 + f9;
        float f17 = f5 - f8;
        long j14 = j11;
        long j15 = j3 + 2;
        long j16 = j7;
        long j17 = j3 + 10;
        float f18 = floatLargeArray3.getFloat(j15) + floatLargeArray3.getFloat(j17);
        float f19 = f12;
        long j18 = j3 + 3;
        long j19 = j9;
        long j20 = j3 + 11;
        float f20 = floatLargeArray3.getFloat(j18) + floatLargeArray3.getFloat(j20);
        float f21 = floatLargeArray3.getFloat(j15) - floatLargeArray3.getFloat(j17);
        float f22 = floatLargeArray3.getFloat(j18) - floatLargeArray3.getFloat(j20);
        long j21 = j18;
        long j22 = j3 + 6;
        float f23 = f13;
        long j23 = j3 + 14;
        float f24 = floatLargeArray3.getFloat(j22) + floatLargeArray3.getFloat(j23);
        float f25 = f16;
        long j24 = j3 + 7;
        long j25 = j20;
        long j26 = j3 + 15;
        float f26 = floatLargeArray3.getFloat(j24) + floatLargeArray3.getFloat(j26);
        float f27 = floatLargeArray3.getFloat(j22) - floatLargeArray3.getFloat(j23);
        float f28 = floatLargeArray3.getFloat(j24) - floatLargeArray3.getFloat(j26);
        float f29 = f18 + f24;
        float f30 = f20 + f26;
        float f31 = f18 - f24;
        float f32 = f20 - f26;
        float f33 = f21 - f28;
        float f34 = f22 + f27;
        float f35 = f21 + f28;
        float f36 = f22 - f27;
        float f37 = (f33 - f34) * f;
        float f38 = (f33 + f34) * f;
        float f39 = (f35 - f36) * f;
        float f40 = f * (f35 + f36);
        long j27 = j24;
        long j28 = j22;
        floatLargeArray3.setFloat(j12, f14 + f37);
        floatLargeArray3.setFloat(j10, f15 + f38);
        floatLargeArray3.setFloat(j17, f14 - f37);
        floatLargeArray3.setFloat(j25, f15 - f38);
        floatLargeArray3.setFloat(j19, f25 - f40);
        floatLargeArray3.setFloat(j13, f17 + f39);
        floatLargeArray3.setFloat(j23, f25 + f40);
        floatLargeArray3.setFloat(j26, f17 - f39);
        floatLargeArray3.setFloat(j3, f10 + f29);
        floatLargeArray3.setFloat(j8, f11 + f30);
        floatLargeArray3.setFloat(j15, f10 - f29);
        floatLargeArray3.setFloat(j21, f11 - f30);
        floatLargeArray3.setFloat(j16, f19 - f32);
        floatLargeArray3.setFloat(j14, f23 + f31);
        floatLargeArray3.setFloat(j28, f19 + f32);
        floatLargeArray3.setFloat(j27, f23 - f31);
    }

    public static void cftf082(float[] fArr, int i, float[] fArr2, int i2) {
        float f = fArr2[i2 + 1];
        float f2 = fArr2[i2 + 2];
        float f3 = fArr2[i2 + 3];
        float f4 = fArr[i];
        int i3 = i + 9;
        float f5 = fArr[i3];
        float f6 = f4 - f5;
        int i4 = i + 1;
        float f7 = fArr[i4];
        int i5 = i + 8;
        float f8 = fArr[i5];
        float f9 = f7 + f8;
        float f10 = f4 + f5;
        float f11 = f7 - f8;
        int i6 = i + 4;
        float f12 = fArr[i6];
        int i7 = i + 13;
        float f13 = fArr[i7];
        float f14 = f12 - f13;
        int i8 = i + 5;
        float f15 = fArr[i8];
        int i9 = i + 12;
        float f16 = fArr[i9];
        float f17 = f15 + f16;
        float f18 = (f14 - f17) * f;
        float f19 = (f17 + f14) * f;
        float f20 = f12 + f13;
        float f21 = f15 - f16;
        float f22 = (f20 - f21) * f;
        float f23 = f * (f21 + f20);
        int i10 = i + 2;
        float f24 = fArr[i10];
        int i11 = i + 11;
        float f25 = fArr[i11];
        float f26 = f24 - f25;
        int i12 = i + 3;
        float f27 = fArr[i12];
        int i13 = i + 10;
        float f28 = fArr[i13];
        float f29 = f27 + f28;
        float f30 = (f2 * f26) - (f3 * f29);
        float f31 = (f29 * f2) + (f26 * f3);
        float f32 = f24 + f25;
        float f33 = f27 - f28;
        float f34 = (f3 * f32) - (f2 * f33);
        float f35 = (f33 * f3) + (f32 * f2);
        int i14 = i + 6;
        float f36 = fArr[i14];
        int i15 = i + 15;
        float f37 = fArr[i15];
        float f38 = f36 - f37;
        int i16 = i + 7;
        float f39 = fArr[i16];
        int i17 = i + 14;
        float f40 = fArr[i17];
        float f41 = f39 + f40;
        float f42 = (f3 * f38) - (f2 * f41);
        float f43 = (f41 * f3) + (f38 * f2);
        float f44 = f36 + f37;
        float f45 = f39 - f40;
        float f46 = (f2 * f44) - (f3 * f45);
        float f47 = (f2 * f45) + (f3 * f44);
        float f48 = f6 + f18;
        float f49 = f9 + f19;
        float f50 = f30 + f42;
        float f51 = f31 + f43;
        fArr[i] = f48 + f50;
        fArr[i4] = f49 + f51;
        fArr[i10] = f48 - f50;
        fArr[i12] = f49 - f51;
        float f52 = f6 - f18;
        float f53 = f9 - f19;
        float f54 = f30 - f42;
        float f55 = f31 - f43;
        fArr[i6] = f52 - f55;
        fArr[i8] = f53 + f54;
        fArr[i14] = f52 + f55;
        fArr[i16] = f53 - f54;
        float f56 = f10 - f23;
        float f57 = f11 + f22;
        float f58 = f34 - f46;
        float f59 = f35 - f47;
        fArr[i5] = f56 + f58;
        fArr[i3] = f57 + f59;
        fArr[i13] = f56 - f58;
        fArr[i11] = f57 - f59;
        float f60 = f10 + f23;
        float f61 = f11 - f22;
        float f62 = f34 + f46;
        float f63 = f35 + f47;
        fArr[i9] = f60 - f63;
        fArr[i7] = f61 + f62;
        fArr[i17] = f60 + f63;
        fArr[i15] = f61 - f62;
    }

    public static void cftf082(FloatLargeArray floatLargeArray, long j, FloatLargeArray floatLargeArray2, long j2) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j3 = j;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        float f = floatLargeArray4.getFloat(j2 + 1);
        float f2 = floatLargeArray4.getFloat(j2 + 2);
        float f3 = floatLargeArray4.getFloat(j2 + 3);
        long j4 = 9 + j3;
        float f4 = floatLargeArray.getFloat(j) - floatLargeArray3.getFloat(j4);
        long j5 = 1 + j3;
        long j6 = j3 + 8;
        float f5 = floatLargeArray3.getFloat(j5) + floatLargeArray3.getFloat(j6);
        float f6 = floatLargeArray.getFloat(j) + floatLargeArray3.getFloat(j4);
        float f7 = floatLargeArray3.getFloat(j5) - floatLargeArray3.getFloat(j6);
        long j7 = j3 + 4;
        long j8 = j4;
        long j9 = j3 + 13;
        float f8 = floatLargeArray3.getFloat(j7) - floatLargeArray3.getFloat(j9);
        long j10 = j6;
        long j11 = j3 + 5;
        long j12 = j5;
        long j13 = j3 + 12;
        float f9 = floatLargeArray3.getFloat(j11) + floatLargeArray3.getFloat(j13);
        float f10 = (f8 - f9) * f;
        float f11 = (f9 + f8) * f;
        float f12 = floatLargeArray3.getFloat(j7) + floatLargeArray3.getFloat(j9);
        float f13 = floatLargeArray3.getFloat(j11) - floatLargeArray3.getFloat(j13);
        float f14 = (f12 - f13) * f;
        long j14 = j9;
        long j15 = j3 + 2;
        long j16 = j13;
        long j17 = j3 + 11;
        float f15 = floatLargeArray3.getFloat(j15) - floatLargeArray3.getFloat(j17);
        long j18 = j11;
        long j19 = j3 + 3;
        float f16 = f * (f13 + f12);
        long j20 = j3 + 10;
        float f17 = floatLargeArray3.getFloat(j19) + floatLargeArray3.getFloat(j20);
        float f18 = (f2 * f15) - (f3 * f17);
        float f19 = (f17 * f2) + (f15 * f3);
        float f20 = floatLargeArray3.getFloat(j15) + floatLargeArray3.getFloat(j17);
        float f21 = floatLargeArray3.getFloat(j19) - floatLargeArray3.getFloat(j20);
        float f22 = (f3 * f20) - (f2 * f21);
        float f23 = (f21 * f3) + (f20 * f2);
        long j21 = j17;
        long j22 = j3 + 6;
        long j23 = j20;
        long j24 = j3 + 15;
        float f24 = floatLargeArray3.getFloat(j22) - floatLargeArray3.getFloat(j24);
        long j25 = j19;
        long j26 = j3 + 7;
        long j27 = j15;
        long j28 = j3 + 14;
        float f25 = floatLargeArray3.getFloat(j26) + floatLargeArray3.getFloat(j28);
        float f26 = (f3 * f24) - (f2 * f25);
        float f27 = (f25 * f3) + (f24 * f2);
        float f28 = floatLargeArray3.getFloat(j22) + floatLargeArray3.getFloat(j24);
        float f29 = floatLargeArray3.getFloat(j26) - floatLargeArray3.getFloat(j28);
        float f30 = (f2 * f28) - (f3 * f29);
        float f31 = (f2 * f29) + (f3 * f28);
        float f32 = f4 + f10;
        float f33 = f5 + f11;
        float f34 = f18 + f26;
        float f35 = f19 + f27;
        long j29 = j24;
        floatLargeArray3.setFloat(j3, f32 + f34);
        floatLargeArray3.setFloat(j12, f33 + f35);
        floatLargeArray3.setFloat(j27, f32 - f34);
        floatLargeArray3.setFloat(j25, f33 - f35);
        float f36 = f4 - f10;
        float f37 = f5 - f11;
        float f38 = f18 - f26;
        float f39 = f19 - f27;
        floatLargeArray3.setFloat(j7, f36 - f39);
        floatLargeArray3.setFloat(j18, f37 + f38);
        floatLargeArray3.setFloat(j22, f36 + f39);
        floatLargeArray3.setFloat(j26, f37 - f38);
        float f40 = f6 - f16;
        float f41 = f7 + f14;
        float f42 = f22 - f30;
        float f43 = f23 - f31;
        floatLargeArray3.setFloat(j10, f40 + f42);
        floatLargeArray3.setFloat(j8, f41 + f43);
        floatLargeArray3.setFloat(j23, f40 - f42);
        floatLargeArray3.setFloat(j21, f41 - f43);
        float f44 = f6 + f16;
        float f45 = f7 - f14;
        float f46 = f22 + f30;
        float f47 = f23 + f31;
        floatLargeArray3.setFloat(j16, f44 - f47);
        floatLargeArray3.setFloat(j14, f45 + f46);
        floatLargeArray3.setFloat(j28, f44 + f47);
        floatLargeArray3.setFloat(j29, f45 - f46);
    }

    public static void cftf040(float[] fArr, int i) {
        float f = fArr[i];
        int i2 = i + 4;
        float f2 = fArr[i2];
        float f3 = f + f2;
        int i3 = i + 1;
        float f4 = fArr[i3];
        int i4 = i + 5;
        float f5 = fArr[i4];
        float f6 = f4 + f5;
        float f7 = f - f2;
        float f8 = f4 - f5;
        int i5 = i + 2;
        float f9 = fArr[i5];
        int i6 = i + 6;
        float f10 = fArr[i6];
        float f11 = f9 + f10;
        int i7 = i + 3;
        float f12 = fArr[i7];
        int i8 = i + 7;
        float f13 = fArr[i8];
        float f14 = f12 + f13;
        float f15 = f9 - f10;
        float f16 = f12 - f13;
        fArr[i] = f3 + f11;
        fArr[i3] = f6 + f14;
        fArr[i5] = f7 - f16;
        fArr[i7] = f8 + f15;
        fArr[i2] = f3 - f11;
        fArr[i4] = f6 - f14;
        fArr[i6] = f7 + f16;
        fArr[i8] = f8 - f15;
    }

    public static void cftf040(FloatLargeArray floatLargeArray, long j) {
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j2 = j;
        long j3 = 4 + j2;
        float f = floatLargeArray.getFloat(j) + floatLargeArray2.getFloat(j3);
        long j4 = 1 + j2;
        long j5 = 5 + j2;
        float f2 = floatLargeArray2.getFloat(j4) + floatLargeArray2.getFloat(j5);
        float f3 = floatLargeArray.getFloat(j) - floatLargeArray2.getFloat(j3);
        float f4 = floatLargeArray2.getFloat(j4) - floatLargeArray2.getFloat(j5);
        long j6 = 2 + j2;
        long j7 = j5;
        long j8 = j2 + 6;
        float f5 = floatLargeArray2.getFloat(j6) + floatLargeArray2.getFloat(j8);
        long j9 = j3;
        long j10 = j2 + 3;
        float f6 = f3;
        float f7 = f4;
        long j11 = j2 + 7;
        float f8 = floatLargeArray2.getFloat(j10) + floatLargeArray2.getFloat(j11);
        float f9 = floatLargeArray2.getFloat(j6) - floatLargeArray2.getFloat(j8);
        float f10 = floatLargeArray2.getFloat(j10) - floatLargeArray2.getFloat(j11);
        floatLargeArray2.setFloat(j2, f + f5);
        floatLargeArray2.setFloat(j4, f2 + f8);
        floatLargeArray2.setFloat(j6, f6 - f10);
        floatLargeArray2.setFloat(j10, f7 + f9);
        floatLargeArray2.setFloat(j9, f - f5);
        floatLargeArray2.setFloat(j7, f2 - f8);
        floatLargeArray2.setFloat(j8, f6 + f10);
        floatLargeArray2.setFloat(j11, f7 - f9);
    }

    public static void cftb040(float[] fArr, int i) {
        float f = fArr[i];
        int i2 = i + 4;
        float f2 = fArr[i2];
        float f3 = f + f2;
        int i3 = i + 1;
        float f4 = fArr[i3];
        int i4 = i + 5;
        float f5 = fArr[i4];
        float f6 = f4 + f5;
        float f7 = f - f2;
        float f8 = f4 - f5;
        int i5 = i + 2;
        float f9 = fArr[i5];
        int i6 = i + 6;
        float f10 = fArr[i6];
        float f11 = f9 + f10;
        int i7 = i + 3;
        float f12 = fArr[i7];
        int i8 = i + 7;
        float f13 = fArr[i8];
        float f14 = f12 + f13;
        float f15 = f9 - f10;
        float f16 = f12 - f13;
        fArr[i] = f3 + f11;
        fArr[i3] = f6 + f14;
        fArr[i5] = f7 + f16;
        fArr[i7] = f8 - f15;
        fArr[i2] = f3 - f11;
        fArr[i4] = f6 - f14;
        fArr[i6] = f7 - f16;
        fArr[i8] = f8 + f15;
    }

    public static void cftb040(FloatLargeArray floatLargeArray, long j) {
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        long j2 = j;
        long j3 = 4 + j2;
        float f = floatLargeArray.getFloat(j) + floatLargeArray2.getFloat(j3);
        long j4 = 1 + j2;
        long j5 = 5 + j2;
        float f2 = floatLargeArray2.getFloat(j4) + floatLargeArray2.getFloat(j5);
        float f3 = floatLargeArray.getFloat(j) - floatLargeArray2.getFloat(j3);
        float f4 = floatLargeArray2.getFloat(j4) - floatLargeArray2.getFloat(j5);
        long j6 = 2 + j2;
        long j7 = j5;
        long j8 = j2 + 6;
        float f5 = floatLargeArray2.getFloat(j6) + floatLargeArray2.getFloat(j8);
        long j9 = j3;
        long j10 = j2 + 3;
        float f6 = f3;
        float f7 = f4;
        long j11 = j2 + 7;
        float f8 = floatLargeArray2.getFloat(j10) + floatLargeArray2.getFloat(j11);
        float f9 = floatLargeArray2.getFloat(j6) - floatLargeArray2.getFloat(j8);
        float f10 = floatLargeArray2.getFloat(j10) - floatLargeArray2.getFloat(j11);
        floatLargeArray2.setFloat(j2, f + f5);
        floatLargeArray2.setFloat(j4, f2 + f8);
        floatLargeArray2.setFloat(j6, f6 + f10);
        floatLargeArray2.setFloat(j10, f7 - f9);
        floatLargeArray2.setFloat(j9, f - f5);
        floatLargeArray2.setFloat(j7, f2 - f8);
        floatLargeArray2.setFloat(j8, f6 - f10);
        floatLargeArray2.setFloat(j11, f7 + f9);
    }

    public static void cftx020(float[] fArr, int i) {
        float f = fArr[i];
        int i2 = i + 2;
        float f2 = fArr[i2];
        int i3 = i + 1;
        int i4 = i + 3;
        fArr[i] = f + f2;
        fArr[i3] = fArr[i3] + fArr[i4];
        fArr[i2] = f - f2;
        fArr[i4] = (-fArr[i3]) + fArr[i4];
    }

    public static void cftx020(FloatLargeArray floatLargeArray, long j) {
        long j2 = 2 + j;
        float f = floatLargeArray.getFloat(j) - floatLargeArray.getFloat(j2);
        long j3 = 1 + j;
        long j4 = 3 + j;
        float f2 = (-floatLargeArray.getFloat(j3)) + floatLargeArray.getFloat(j4);
        floatLargeArray.setFloat(j, floatLargeArray.getFloat(j) + floatLargeArray.getFloat(j2));
        floatLargeArray.setFloat(j3, floatLargeArray.getFloat(j3) + floatLargeArray.getFloat(j4));
        floatLargeArray.setFloat(j2, f);
        floatLargeArray.setFloat(j4, f2);
    }

    public static void cftxb020(float[] fArr, int i) {
        float f = fArr[i];
        int i2 = i + 2;
        float f2 = fArr[i2];
        int i3 = i + 1;
        int i4 = i + 3;
        fArr[i] = f + f2;
        fArr[i3] = fArr[i3] + fArr[i4];
        fArr[i2] = f - f2;
        fArr[i4] = fArr[i3] - fArr[i4];
    }

    public static void cftxb020(FloatLargeArray floatLargeArray, long j) {
        long j2 = 2 + j;
        float f = floatLargeArray.getFloat(j) - floatLargeArray.getFloat(j2);
        long j3 = 1 + j;
        long j4 = 3 + j;
        float f2 = floatLargeArray.getFloat(j3) - floatLargeArray.getFloat(j4);
        floatLargeArray.setFloat(j, floatLargeArray.getFloat(j) + floatLargeArray.getFloat(j2));
        floatLargeArray.setFloat(j3, floatLargeArray.getFloat(j3) + floatLargeArray.getFloat(j4));
        floatLargeArray.setFloat(j2, f);
        floatLargeArray.setFloat(j4, f2);
    }

    public static void cftxc020(float[] fArr, int i) {
        float f = fArr[i];
        int i2 = i + 2;
        float f2 = fArr[i2];
        int i3 = i + 1;
        int i4 = i + 3;
        fArr[i] = f + f2;
        fArr[i3] = fArr[i3] - fArr[i4];
        fArr[i2] = f - f2;
        fArr[i4] = fArr[i3] + fArr[i4];
    }

    public static void cftxc020(FloatLargeArray floatLargeArray, long j) {
        long j2 = 2 + j;
        float f = floatLargeArray.getFloat(j) - floatLargeArray.getFloat(j2);
        long j3 = 1 + j;
        long j4 = 3 + j;
        float f2 = floatLargeArray.getFloat(j3) + floatLargeArray.getFloat(j4);
        floatLargeArray.setFloat(j, floatLargeArray.getFloat(j) + floatLargeArray.getFloat(j2));
        floatLargeArray.setFloat(j3, floatLargeArray.getFloat(j3) - floatLargeArray.getFloat(j4));
        floatLargeArray.setFloat(j2, f);
        floatLargeArray.setFloat(j4, f2);
    }

    public static void rftfsub(int i, float[] fArr, int i2, int i3, float[] fArr2, int i4) {
        int i5 = i >> 1;
        int i6 = (i3 * 2) / i5;
        int i7 = 0;
        for (int i8 = 2; i8 < i5; i8 += 2) {
            i7 += i6;
            float f = 0.5f - fArr2[(i4 + i3) - i7];
            float f2 = fArr2[i4 + i7];
            int i9 = i2 + i8;
            int i10 = i2 + (i - i8);
            float f3 = fArr[i9];
            float f4 = f3 - fArr[i10];
            int i11 = i9 + 1;
            int i12 = i10 + 1;
            float f5 = fArr[i11] + fArr[i12];
            float f6 = (f * f4) - (f2 * f5);
            float f7 = (f * f5) + (f2 * f4);
            fArr[i9] = f3 - f6;
            fArr[i11] = f7 - fArr[i11];
            fArr[i10] = fArr[i10] + f6;
            fArr[i12] = f7 - fArr[i12];
        }
        int i13 = i2 + i5 + 1;
        fArr[i13] = -fArr[i13];
    }

    public static void rftfsub(long j, FloatLargeArray floatLargeArray, long j2, long j3, FloatLargeArray floatLargeArray2, long j4) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j5 = j >> 1;
        long j6 = (j3 * 2) / j5;
        long j7 = 0;
        long j8 = 2;
        while (j8 < j5) {
            long j9 = j7 + j6;
            float f = 0.5f - floatLargeArray4.getFloat((j4 + j3) - j9);
            float f2 = floatLargeArray4.getFloat(j4 + j9);
            long j10 = j2 + j8;
            long j11 = j2 + (j - j8);
            float f3 = floatLargeArray3.getFloat(j10) - floatLargeArray3.getFloat(j11);
            long j12 = j6;
            long j13 = j10 + 1;
            long j14 = j9;
            long j15 = j11 + 1;
            float f4 = floatLargeArray3.getFloat(j13) + floatLargeArray3.getFloat(j15);
            float f5 = (f * f3) - (f2 * f4);
            float f6 = (f * f4) + (f2 * f3);
            floatLargeArray3.setFloat(j10, floatLargeArray3.getFloat(j10) - f5);
            floatLargeArray3.setFloat(j13, f6 - floatLargeArray3.getFloat(j13));
            floatLargeArray3.setFloat(j11, floatLargeArray3.getFloat(j11) + f5);
            floatLargeArray3.setFloat(j15, f6 - floatLargeArray3.getFloat(j15));
            j8 += 2;
            j6 = j12;
            j7 = j14;
        }
        long j16 = j2 + j5 + 1;
        floatLargeArray3.setFloat(j16, -floatLargeArray3.getFloat(j16));
    }

    public static void rftbsub(int i, float[] fArr, int i2, int i3, float[] fArr2, int i4) {
        int i5 = i >> 1;
        int i6 = (i3 * 2) / i5;
        int i7 = 0;
        for (int i8 = 2; i8 < i5; i8 += 2) {
            i7 += i6;
            float f = 0.5f - fArr2[(i4 + i3) - i7];
            float f2 = fArr2[i4 + i7];
            int i9 = i2 + i8;
            int i10 = i2 + (i - i8);
            float f3 = fArr[i9];
            float f4 = f3 - fArr[i10];
            int i11 = i9 + 1;
            int i12 = i10 + 1;
            float f5 = fArr[i11] + fArr[i12];
            float f6 = (f * f4) - (f2 * f5);
            float f7 = (f * f5) + (f2 * f4);
            fArr[i9] = f3 - f6;
            fArr[i11] = fArr[i11] - f7;
            fArr[i10] = fArr[i10] + f6;
            fArr[i12] = fArr[i12] - f7;
        }
    }

    public static void rftbsub(long j, FloatLargeArray floatLargeArray, long j2, long j3, FloatLargeArray floatLargeArray2, long j4) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j5 = j >> 1;
        long j6 = (j3 * 2) / j5;
        long j7 = 0;
        long j8 = 2;
        while (j8 < j5) {
            long j9 = j7 + j6;
            float f = 0.5f - floatLargeArray4.getFloat((j4 + j3) - j9);
            float f2 = floatLargeArray4.getFloat(j4 + j9);
            long j10 = j2 + j8;
            long j11 = j2 + (j - j8);
            float f3 = floatLargeArray3.getFloat(j10) - floatLargeArray3.getFloat(j11);
            long j12 = j10 + 1;
            long j13 = j9;
            long j14 = j11 + 1;
            float f4 = floatLargeArray3.getFloat(j12) + floatLargeArray3.getFloat(j14);
            float f5 = (f * f3) - (f2 * f4);
            float f6 = (f * f4) + (f2 * f3);
            floatLargeArray3.setFloat(j10, floatLargeArray3.getFloat(j10) - f5);
            floatLargeArray3.setFloat(j12, floatLargeArray3.getFloat(j12) - f6);
            floatLargeArray3.setFloat(j11, floatLargeArray3.getFloat(j11) + f5);
            floatLargeArray3.setFloat(j14, floatLargeArray3.getFloat(j14) - f6);
            j8 += 2;
            j5 = j5;
            j6 = j6;
            j7 = j13;
            floatLargeArray4 = floatLargeArray2;
        }
    }

    public static void dctsub(int i, float[] fArr, int i2, int i3, float[] fArr2, int i4) {
        int i5 = i >> 1;
        int i6 = i3 / i;
        int i7 = 0;
        for (int i8 = 1; i8 < i5; i8++) {
            i7 += i6;
            int i9 = i2 + i8;
            int i10 = (i - i8) + i2;
            float f = fArr2[i4 + i7];
            float f2 = fArr2[(i4 + i3) - i7];
            float f3 = f - f2;
            float f4 = f + f2;
            float f5 = fArr[i9];
            float f6 = fArr[i10];
            fArr[i9] = (f3 * f5) + (f4 * f6);
            fArr[i10] = (f4 * f5) - (f3 * f6);
        }
        int i11 = i5 + i2;
        fArr[i11] = fArr[i11] * fArr2[i4];
    }

    public static void dctsub(long j, FloatLargeArray floatLargeArray, long j2, long j3, FloatLargeArray floatLargeArray2, long j4) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j5 = j >> 1;
        long j6 = j3 / j;
        long j7 = 0;
        long j8 = 1;
        while (j8 < j5) {
            j7 += j6;
            long j9 = j4 + j7;
            long j10 = j2 + j8;
            long j11 = j2 + (j - j8);
            long j12 = j6;
            long j13 = (j4 + j3) - j7;
            float f = floatLargeArray4.getFloat(j9) - floatLargeArray4.getFloat(j13);
            float f2 = floatLargeArray4.getFloat(j9) + floatLargeArray4.getFloat(j13);
            float f3 = (floatLargeArray3.getFloat(j10) * f2) - (floatLargeArray3.getFloat(j11) * f);
            floatLargeArray3.setFloat(j10, (f * floatLargeArray3.getFloat(j10)) + (f2 * floatLargeArray3.getFloat(j11)));
            floatLargeArray3.setFloat(j11, f3);
            j8++;
            j6 = j12;
        }
        long j14 = j2 + j5;
        floatLargeArray3.setFloat(j14, floatLargeArray3.getFloat(j14) * floatLargeArray2.getFloat(j4));
    }

    public static void scale(int i, double d, double[] dArr, int i2, boolean z) {
        Class<CommonUtils> cls = CommonUtils.class;
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        int i3 = z ? i * 2 : i;
        if (numberOfThreads <= 1 || ((long) i3) <= getThreadsBeginN_1D_FFT_2Threads()) {
            int i4 = i2 + i3;
            for (int i5 = i2; i5 < i4; i5++) {
                dArr[i5] = dArr[i5] * d;
            }
            return;
        }
        int i6 = i3 / 2;
        Future[] futureArr = new Future[2];
        int i7 = 0;
        while (i7 < 2) {
            final int i8 = i2 + (i7 * i6);
            final int i9 = i7 == 1 ? i2 + i3 : i8 + i6;
            final double[] dArr2 = dArr;
            final double d2 = d;
            futureArr[i7] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                public void run() {
                    for (int i = i8; i < i9; i++) {
                        double[] dArr = dArr2;
                        dArr[i] = dArr[i] * d2;
                    }
                }
            });
            i7++;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }

    public static void scale(long j, double d, DoubleLargeArray doubleLargeArray, long j2, boolean z) {
        DoubleLargeArray doubleLargeArray2 = doubleLargeArray;
        Class<CommonUtils> cls = CommonUtils.class;
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        long j3 = z ? 2 * j : j;
        if (numberOfThreads <= 1 || j3 < getThreadsBeginN_1D_FFT_2Threads()) {
            for (long j4 = j2; j4 < j2 + j3; j4++) {
                doubleLargeArray2.setDouble(j4, doubleLargeArray2.getDouble(j4) * d);
            }
            return;
        }
        long j5 = j3 / ((long) numberOfThreads);
        Future[] futureArr = new Future[numberOfThreads];
        int i = 0;
        while (i < numberOfThreads) {
            final long j6 = j2 + (((long) i) * j5);
            final long j7 = i == numberOfThreads + -1 ? j2 + j3 : j6 + j5;
            final DoubleLargeArray doubleLargeArray3 = doubleLargeArray;
            int i2 = i;
            final double d2 = d;
            futureArr[i2] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                public void run() {
                    for (long j = j6; j < j7; j++) {
                        DoubleLargeArray doubleLargeArray = doubleLargeArray3;
                        doubleLargeArray.setDouble(j, doubleLargeArray.getDouble(j) * d2);
                    }
                }
            });
            i = i2 + 1;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }

    public static void scale(int i, final float f, final float[] fArr, int i2, boolean z) {
        Class<CommonUtils> cls = CommonUtils.class;
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (z) {
            i *= 2;
        }
        if (numberOfThreads <= 1 || ((long) i) <= getThreadsBeginN_1D_FFT_2Threads()) {
            int i3 = i + i2;
            while (i2 < i3) {
                fArr[i2] = fArr[i2] * f;
                i2++;
            }
            return;
        }
        int i4 = i / 2;
        Future[] futureArr = new Future[2];
        int i5 = 0;
        while (i5 < 2) {
            final int i6 = (i5 * i4) + i2;
            final int i7 = i5 == 1 ? i2 + i : i6 + i4;
            futureArr[i5] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                public void run() {
                    for (int i = i6; i < i7; i++) {
                        float[] fArr = fArr;
                        fArr[i] = fArr[i] * f;
                    }
                }
            });
            i5++;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }

    public static void scale(long j, float f, FloatLargeArray floatLargeArray, long j2, boolean z) {
        FloatLargeArray floatLargeArray2 = floatLargeArray;
        Class<CommonUtils> cls = CommonUtils.class;
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        long j3 = z ? 2 * j : j;
        if (numberOfThreads <= 1 || j3 < getThreadsBeginN_1D_FFT_2Threads()) {
            for (long j4 = j2; j4 < j2 + j3; j4++) {
                floatLargeArray2.setDouble(j4, floatLargeArray2.getDouble(j4) * ((double) f));
            }
            return;
        }
        long j5 = j3 / ((long) numberOfThreads);
        Future[] futureArr = new Future[numberOfThreads];
        int i = 0;
        while (i < numberOfThreads) {
            final long j6 = j2 + (((long) i) * j5);
            final long j7 = i == numberOfThreads + -1 ? j2 + j3 : j6 + j5;
            final FloatLargeArray floatLargeArray3 = floatLargeArray;
            final float f2 = f;
            futureArr[i] = ConcurrencyUtils.submit((Runnable) new Runnable() {
                public void run() {
                    for (long j = j6; j < j7; j++) {
                        FloatLargeArray floatLargeArray = floatLargeArray3;
                        floatLargeArray.setDouble(j, floatLargeArray.getDouble(j) * ((double) f2));
                    }
                }
            });
            i++;
        }
        try {
            ConcurrencyUtils.waitForCompletion(futureArr);
        } catch (InterruptedException e) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e);
        } catch (ExecutionException e2) {
            Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, e2);
        }
    }
}
